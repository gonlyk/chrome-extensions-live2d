/*! https://github.com/xiazeyu/live2d-widget.js built@2021-2-20 0:07:17 */
var L2Dwidget=function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=46)}([function(t,e,i){var r=i(29)("wks"),n=i(20),o=i(1).Symbol,s="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=s&&o[t]||(s?o:n)("Symbol."+t))}).store=r},function(t,e){var i=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=i)},function(t,e,i){var r=i(6);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,i){var r=i(11),n=i(31);t.exports=i(7)?function(t,e,i){return r.f(t,e,n(1,i))}:function(t,e,i){return t[e]=i,t}},function(t,e){var i=t.exports={version:"2.5.3"};"number"==typeof __e&&(__e=i)},function(t,e,i){var r=i(1),n=i(3),o=i(8),s=i(20)("src"),a="toString",_=Function[a],h=(""+_).split(a);i(4).inspectSource=function(t){return _.call(t)},(t.exports=function(t,e,i,a){var _="function"==typeof i;_&&(o(i,"name")||n(i,"name",e)),t[e]!==i&&(_&&(o(i,s)||n(i,s,t[e]?""+t[e]:h.join(String(e)))),t===r?t[e]=i:a?t[e]?t[e]=i:n(t,e,i):(delete t[e],n(t,e,i)))})(Function.prototype,a,function(){return"function"==typeof this&&this[s]||_.call(this)})},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,i){t.exports=!i(30)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){var i={}.hasOwnProperty;t.exports=function(t,e){return i.call(t,e)}},function(t,e){t.exports={}},function(t,e){var i={}.toString;t.exports=function(t){return i.call(t).slice(8,-1)}},function(t,e,i){var r=i(2),n=i(49),o=i(50),s=Object.defineProperty;e.f=i(7)?Object.defineProperty:function(t,e,i){if(r(t),e=o(e,!0),r(i),n)try{return s(t,e,i)}catch(t){}if("get"in i||"set"in i)throw TypeError("Accessors not supported!");return"value"in i&&(t[e]=i.value),t}},function(t,e,i){var r=i(1),n=i(4),o=i(3),s=i(5),a=i(13),_="prototype",h=function(t,e,i){var l,u,c,$,p=t&h.F,f=t&h.G,d=t&h.S,y=t&h.P,g=t&h.B,m=f?r:d?r[e]||(r[e]={}):(r[e]||{})[_],v=f?n:n[e]||(n[e]={}),T=v[_]||(v[_]={});f&&(i=e);for(l in i)c=((u=!p&&m&&void 0!==m[l])?m:i)[l],$=g&&u?a(c,r):y&&"function"==typeof c?a(Function.call,c):c,m&&s(m,l,c,t&h.U),v[l]!=c&&o(v,l,$),y&&T[l]!=c&&(T[l]=c)};r.core=n,h.F=1,h.G=2,h.S=4,h.P=8,h.B=16,h.W=32,h.U=64,h.R=128,t.exports=h},function(t,e,i){var r=i(14);t.exports=function(t,e,i){if(r(t),void 0===e)return t;switch(i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,r){return t.call(e,i,r)};case 3:return function(i,r,n){return t.call(e,i,r,n)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.L2Dwidget=void 0;var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=h(i(42)),o=i(16),s=i(43),a=i(82),_=h(a);function h(t){return t&&t.__esModule?t:{default:t}}var l=new(function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,s.EventEmitter);function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var t=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return t.config=o.config,t}return r(e,[{key:"init",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.configApplyer)(t),this.emit("config",this.config),!o.config.mobile.show&&n.default.mobile()||(this.coreApp=_.default,this.live2DMgr=(0,a.theRealInit)(this))}},{key:"captureFrame",value:function(t){return this.coreApp.captureFrame(t)}},{key:"downloadFrame",value:function(){this.captureFrame(function(t){var e=document.createElement("a");document.body.appendChild(e),e.setAttribute("type","hidden"),e.href=t,e.download="live2d.png",e.click()})}}]),e}());e.L2Dwidget=l},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.config=e.configApplyer=void 0;var r=o(i(80)),n=o(i(81));function o(t){return t&&t.__esModule?t:{default:t}}var s={};e.configApplyer=function(t){(0,n.default)(s,t,(0,r.default)())},e.config=s},function(t,e,i){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var i=!0;function r(){i||(this._$MT=null,this._$5S=null,this._$NP=0,r._$42++,this._$5S=new U(this))}r._$0s=1,r._$4s=2,r._$42=0,r._$62=function(t,e){try{if(e instanceof ArrayBuffer&&(e=new DataView(e)),!(e instanceof DataView))throw new ht("_$SS#loadModel(b) / b _$x be DataView or ArrayBuffer");var i,n=new Tt(e),o=n._$ST(),s=n._$ST(),_=n._$ST();if(109!=o||111!=s||99!=_)throw new ht("_$gi _$C _$li , _$Q0 _$P0.");if(i=n._$ST(),n._$gr(i),i>G._$T7){t._$NP|=r._$4s;throw new ht("_$gi _$C _$li , _$n0 _$_ version _$li ( SDK : "+G._$T7+" < _$f0 : "+i+" )@_$SS#loadModel()\n")}var h=n._$nP();if(i>=G._$s7){var l=n._$9T(),u=n._$9T();if(-30584!=l||-30584!=u)throw t._$NP|=r._$0s,new ht("_$gi _$C _$li , _$0 _$6 _$Ui.")}t._$KS(h);var c=t.getModelContext();c.setDrawParam(t.getDrawParam()),c.init()}catch(t){a._$Rb(t)}},r.prototype._$KS=function(t){this._$MT=t},r.prototype.getModelImpl=function(){return null==this._$MT&&(this._$MT=new u,this._$MT._$zP()),this._$MT},r.prototype.getCanvasWidth=function(){return null==this._$MT?0:this._$MT.getCanvasWidth()},r.prototype.getCanvasHeight=function(){return null==this._$MT?0:this._$MT.getCanvasHeight()},r.prototype.getParamFloat=function(t){return"number"!=typeof t&&(t=this._$5S.getParamIndex(l.getID(t))),this._$5S.getParamFloat(t)},r.prototype.setParamFloat=function(t,e,i){"number"!=typeof t&&(t=this._$5S.getParamIndex(l.getID(t))),arguments.length<3&&(i=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)*(1-i)+e*i)},r.prototype.addToParamFloat=function(t,e,i){"number"!=typeof t&&(t=this._$5S.getParamIndex(l.getID(t))),arguments.length<3&&(i=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)+e*i)},r.prototype.multParamFloat=function(t,e,i){"number"!=typeof t&&(t=this._$5S.getParamIndex(l.getID(t))),arguments.length<3&&(i=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)*(1+(e-1)*i))},r.prototype.getParamIndex=function(t){return this._$5S.getParamIndex(l.getID(t))},r.prototype.loadParam=function(){this._$5S.loadParam()},r.prototype.saveParam=function(){this._$5S.saveParam()},r.prototype.init=function(){this._$5S.init()},r.prototype.update=function(){this._$5S.update()},r.prototype._$Rs=function(){return a._$li("_$60 _$PT _$Rs()"),-1},r.prototype._$Ds=function(t){a._$li("_$60 _$PT _$SS#_$Ds() \n")},r.prototype._$K2=function(){},r.prototype.draw=function(){},r.prototype.getModelContext=function(){return this._$5S},r.prototype._$s2=function(){return this._$NP},r.prototype._$P7=function(t,e,i,r){var n=-1,o=0;if(0!=i)if(1==t.length){c=t[0];var s=0!=this.getParamFloat(c),a=($=e[0],this.getPartsOpacity($)),_=i/r;s?(a+=_)>1&&(a=1):(a-=_)<0&&(a=0),this.setPartsOpacity($,a)}else{for(u=0;u<t.length;u++){c=t[u];if(p=0!=this.getParamFloat(c)){if(n>=0)break;n=u;$=e[u];o=this.getPartsOpacity($),(o+=i/r)>1&&(o=1)}}n<0&&(console.log("No _$wi _$q0/ _$U default[%s]",t[0]),n=0,o=1,this.loadParam(),this.setParamFloat(t[n],o),this.saveParam());for(u=0;u<t.length;u++){$=e[u];if(n==u)this.setPartsOpacity($,o);else{var h,l=this.getPartsOpacity($);(1-(h=o<.5?-.5*o/.5+1:.5*(1-o)/.5))*(1-o)>.15&&(h=1-.15/(1-o)),l>h&&(l=h),this.setPartsOpacity($,l)}}}else for(var u=0;u<t.length;u++){var c=t[u],$=e[u],p=0!=this.getParamFloat(c);this.setPartsOpacity($,p?1:0)}},r.prototype.setPartsOpacity=function(t,e){"number"!=typeof t&&(t=this._$5S.getPartsDataIndex(h.getID(t))),this._$5S.setPartsOpacity(t,e)},r.prototype.getPartsDataIndex=function(t){return t instanceof h||(t=h.getID(t)),this._$5S.getPartsDataIndex(t)},r.prototype.getPartsOpacity=function(t){return"number"!=typeof t&&(t=this._$5S.getPartsDataIndex(h.getID(t))),t<0?0:this._$5S.getPartsOpacity(t)},r.prototype.getDrawParam=function(){},r.prototype.getDrawDataIndex=function(t){return this._$5S.getDrawDataIndex(D.getID(t))},r.prototype.getDrawData=function(t){return this._$5S.getDrawData(t)},r.prototype.getTransformedPoints=function(t){var e=this._$5S._$C2(t);return e instanceof ut?e.getTransformedPoints():null},r.prototype.getIndexArray=function(t){if(t<0||t>=this._$5S._$aS.length)return null;var e=this._$5S._$aS[t];return null!=e&&e.getType()==H._$wb&&e instanceof lt?e.getIndexArray():null};function n(t){if(!i){this.clipContextList=new Array,this.glcontext=t.gl,this.dp_webgl=t,this.curFrameNo=0,this.firstError_clipInNotUpdate=!0,this.colorBuffer=0,this.isInitGLFBFunc=!1,this.tmpBoundsOnModel=new T,at.glContext.length>at.frameBuffers.length&&(this.curFrameNo=this.getMaskRenderTexture()),this.tmpModelToViewMatrix=new O,this.tmpMatrix2=new O,this.tmpMatrixForMask=new O,this.tmpMatrixForDraw=new O,this.CHANNEL_COLORS=new Array;var e=new x;(e=new x).r=0,e.g=0,e.b=0,e.a=1,this.CHANNEL_COLORS.push(e),(e=new x).r=1,e.g=0,e.b=0,e.a=0,this.CHANNEL_COLORS.push(e),(e=new x).r=0,e.g=1,e.b=0,e.a=0,this.CHANNEL_COLORS.push(e),(e=new x).r=0,e.g=0,e.b=1,e.a=0,this.CHANNEL_COLORS.push(e);for(var r=0;r<this.CHANNEL_COLORS.length;r++)this.dp_webgl.setChannelFlagAsColor(r,this.CHANNEL_COLORS[r])}}n.CHANNEL_COUNT=4,n.RENDER_TEXTURE_USE_MIPMAP=!1,n.NOT_USED_FRAME=-100,n.prototype._$L7=function(){if(this.tmpModelToViewMatrix&&(this.tmpModelToViewMatrix=null),this.tmpMatrix2&&(this.tmpMatrix2=null),this.tmpMatrixForMask&&(this.tmpMatrixForMask=null),this.tmpMatrixForDraw&&(this.tmpMatrixForDraw=null),this.tmpBoundsOnModel&&(this.tmpBoundsOnModel=null),this.CHANNEL_COLORS){for(var t=this.CHANNEL_COLORS.length-1;t>=0;--t)this.CHANNEL_COLORS.splice(t,1);this.CHANNEL_COLORS=[]}this.releaseShader()},n.prototype.releaseShader=function(){for(var t=at.frameBuffers.length,e=0;e<t;e++)this.gl.deleteFramebuffer(at.frameBuffers[e].framebuffer);at.frameBuffers=[],at.glContext=[]},n.prototype.init=function(t,e,i){for(var r=0;r<e.length;r++){var n=e[r].getClipIDList();if(null!=n){var s=this.findSameClip(n);null==s&&(s=new o(this,t,n),this.clipContextList.push(s));var a=e[r].getDrawDataID(),_=t.getDrawDataIndex(a);s.addClippedDrawData(a,_);i[r].clipBufPre_clipContext=s}}},n.prototype.getMaskRenderTexture=function(){var t=null;return t=this.dp_webgl.createFramebuffer(),at.frameBuffers[this.dp_webgl.glno]=t,this.dp_webgl.glno},n.prototype.setupClip=function(t,e){for(var i=0,r=0;r<this.clipContextList.length;r++){var n=this.clipContextList[r];this.calcClippedDrawTotalBounds(t,n),n.isUsing&&i++}if(i>0){var o=e.gl.getParameter(e.gl.FRAMEBUFFER_BINDING),s=new Array(4);s[0]=0,s[1]=0,s[2]=e.gl.canvas.width,s[3]=e.gl.canvas.height,e.gl.viewport(0,0,at.clippingMaskBufferSize,at.clippingMaskBufferSize),this.setupLayoutBounds(i),e.gl.bindFramebuffer(e.gl.FRAMEBUFFER,at.frameBuffers[this.curFrameNo].framebuffer),e.gl.clearColor(0,0,0,0),e.gl.clear(e.gl.COLOR_BUFFER_BIT);for(r=0;r<this.clipContextList.length;r++){var a=(n=this.clipContextList[r]).allClippedDrawRect,_=(n.layoutChannelNo,n.layoutBounds);this.tmpBoundsOnModel._$jL(a),this.tmpBoundsOnModel.expand(.05*a.width,.05*a.height);var h=_.width/this.tmpBoundsOnModel.width,l=_.height/this.tmpBoundsOnModel.height;this.tmpMatrix2.identity(),this.tmpMatrix2.translate(-1,-1,0),this.tmpMatrix2.scale(2,2,1),this.tmpMatrix2.translate(_.x,_.y,0),this.tmpMatrix2.scale(h,l,1),this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0),this.tmpMatrixForMask.setMatrix(this.tmpMatrix2.m),this.tmpMatrix2.identity(),this.tmpMatrix2.translate(_.x,_.y,0),this.tmpMatrix2.scale(h,l,1),this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0),this.tmpMatrixForDraw.setMatrix(this.tmpMatrix2.m);for(var u=this.tmpMatrixForMask.getArray(),c=0;c<16;c++)n.matrixForMask[c]=u[c];var $=this.tmpMatrixForDraw.getArray();for(c=0;c<16;c++)n.matrixForDraw[c]=$[c];for(var p=n.clippingMaskDrawIndexList.length,f=0;f<p;f++){var d=n.clippingMaskDrawIndexList[f],y=t.getDrawData(d),g=t._$C2(d);e.setClipBufPre_clipContextForMask(n),y.draw(e,t,g)}}e.gl.bindFramebuffer(e.gl.FRAMEBUFFER,o),e.setClipBufPre_clipContextForMask(null),e.gl.viewport(s[0],s[1],s[2],s[3])}},n.prototype.getColorBuffer=function(){return this.colorBuffer},n.prototype.findSameClip=function(t){for(var e=0;e<this.clipContextList.length;e++){var i=this.clipContextList[e],r=i.clipIDList.length;if(r==t.length){for(var n=0,o=0;o<r;o++)for(var s=i.clipIDList[o],a=0;a<r;a++)if(t[a]==s){n++;break}if(n==r)return i}}return null},n.prototype.calcClippedDrawTotalBounds=function(t,e){for(var i=t._$Ri.getModelImpl().getCanvasWidth(),r=t._$Ri.getModelImpl().getCanvasHeight(),n=i>r?i:r,o=n,s=n,a=0,_=0,h=e.clippedDrawContextList.length,l=0;l<h;l++){var u=e.clippedDrawContextList[l].drawDataIndex,c=t._$C2(u);if(c._$yo()){for(var $=c.getTransformedPoints(),p=$.length,f=[],d=[],y=0,g=B._$i2;g<p;g+=B._$No)f[y]=$[g],d[y]=$[g+1],y++;var m=Math.min.apply(null,f),v=Math.min.apply(null,d),T=Math.max.apply(null,f),P=Math.max.apply(null,d);m<o&&(o=m),v<s&&(s=v),T>a&&(a=T),P>_&&(_=P)}}if(o==n)e.allClippedDrawRect.x=0,e.allClippedDrawRect.y=0,e.allClippedDrawRect.width=0,e.allClippedDrawRect.height=0,e.isUsing=!1;else{var S=a-o,L=_-s;e.allClippedDrawRect.x=o,e.allClippedDrawRect.y=s,e.allClippedDrawRect.width=S,e.allClippedDrawRect.height=L,e.isUsing=!0}},n.prototype.setupLayoutBounds=function(t){var e=t/n.CHANNEL_COUNT,i=t%n.CHANNEL_COUNT;e=~~e,i=~~i;for(var r=0,o=0;o<n.CHANNEL_COUNT;o++){var s=e+(o<i?1:0);if(0==s);else if(1==s){(u=this.clipContextList[r++]).layoutChannelNo=o,u.layoutBounds.x=0,u.layoutBounds.y=0,u.layoutBounds.width=1,u.layoutBounds.height=1}else if(2==s)for(var _=0;_<s;_++){var h=0;l=~~(l=_%2);(u=this.clipContextList[r++]).layoutChannelNo=o,u.layoutBounds.x=.5*l,u.layoutBounds.y=0,u.layoutBounds.width=.5,u.layoutBounds.height=1}else if(s<=4)for(_=0;_<s;_++){l=~~(l=_%2),h=~~(h=_/2);(u=this.clipContextList[r++]).layoutChannelNo=o,u.layoutBounds.x=.5*l,u.layoutBounds.y=.5*h,u.layoutBounds.width=.5,u.layoutBounds.height=.5}else if(s<=9)for(_=0;_<s;_++){var l;l=~~(l=_%3),h=~~(h=_/3);var u;(u=this.clipContextList[r++]).layoutChannelNo=o,u.layoutBounds.x=l/3,u.layoutBounds.y=h/3,u.layoutBounds.width=1/3,u.layoutBounds.height=1/3}else a._$li("_$6 _$0P mask count : %d",s)}};function o(t,e,i){this.clipIDList=new Array,this.clipIDList=i,this.clippingMaskDrawIndexList=new Array;for(var r=0;r<i.length;r++)this.clippingMaskDrawIndexList.push(e.getDrawDataIndex(i[r]));this.clippedDrawContextList=new Array,this.isUsing=!0,this.layoutChannelNo=0,this.layoutBounds=new T,this.allClippedDrawRect=new T,this.matrixForMask=new Float32Array(16),this.matrixForDraw=new Float32Array(16),this.owner=t}o.prototype.addClippedDrawData=function(t,e){var i=new function(t,e){this._$gP=t,this.drawDataIndex=e}(t,e);this.clippedDrawContextList.push(i)};function s(){i||(this._$dP=null,this._$eo=null,this._$V0=null,this._$dP=1e3,this._$eo=1e3,this._$V0=1,this._$a0())}s._$JT=function(t,e,i){var r=t/e,n=i/e,o=1-(1-n)*(1-n),s=1-(1-n)*(1-n),a=1/3*(1-n)*o+(n*(2/3)+1/3*(1-n))*(1-o),_=(n+2/3*(1-n))*s+(n*(1/3)+2/3*(1-n))*(1-s),h=1-3*_+3*a-0,l=3*_-6*a+0,u=3*a-0;if(r<=0)return 0;if(r>=1)return 1;var c=r*r;return h*(r*c)+l*c+u*r+0},s.prototype._$a0=function(){},s.prototype.setFadeIn=function(t){this._$dP=t},s.prototype.setFadeOut=function(t){this._$eo=t},s.prototype._$pT=function(t){this._$V0=t},s.prototype.getFadeOut=function(){return this._$eo},s.prototype._$4T=function(){return this._$eo},s.prototype._$mT=function(){return this._$V0},s.prototype.getDurationMSec=function(){return-1},s.prototype.getLoopDurationMSec=function(){return-1},s.prototype.updateParam=function(t,e){if(e._$AT&&!e._$9L){var i=M.getUserTimeMSec();if(e._$z2<0){e._$z2=i,e._$bs=i;var r=this.getDurationMSec();e._$Do<0&&(e._$Do=r<=0?-1:e._$z2+r)}var n=this._$V0;0<=(n=n*(0==this._$dP?1:_t._$r2((i-e._$bs)/this._$dP))*(0==this._$eo||e._$Do<0?1:_t._$r2((e._$Do-i)/this._$eo)))&&n<=1||console.log("### assert!! ### "),this.updateParamExe(t,i,n,e),e._$Do>0&&e._$Do<i&&(e._$9L=!0)}},s.prototype.updateParamExe=function(t,e,i,r){};function a(){}a._$8s=0,a._$fT=new Object,a.start=function(t){var e=a._$fT[t];null==e&&((e=new function(){this._$r=null,this._$0S=null})._$r=t,a._$fT[t]=e),e._$0S=M.getSystemTimeMSec()},a.dump=function(t){var e=a._$fT[t];if(null!=e){var i=M.getSystemTimeMSec()-e._$0S;return console.log(t+" : "+i+"ms"),i}return-1},a.end=function(t){var e=a._$fT[t];if(null!=e){return M.getSystemTimeMSec()-e._$0S}return-1},a._$li=function(t,e){console.log("_$li : "+t+"\n",e)},a._$Ji=function(t,e){console.log(t,e)},a._$dL=function(t,e){console.log(t,e),console.log("\n")},a._$KL=function(t,e){for(var i=0;i<e;i++)i%16==0&&i>0?console.log("\n"):i%8==0&&i>0&&console.log("  "),console.log("%02X ",255&t[i]);console.log("\n")},a._$nr=function(t,e,i){console.log("%s\n",t);for(var r=e.length,n=0;n<r;++n)console.log("%5d",e[n]),console.log("%s\n",i),console.log(",");console.log("\n")},a._$Rb=function(t){console.log("dump exception : "+t),console.log("stack :: "+t.stack)};function _(){i||(this.x=null,this.y=null,this.width=null,this.height=null)}_.prototype._$8P=function(){return.5*(this.x+this.x+this.width)},_.prototype._$6P=function(){return.5*(this.y+this.y+this.height)},_.prototype._$EL=function(){return this.x+this.width},_.prototype._$5T=function(){return this.y+this.height},_.prototype._$jL=function(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r},_.prototype._$jL=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height};function h(t){i||it.prototype.constructor.call(this,t)}h.prototype=new it,h._$tP=new Object,h._$27=function(){h._$tP.clear()},h.getID=function(t){var e=h._$tP[t];return null==e&&(e=new h(t),h._$tP[t]=e),e},h.prototype._$3s=function(){return new h};function l(t){i||it.prototype.constructor.call(this,t)}l.prototype=new it,l._$tP=new Object,l._$27=function(){l._$tP.clear()},l.getID=function(t){var e=l._$tP[t];return null==e&&(e=new l(t),l._$tP[t]=e),e},l.prototype._$3s=function(){return new l};function u(){i||(this._$vo=null,this._$F2=null,this._$ao=400,this._$1S=400,u._$42++)}u._$42=0,u.prototype._$zP=function(){null==this._$vo&&(this._$vo=new rt),null==this._$F2&&(this._$F2=new Array)},u.prototype.getCanvasWidth=function(){return this._$ao},u.prototype.getCanvasHeight=function(){return this._$1S},u.prototype._$F0=function(t){this._$vo=t._$nP(),this._$F2=t._$nP(),this._$ao=t._$6L(),this._$1S=t._$6L()},u.prototype._$6S=function(t){this._$F2.push(t)},u.prototype._$Xr=function(){return this._$F2},u.prototype._$E2=function(){return this._$vo};function c(){i||(this.p1=new $,this.p2=new $,this._$Fo=0,this._$Db=0,this._$L2=0,this._$M2=0,this._$ks=0,this._$9b=0,this._$iP=0,this._$iT=0,this._$lL=new Array,this._$qP=new Array,this.setup(.3,.5,.1))}c.prototype.setup=function(t,e,i){this._$ks=this._$Yb(),this.p2._$xT(),3==arguments.length&&(this._$Fo=t,this._$L2=e,this.p1._$p=i,this.p2._$p=i,this.p2.y=t,this.setup())},c.prototype.getPhysicsPoint1=function(){return this.p1},c.prototype.getPhysicsPoint2=function(){return this.p2},c.prototype._$qr=function(){return this._$Db},c.prototype._$pr=function(t){this._$Db=t},c.prototype._$5r=function(){return this._$M2},c.prototype._$Cs=function(){return this._$9b},c.prototype._$Yb=function(){return-180*Math.atan2(this.p1.x-this.p2.x,-(this.p1.y-this.p2.y))/Math.PI},c.prototype.addSrcParam=function(t,e,i,r){var n=new f(t,e,i,r);this._$lL.push(n)},c.prototype.addTargetParam=function(t,e,i,r){var n=new y(t,e,i,r);this._$qP.push(n)},c.prototype.update=function(t,e){if(0==this._$iP)return this._$iP=this._$iT=e,void(this._$Fo=Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y)));var i=(e-this._$iT)/1e3;if(0!=i){for(var r=this._$lL.length-1;r>=0;--r){this._$lL[r]._$oP(t,this)}this._$oo(t,i),this._$M2=this._$Yb(),this._$9b=(this._$M2-this._$ks)/i,this._$ks=this._$M2}for(r=this._$qP.length-1;r>=0;--r){this._$qP[r]._$YS(t,this)}this._$iT=e},c.prototype._$oo=function(t,e){e<.033&&(e=.033);var i=1/e;this.p1.vx=(this.p1.x-this.p1._$s0)*i,this.p1.vy=(this.p1.y-this.p1._$70)*i,this.p1.ax=(this.p1.vx-this.p1._$7L)*i,this.p1.ay=(this.p1.vy-this.p1._$HL)*i,this.p1.fx=this.p1.ax*this.p1._$p,this.p1.fy=this.p1.ay*this.p1._$p,this.p1._$xT();var r,n,o=-Math.atan2(this.p1.y-this.p2.y,this.p1.x-this.p2.x),s=Math.cos(o),a=Math.sin(o),_=9.8*this.p2._$p,h=this._$Db*St._$bS,l=_*Math.cos(o-h);r=l*a,n=l*s;var u=-this.p1.fx*a*a,c=-this.p1.fy*a*s,$=-this.p2.vx*this._$L2,p=-this.p2.vy*this._$L2;this.p2.fx=r+u+$,this.p2.fy=n+c+p,this.p2.ax=this.p2.fx/this.p2._$p,this.p2.ay=this.p2.fy/this.p2._$p,this.p2.vx+=this.p2.ax*e,this.p2.vy+=this.p2.ay*e,this.p2.x+=this.p2.vx*e,this.p2.y+=this.p2.vy*e;var f=Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y));this.p2.x=this.p1.x+this._$Fo*(this.p2.x-this.p1.x)/f,this.p2.y=this.p1.y+this._$Fo*(this.p2.y-this.p1.y)/f,this.p2.vx=(this.p2.x-this.p2._$s0)*i,this.p2.vy=(this.p2.y-this.p2._$70)*i,this.p2._$xT()};function $(){this._$p=1,this.x=0,this.y=0,this.vx=0,this.vy=0,this.ax=0,this.ay=0,this.fx=0,this.fy=0,this._$s0=0,this._$70=0,this._$7L=0,this._$HL=0}$.prototype._$xT=function(){this._$s0=this.x,this._$70=this.y,this._$7L=this.vx,this._$HL=this.vy};function p(t,e,i){this._$wL=null,this.scale=null,this._$V0=null,this._$wL=t,this.scale=e,this._$V0=i}p.prototype._$oP=function(t,e){};function f(t,e,i,r){p.prototype.constructor.call(this,e,i,r),this._$tL=null,this._$tL=t}f.prototype=new p,f.prototype._$oP=function(t,e){var i=this.scale*t.getParamFloat(this._$wL),r=e.getPhysicsPoint1();switch(this._$tL){default:case c.Src.SRC_TO_X:r.x=r.x+(i-r.x)*this._$V0;break;case c.Src.SRC_TO_Y:r.y=r.y+(i-r.y)*this._$V0;break;case c.Src.SRC_TO_G_ANGLE:var n=e._$qr();n+=(i-n)*this._$V0,e._$pr(n)}};function d(t,e,i){this._$wL=null,this.scale=null,this._$V0=null,this._$wL=t,this.scale=e,this._$V0=i}d.prototype._$YS=function(t,e){};function y(t,e,i,r){d.prototype.constructor.call(this,e,i,r),this._$YP=null,this._$YP=t}y.prototype=new d,y.prototype._$YS=function(t,e){switch(this._$YP){default:case c.Target.TARGET_FROM_ANGLE:t.setParamFloat(this._$wL,this.scale*e._$5r(),this._$V0);break;case c.Target.TARGET_FROM_ANGLE_V:t.setParamFloat(this._$wL,this.scale*e._$Cs(),this._$V0)}},c.Src=function(){},c.Src.SRC_TO_X="SRC_TO_X",c.Src.SRC_TO_Y="SRC_TO_Y",c.Src.SRC_TO_G_ANGLE="SRC_TO_G_ANGLE",c.Target=function(){},c.Target.TARGET_FROM_ANGLE="TARGET_FROM_ANGLE",c.Target.TARGET_FROM_ANGLE_V="TARGET_FROM_ANGLE_V";function g(){i||(this._$fL=0,this._$gL=0,this._$B0=1,this._$z0=1,this._$qT=0,this.reflectX=!1,this.reflectY=!1)}g.prototype.init=function(t){this._$fL=t._$fL,this._$gL=t._$gL,this._$B0=t._$B0,this._$z0=t._$z0,this._$qT=t._$qT,this.reflectX=t.reflectX,this.reflectY=t.reflectY},g.prototype._$F0=function(t){this._$fL=t._$_T(),this._$gL=t._$_T(),this._$B0=t._$_T(),this._$z0=t._$_T(),this._$qT=t._$_T(),t.getFormatVersion()>=G.LIVE2D_FORMAT_VERSION_V2_10_SDK2&&(this.reflectX=t._$po(),this.reflectY=t._$po())},g.prototype._$e=function(){};var v=function(){};v._$ni=function(t,e,i,r,n,o,s,a,_){var h=s*o-a*n;if(0==h)return null;var l,u=((t-i)*o-(e-r)*n)/h;return l=0!=n?(t-i-u*s)/n:(e-r-u*a)/o,isNaN(l)&&(l=(t-i-u*s)/n,isNaN(l)&&(l=(e-r-u*a)/o),isNaN(l)&&(console.log("a is NaN @UtVector#_$ni() "),console.log("v1x : "+n),console.log("v1x != 0 ? "+(0!=n)))),null==_?new Array(l,u):(_[0]=l,_[1]=u,_)};function T(){i||(this.x=null,this.y=null,this.width=null,this.height=null)}T.prototype._$8P=function(){return this.x+.5*this.width},T.prototype._$6P=function(){return this.y+.5*this.height},T.prototype._$EL=function(){return this.x+this.width},T.prototype._$5T=function(){return this.y+this.height},T.prototype._$jL=function(t,e,i,r){this.x=t,this.y=e,this.width=i,this.height=r},T.prototype._$jL=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},T.prototype.contains=function(t,e){return this.x<=this.x&&this.y<=this.y&&this.x<=this.x+this.width&&this.y<=this.y+this.height},T.prototype.expand=function(t,e){this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e};function P(){}P._$Z2=function(t,e,i,r){var n=e._$Q2(t,i),o=t._$vs(),s=t._$Tr();if(e._$zr(o,s,n),n<=0)return r[o[0]];if(1==n){return(a=r[o[0]])+((_=r[o[1]])-a)*(u=s[0])|0}if(2==n){var a=r[o[0]],_=r[o[1]],h=r[o[2]],l=r[o[3]],u=s[0],c=s[1];return(P=a+(_-a)*u|0)+((h+(l-h)*u|0)-P)*c|0}if(3==n){var $=r[o[0]],p=r[o[1]],f=r[o[2]],d=r[o[3]],y=r[o[4]],g=r[o[5]],m=r[o[6]],v=r[o[7]],T=(u=s[0],c=s[1],s[2]);return(P=(a=$+(p-$)*u|0)+((_=f+(d-f)*u|0)-a)*c|0)+(((h=y+(g-y)*u|0)+((l=m+(v-m)*u|0)-h)*c|0)-P)*T|0}if(4==n){var P,S=r[o[0]],L=r[o[1]],w=r[o[2]],x=r[o[3]],E=r[o[4]],M=r[o[5]],b=r[o[6]],A=r[o[7]],I=r[o[8]],O=r[o[9]],D=r[o[10]],R=r[o[11]],F=r[o[12]],C=r[o[13]],N=r[o[14]],B=r[o[15]],G=(u=s[0],c=s[1],T=s[2],s[3]);return(P=(a=($=S+(L-S)*u|0)+((p=w+(x-w)*u|0)-$)*c|0)+((_=(f=E+(M-E)*u|0)+((d=b+(A-b)*u|0)-f)*c|0)-a)*T|0)+(((h=(y=I+(O-I)*u|0)+((g=D+(R-D)*u|0)-y)*c|0)+((l=(m=F+(C-F)*u|0)+((v=N+(B-N)*u|0)-m)*c|0)-h)*T|0)-P)*G|0}for(var U=1<<n,k=new Float32Array(U),Y=0;Y<U;Y++){for(var V=Y,j=1,X=0;X<n;X++)j*=V%2==0?1-s[X]:s[X],V/=2;k[Y]=j}for(var z=new Float32Array(U),H=0;H<U;H++)z[H]=r[o[H]];var W=0;for(H=0;H<U;H++)W+=k[H]*z[H];return W+.5|0},P._$br=function(t,e,i,r){var n=e._$Q2(t,i),o=t._$vs(),s=t._$Tr();if(e._$zr(o,s,n),n<=0)return r[o[0]];if(1==n){return(a=r[o[0]])+((_=r[o[1]])-a)*(u=s[0])}if(2==n){var a=r[o[0]],_=r[o[1]],h=r[o[2]],l=r[o[3]],u=s[0];return(1-(v=s[1]))*(a+(_-a)*u)+v*(h+(l-h)*u)}if(3==n){var c=r[o[0]],$=r[o[1]],p=r[o[2]],f=r[o[3]],d=r[o[4]],y=r[o[5]],g=r[o[6]],m=r[o[7]],v=(u=s[0],s[1]);return(1-(N=s[2]))*((1-v)*(c+($-c)*u)+v*(p+(f-p)*u))+N*((1-v)*(d+(y-d)*u)+v*(g+(m-g)*u))}if(4==n){var T=r[o[0]],P=r[o[1]],S=r[o[2]],L=r[o[3]],w=r[o[4]],x=r[o[5]],E=r[o[6]],M=r[o[7]],b=r[o[8]],A=r[o[9]],I=r[o[10]],O=r[o[11]],D=r[o[12]],R=r[o[13]],F=r[o[14]],C=r[o[15]],N=(u=s[0],v=s[1],s[2]),B=s[3];return(1-B)*((1-N)*((1-v)*(T+(P-T)*u)+v*(S+(L-S)*u))+N*((1-v)*(w+(x-w)*u)+v*(E+(M-E)*u)))+B*((1-N)*((1-v)*(b+(A-b)*u)+v*(I+(O-I)*u))+N*((1-v)*(D+(R-D)*u)+v*(F+(C-F)*u)))}for(var G=1<<n,U=new Float32Array(G),k=0;k<G;k++){for(var Y=k,V=1,j=0;j<n;j++)V*=Y%2==0?1-s[j]:s[j],Y/=2;U[k]=V}for(var X=new Float32Array(G),z=0;z<G;z++)X[z]=r[o[z]];var H=0;for(z=0;z<G;z++)H+=U[z]*X[z];return H},P._$Vr=function(t,e,i,r,n,o,s,a){var _=e._$Q2(t,i),h=t._$vs(),l=t._$Tr();e._$zr(h,l,_);var u=2*r,c=s;if(_<=0){var $=n[h[0]];if(2==a&&0==s)M._$jT($,0,o,0,u);else for(var p=0;p<u;)o[c]=$[p++],o[c+1]=$[p++],c+=a}else if(1==_){$=n[h[0]];var f=n[h[1]],d=1-(m=l[0]);for(p=0;p<u;)o[c]=$[p]*d+f[p]*m,++p,o[c+1]=$[p]*d+f[p]*m,++p,c+=a}else if(2==_){$=n[h[0]],f=n[h[1]];var y=n[h[2]],g=n[h[3]],m=l[0],v=(Y=1-(D=l[1]))*(d=1-m),T=Y*m,P=D*d,S=D*m;for(p=0;p<u;)o[c]=v*$[p]+T*f[p]+P*y[p]+S*g[p],++p,o[c+1]=v*$[p]+T*f[p]+P*y[p]+S*g[p],++p,c+=a}else if(3==_){var L=n[h[0]],w=n[h[1]],x=n[h[2]],E=n[h[3]],b=n[h[4]],A=n[h[5]],I=n[h[6]],O=n[h[7]],D=(m=l[0],l[1]),R=(V=1-(st=l[2]))*(Y=1-D)*(d=1-m),F=V*Y*m,C=V*D*d,N=V*D*m,B=st*Y*d,G=st*Y*m,U=st*D*d,k=st*D*m;for(p=0;p<u;)o[c]=R*L[p]+F*w[p]+C*x[p]+N*E[p]+B*b[p]+G*A[p]+U*I[p]+k*O[p],++p,o[c+1]=R*L[p]+F*w[p]+C*x[p]+N*E[p]+B*b[p]+G*A[p]+U*I[p]+k*O[p],++p,c+=a}else if(4==_){var Y,V,j=n[h[0]],X=n[h[1]],z=n[h[2]],H=n[h[3]],W=n[h[4]],q=n[h[5]],J=n[h[6]],Q=n[h[7]],Z=n[h[8]],K=n[h[9]],tt=n[h[10]],et=n[h[11]],it=n[h[12]],rt=n[h[13]],nt=n[h[14]],ot=n[h[15]],st=(m=l[0],D=l[1],l[2]),at=l[3],_t=1-at,ht=_t*(V=1-st)*(Y=1-D)*(d=1-m),lt=_t*V*Y*m,ut=_t*V*D*d,ct=_t*V*D*m,$t=_t*st*Y*d,pt=_t*st*Y*m,ft=_t*st*D*d,dt=_t*st*D*m,yt=at*V*Y*d,gt=at*V*Y*m,mt=at*V*D*d,vt=at*V*D*m,Tt=at*st*Y*d,Pt=at*st*Y*m,St=at*st*D*d,Lt=at*st*D*m;for(p=0;p<u;)o[c]=ht*j[p]+lt*X[p]+ut*z[p]+ct*H[p]+$t*W[p]+pt*q[p]+ft*J[p]+dt*Q[p]+yt*Z[p]+gt*K[p]+mt*tt[p]+vt*et[p]+Tt*it[p]+Pt*rt[p]+St*nt[p]+Lt*ot[p],++p,o[c+1]=ht*j[p]+lt*X[p]+ut*z[p]+ct*H[p]+$t*W[p]+pt*q[p]+ft*J[p]+dt*Q[p]+yt*Z[p]+gt*K[p]+mt*tt[p]+vt*et[p]+Tt*it[p]+Pt*rt[p]+St*nt[p]+Lt*ot[p],++p,c+=a}else{for(var wt=1<<_,xt=new Float32Array(wt),Et=0;Et<wt;Et++){for(var Mt=Et,bt=1,At=0;At<_;At++)bt*=Mt%2==0?1-l[At]:l[At],Mt/=2;xt[Et]=bt}for(var It=new Float32Array(wt),Ot=0;Ot<wt;Ot++)It[Ot]=n[h[Ot]];for(p=0;p<u;){var Dt=0,Rt=0,Ft=p+1;for(Ot=0;Ot<wt;Ot++)Dt+=xt[Ot]*It[Ot][p],Rt+=xt[Ot]*It[Ot][Ft];p+=2,o[c]=Dt,o[c+1]=Rt,c+=a}}};function S(){i||(this.x=null,this.y=null)}S.prototype._$HT=function(t,e){this.x=t,this.y=e},S.prototype._$HT=function(t){this.x=t.x,this.y=t.y};function L(){i||(this._$gP=null,this._$dr=null,this._$GS=null,this._$qb=null,this._$Lb=null,this._$mS=null,this.clipID=null,this.clipIDList=new Array)}L._$ur=-2,L._$ES=500,L._$wb=2,L._$8S=3,L._$52=L._$ES,L._$R2=L._$ES,L._$or=function(){return L._$52},L._$Pr=function(){return L._$R2},L.prototype.convertClipIDForV2_11=function(t){var e=[];return null==t?null:0==t.length?null:/,/.test(t)?e=t.id.split(","):(e.push(t.id),e)},L.prototype._$F0=function(t){this._$gP=t._$nP(),this._$dr=t._$nP(),this._$GS=t._$nP(),this._$qb=t._$6L(),this._$Lb=t._$cS(),this._$mS=t._$Tb(),t.getFormatVersion()>=G._$T7?(this.clipID=t._$nP(),this.clipIDList=this.convertClipIDForV2_11(this.clipID)):this.clipIDList=[],this._$MS(this._$Lb)},L.prototype.getClipIDList=function(){return this.clipIDList},L.prototype.init=function(t){},L.prototype._$Nr=function(t,e){if(e._$IS[0]=!1,e._$Us=P._$Z2(t,this._$GS,e._$IS,this._$Lb),at._$Zs);else if(e._$IS[0])return;e._$7s=P._$br(t,this._$GS,e._$IS,this._$mS)},L.prototype._$2b=function(t,e){},L.prototype.getDrawDataID=function(){return this._$gP},L.prototype._$j2=function(t){this._$gP=t},L.prototype.getOpacity=function(t,e){return e._$7s},L.prototype._$zS=function(t,e){return e._$Us},L.prototype._$MS=function(t){for(var e=t.length-1;e>=0;--e){var i=t[e];i<L._$52?L._$52=i:i>L._$R2&&(L._$R2=i)}},L.prototype.getTargetBaseDataID=function(){return this._$dr},L.prototype._$gs=function(t){this._$dr=t},L.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},L.prototype.preDraw=function(t,e,i){},L.prototype.draw=function(t,e,i){},L.prototype.getType=function(){},L.prototype._$B2=function(t,e,i){};function w(){i||(this._$Eb=w._$ps,this._$lT=1,this._$C0=1,this._$tT=1,this._$WL=1,this.culling=!1,this.matrix4x4=new Float32Array(16),this.premultipliedAlpha=!1,this.anisotropy=0,this.clippingProcess=w.CLIPPING_PROCESS_NONE,this.clipBufPre_clipContextMask=null,this.clipBufPre_clipContextDraw=null,this.CHANNEL_COLORS=new Array)}w._$ps=32,w.CLIPPING_PROCESS_NONE=0,w.CLIPPING_PROCESS_OVERWRITE_ALPHA=1,w.CLIPPING_PROCESS_MULTIPLY_ALPHA=2,w.CLIPPING_PROCESS_DRAW=3,w.CLIPPING_PROCESS_CLEAR_ALPHA=4,w.prototype.setChannelFlagAsColor=function(t,e){this.CHANNEL_COLORS[t]=e},w.prototype.getChannelFlagAsColor=function(t){return this.CHANNEL_COLORS[t]},w.prototype._$ZT=function(){},w.prototype._$Uo=function(t,e,i,r,n,o,s){},w.prototype._$Rs=function(){return-1},w.prototype._$Ds=function(t){},w.prototype.setBaseColor=function(t,e,i,r){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),r<0?r=0:r>1&&(r=1),this._$lT=t,this._$C0=e,this._$tT=i,this._$WL=r},w.prototype._$WP=function(t){this.culling=t},w.prototype.setMatrix=function(t){for(var e=0;e<16;e++)this.matrix4x4[e]=t[e]},w.prototype._$IT=function(){return this.matrix4x4},w.prototype.setPremultipliedAlpha=function(t){this.premultipliedAlpha=t},w.prototype.isPremultipliedAlpha=function(){return this.premultipliedAlpha},w.prototype.setAnisotropy=function(t){this.anisotropy=t},w.prototype.getAnisotropy=function(){return this.anisotropy},w.prototype.getClippingProcess=function(){return this.clippingProcess},w.prototype.setClippingProcess=function(t){this.clippingProcess=t},w.prototype.setClipBufPre_clipContextForMask=function(t){this.clipBufPre_clipContextMask=t},w.prototype.getClipBufPre_clipContextMask=function(){return this.clipBufPre_clipContextMask},w.prototype.setClipBufPre_clipContextForDraw=function(t){this.clipBufPre_clipContextDraw=t},w.prototype.getClipBufPre_clipContextDraw=function(){return this.clipBufPre_clipContextDraw};function x(){i||(this.a=1,this.r=1,this.g=1,this.b=1,this.scale=1,this._$ho=1,this.blendMode=at.L2D_COLOR_BLEND_MODE_MULT)}function E(){i||(this._$kP=null,this._$dr=null,this._$Ai=!0,this._$mS=null)}E._$ur=-2,E._$c2=1,E._$_b=2,E.prototype._$F0=function(t){this._$kP=t._$nP(),this._$dr=t._$nP()},E.prototype.readV2_opacity=function(t){t.getFormatVersion()>=G.LIVE2D_FORMAT_VERSION_V2_10_SDK2&&(this._$mS=t._$Tb())},E.prototype.init=function(t){},E.prototype._$Nr=function(t,e){},E.prototype.interpolateOpacity=function(t,e,i,r){null==this._$mS?i.setInterpolatedOpacity(1):i.setInterpolatedOpacity(P._$br(t,e,r,this._$mS))},E.prototype._$2b=function(t,e){},E.prototype._$nb=function(t,e,i,r,n,o,s){},E.prototype.getType=function(){},E.prototype._$gs=function(t){this._$dr=t},E.prototype._$a2=function(t){this._$kP=t},E.prototype.getTargetBaseDataID=function(){return this._$dr},E.prototype.getBaseDataID=function(){return this._$kP},E.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()};function M(){}M._$W2=0,M._$CS=M._$W2,M._$Mo=function(){return!0},M._$XP=function(t){try{for(var e=getTimeMSec();getTimeMSec()-e<t;);}catch(t){t._$Rb()}},M.getUserTimeMSec=function(){return M._$CS==M._$W2?M.getSystemTimeMSec():M._$CS},M.setUserTimeMSec=function(t){M._$CS=t},M.updateUserTimeMSec=function(){return M._$CS=M.getSystemTimeMSec()},M.getTimeMSec=function(){return(new Date).getTime()},M.getSystemTimeMSec=function(){return(new Date).getTime()},M._$Q=function(t){},M._$jT=function(t,e,i,r,n){for(var o=0;o<n;o++)i[r+o]=t[e+o]};function b(){i||(this._$VP=0,this._$wL=null,this._$GP=null,this._$8o=b._$ds,this._$2r=-1,this._$O2=0,this._$ri=0)}b._$ds=-2,b.prototype._$F0=function(t){this._$wL=t._$nP(),this._$VP=t._$6L(),this._$GP=t._$nP()},b.prototype.getParamIndex=function(t){return this._$2r!=t&&(this._$8o=b._$ds),this._$8o},b.prototype._$Pb=function(t,e){this._$8o=t,this._$2r=e},b.prototype.getParamID=function(){return this._$wL},b.prototype._$yP=function(t){this._$wL=t},b.prototype._$N2=function(){return this._$VP},b.prototype._$d2=function(){return this._$GP},b.prototype._$t2=function(t,e){this._$VP=t,this._$GP=e},b.prototype._$Lr=function(){return this._$O2},b.prototype._$wr=function(t){this._$O2=t},b.prototype._$SL=function(){return this._$ri},b.prototype._$AL=function(t){this._$ri=t};function A(){}A.startsWith=function(t,e,i){var r=e+i.length;if(r>=t.length)return!1;for(var n=e;n<r;n++)if(A.getChar(t,n)!=i.charAt(n-e))return!1;return!0},A.getChar=function(t,e){return String.fromCharCode(t.getUint8(e))},A.createString=function(t,e,i){for(var r=new ArrayBuffer(2*i),n=new Uint16Array(r),o=0;o<i;o++)n[o]=t.getUint8(e+o);return String.fromCharCode.apply(null,n)},A._$LS=function(t,e,i,r){t instanceof ArrayBuffer&&(t=new DataView(t));var n=i,o=!1,s=!1,a=0,_=A.getChar(t,n);"-"==_&&(o=!0,n++);for(var h=!1;n<e;n++){switch(_=A.getChar(t,n)){case"0":a*=10;break;case"1":a=10*a+1;break;case"2":a=10*a+2;break;case"3":a=10*a+3;break;case"4":a=10*a+4;break;case"5":a=10*a+5;break;case"6":a=10*a+6;break;case"7":a=10*a+7;break;case"8":a=10*a+8;break;case"9":a=10*a+9;break;case".":s=!0,n++,h=!0;break;default:h=!0}if(h)break}if(s)for(var l=.1,u=!1;n<e;n++){switch(_=A.getChar(t,n)){case"0":break;case"1":a+=1*l;break;case"2":a+=2*l;break;case"3":a+=3*l;break;case"4":a+=4*l;break;case"5":a+=5*l;break;case"6":a+=6*l;break;case"7":a+=7*l;break;case"8":a+=8*l;break;case"9":a+=9*l;break;default:u=!0}if(l*=.1,u)break}return o&&(a=-a),r[0]=n,a};function I(){i||(this._$Ob=null)}I.prototype._$zP=function(){this._$Ob=new Array},I.prototype._$F0=function(t){this._$Ob=t._$nP()},I.prototype._$Ur=function(t){if(t._$WS())return!0;for(var e=t._$v2(),i=this._$Ob.length-1;i>=0;--i){var r=this._$Ob[i].getParamIndex(e);if(r==b._$ds&&(r=t.getParamIndex(this._$Ob[i].getParamID())),t._$Xb(r))return!0}return!1},I.prototype._$Q2=function(t,e){for(var i,r,n=this._$Ob.length,o=t._$v2(),s=0,a=0;a<n;a++){var _=this._$Ob[a];if((i=_.getParamIndex(o))==b._$ds&&(i=t.getParamIndex(_.getParamID()),_._$Pb(i,o)),i<0)throw new Exception("err 23242 : "+_.getParamID());var h=i<0?0:t.getParamFloat(i);r=_._$N2();var l,u,c=_._$d2(),$=-1,p=0;if(r<1);else if(1==r)(l=c[0])-B._$J<h&&h<l+B._$J?($=0,p=0):($=0,e[0]=!0);else if(h<(l=c[0])-B._$J)$=0,e[0]=!0;else if(h<l+B._$J)$=0;else{for(var f=!1,d=1;d<r;++d){if(h<(u=c[d])+B._$J){u-B._$J<h?$=d:($=d-1,p=(h-l)/(u-l),s++),f=!0;break}l=u}f||($=r-1,p=0,e[0]=!0)}_._$wr($),_._$AL(p)}return s},I.prototype._$zr=function(t,e,i){var r=1<<i;r+1>B._$Qb&&console.log("err 23245\n");for(var n=this._$Ob.length,o=1,s=1,a=0,_=0;_<r;++_)t[_]=0;for(var h=0;h<n;++h){var l=this._$Ob[h];if(0==l._$SL()){if((u=l._$Lr()*o)<0&&at._$3T)throw new Exception("err 23246");for(_=0;_<r;++_)t[_]+=u}else{var u=o*l._$Lr(),c=o*(l._$Lr()+1);for(_=0;_<r;++_)t[_]+=(_/s|0)%2==0?u:c;e[a++]=l._$SL(),s*=2}o*=l._$N2()}t[r]=65535,e[a]=-1},I.prototype._$h2=function(t,e,i){for(var r=new Float32Array(e),n=0;n<e;++n)r[n]=i[n];var o=new b;o._$yP(t),o._$t2(e,r),this._$Ob.push(o)},I.prototype._$J2=function(t){for(var e=t,i=this._$Ob.length,r=0;r<i;++r){var n=this._$Ob[r],o=n._$N2(),s=e%n._$N2(),a=n._$d2()[s];console.log("%s[%d]=%7.2f / ",n.getParamID(),s,a),e/=o}console.log("\n")},I.prototype.getParamCount=function(){return this._$Ob.length},I.prototype._$zs=function(){return this._$Ob};function O(){this.m=new Float32Array(16),this.identity()}O.prototype.identity=function(){for(var t=0;t<16;t++)this.m[t]=t%5==0?1:0},O.prototype.getArray=function(){return this.m},O.prototype.getCopyMatrix=function(){return new Float32Array(this.m)},O.prototype.setMatrix=function(t){if(null!=t&&16==t.length)for(var e=0;e<16;e++)this.m[e]=t[e]},O.prototype.mult=function(t,e,i){return null==e?null:(this==e?this.mult_safe(this.m,t.m,e.m,i):this.mult_fast(this.m,t.m,e.m,i),e)},O.prototype.mult_safe=function(t,e,i,r){if(t==i){var n=new Array(16);this.mult_fast(t,e,n,r);for(var o=15;o>=0;--o)i[o]=n[o]}else this.mult_fast(t,e,i,r)},O.prototype.mult_fast=function(t,e,i,r){r?(i[0]=t[0]*e[0]+t[4]*e[1]+t[8]*e[2],i[4]=t[0]*e[4]+t[4]*e[5]+t[8]*e[6],i[8]=t[0]*e[8]+t[4]*e[9]+t[8]*e[10],i[12]=t[0]*e[12]+t[4]*e[13]+t[8]*e[14]+t[12],i[1]=t[1]*e[0]+t[5]*e[1]+t[9]*e[2],i[5]=t[1]*e[4]+t[5]*e[5]+t[9]*e[6],i[9]=t[1]*e[8]+t[5]*e[9]+t[9]*e[10],i[13]=t[1]*e[12]+t[5]*e[13]+t[9]*e[14]+t[13],i[2]=t[2]*e[0]+t[6]*e[1]+t[10]*e[2],i[6]=t[2]*e[4]+t[6]*e[5]+t[10]*e[6],i[10]=t[2]*e[8]+t[6]*e[9]+t[10]*e[10],i[14]=t[2]*e[12]+t[6]*e[13]+t[10]*e[14]+t[14],i[3]=i[7]=i[11]=0,i[15]=1):(i[0]=t[0]*e[0]+t[4]*e[1]+t[8]*e[2]+t[12]*e[3],i[4]=t[0]*e[4]+t[4]*e[5]+t[8]*e[6]+t[12]*e[7],i[8]=t[0]*e[8]+t[4]*e[9]+t[8]*e[10]+t[12]*e[11],i[12]=t[0]*e[12]+t[4]*e[13]+t[8]*e[14]+t[12]*e[15],i[1]=t[1]*e[0]+t[5]*e[1]+t[9]*e[2]+t[13]*e[3],i[5]=t[1]*e[4]+t[5]*e[5]+t[9]*e[6]+t[13]*e[7],i[9]=t[1]*e[8]+t[5]*e[9]+t[9]*e[10]+t[13]*e[11],i[13]=t[1]*e[12]+t[5]*e[13]+t[9]*e[14]+t[13]*e[15],i[2]=t[2]*e[0]+t[6]*e[1]+t[10]*e[2]+t[14]*e[3],i[6]=t[2]*e[4]+t[6]*e[5]+t[10]*e[6]+t[14]*e[7],i[10]=t[2]*e[8]+t[6]*e[9]+t[10]*e[10]+t[14]*e[11],i[14]=t[2]*e[12]+t[6]*e[13]+t[10]*e[14]+t[14]*e[15],i[3]=t[3]*e[0]+t[7]*e[1]+t[11]*e[2]+t[15]*e[3],i[7]=t[3]*e[4]+t[7]*e[5]+t[11]*e[6]+t[15]*e[7],i[11]=t[3]*e[8]+t[7]*e[9]+t[11]*e[10]+t[15]*e[11],i[15]=t[3]*e[12]+t[7]*e[13]+t[11]*e[14]+t[15]*e[15])},O.prototype.translate=function(t,e,i){this.m[12]=this.m[0]*t+this.m[4]*e+this.m[8]*i+this.m[12],this.m[13]=this.m[1]*t+this.m[5]*e+this.m[9]*i+this.m[13],this.m[14]=this.m[2]*t+this.m[6]*e+this.m[10]*i+this.m[14],this.m[15]=this.m[3]*t+this.m[7]*e+this.m[11]*i+this.m[15]},O.prototype.scale=function(t,e,i){this.m[0]*=t,this.m[4]*=e,this.m[8]*=i,this.m[1]*=t,this.m[5]*=e,this.m[9]*=i,this.m[2]*=t,this.m[6]*=e,this.m[10]*=i,this.m[3]*=t,this.m[7]*=e,this.m[11]*=i},O.prototype.rotateX=function(t){var e=St.fcos(t),i=St._$9(t),r=this.m[4];this.m[4]=r*e+this.m[8]*i,this.m[8]=r*-i+this.m[8]*e,r=this.m[5],this.m[5]=r*e+this.m[9]*i,this.m[9]=r*-i+this.m[9]*e,r=this.m[6],this.m[6]=r*e+this.m[10]*i,this.m[10]=r*-i+this.m[10]*e,r=this.m[7],this.m[7]=r*e+this.m[11]*i,this.m[11]=r*-i+this.m[11]*e},O.prototype.rotateY=function(t){var e=St.fcos(t),i=St._$9(t),r=this.m[0];this.m[0]=r*e+this.m[8]*-i,this.m[8]=r*i+this.m[8]*e,r=this.m[1],this.m[1]=r*e+this.m[9]*-i,this.m[9]=r*i+this.m[9]*e,r=m[2],this.m[2]=r*e+this.m[10]*-i,this.m[10]=r*i+this.m[10]*e,r=m[3],this.m[3]=r*e+this.m[11]*-i,this.m[11]=r*i+this.m[11]*e},O.prototype.rotateZ=function(t){var e=St.fcos(t),i=St._$9(t),r=this.m[0];this.m[0]=r*e+this.m[4]*i,this.m[4]=r*-i+this.m[4]*e,r=this.m[1],this.m[1]=r*e+this.m[5]*i,this.m[5]=r*-i+this.m[5]*e,r=this.m[2],this.m[2]=r*e+this.m[6]*i,this.m[6]=r*-i+this.m[6]*e,r=this.m[3],this.m[3]=r*e+this.m[7]*i,this.m[7]=r*-i+this.m[7]*e};function D(t){i||it.prototype.constructor.call(this,t)}D.prototype=new it,D._$tP=new Object,D._$27=function(){D._$tP.clear()},D.getID=function(t){var e=D._$tP[t];return null==e&&(e=new D(t),D._$tP[t]=e),e},D.prototype._$3s=function(){return new D};function R(){i||(this._$7=1,this._$f=0,this._$H=0,this._$g=1,this._$k=0,this._$w=0,this._$hi=STATE_IDENTITY,this._$Z=_$pS)}R._$kS=-1,R._$pS=0,R._$hb=1,R.STATE_IDENTITY=0,R._$gb=1,R._$fo=2,R._$go=4,R.prototype.transform=function(t,e,i){var r,n,o,s,a,_,h=0,l=0;switch(this._$hi){default:return;case R._$go|R._$fo|R._$gb:for(r=this._$7,n=this._$H,o=this._$k,s=this._$f,a=this._$g,_=this._$w;--i>=0;){var u=t[h++],c=t[h++];e[l++]=r*u+n*c+o,e[l++]=s*u+a*c+_}return;case R._$go|R._$fo:for(r=this._$7,n=this._$H,s=this._$f,a=this._$g;--i>=0;){u=t[h++],c=t[h++];e[l++]=r*u+n*c,e[l++]=s*u+a*c}return;case R._$go|R._$gb:for(n=this._$H,o=this._$k,s=this._$f,_=this._$w;--i>=0;){u=t[h++];e[l++]=n*t[h++]+o,e[l++]=s*u+_}return;case R._$go:for(n=this._$H,s=this._$f;--i>=0;){u=t[h++];e[l++]=n*t[h++],e[l++]=s*u}return;case R._$fo|R._$gb:for(r=this._$7,o=this._$k,a=this._$g,_=this._$w;--i>=0;)e[l++]=r*t[h++]+o,e[l++]=a*t[h++]+_;return;case R._$fo:for(r=this._$7,a=this._$g;--i>=0;)e[l++]=r*t[h++],e[l++]=a*t[h++];return;case R._$gb:for(o=this._$k,_=this._$w;--i>=0;)e[l++]=t[h++]+o,e[l++]=t[h++]+_;return;case R.STATE_IDENTITY:return void(t==e&&h==l||M._$jT(t,h,e,l,2*i))}},R.prototype.update=function(){0==this._$H&&0==this._$f?1==this._$7&&1==this._$g?0==this._$k&&0==this._$w?(this._$hi=R.STATE_IDENTITY,this._$Z=R._$pS):(this._$hi=R._$gb,this._$Z=R._$hb):0==this._$k&&0==this._$w?(this._$hi=R._$fo,this._$Z=R._$kS):(this._$hi=R._$fo|R._$gb,this._$Z=R._$kS):0==this._$7&&0==this._$g?0==this._$k&&0==this._$w?(this._$hi=R._$go,this._$Z=R._$kS):(this._$hi=R._$go|R._$gb,this._$Z=R._$kS):0==this._$k&&0==this._$w?(this._$hi=R._$go|R._$fo,this._$Z=R._$kS):(this._$hi=R._$go|R._$fo|R._$gb,this._$Z=R._$kS)},R.prototype._$RT=function(t){this._$IT(t);var e=t[0],i=t[2],r=t[1],n=t[3],o=Math.sqrt(e*e+r*r),s=e*n-i*r;0==o?at._$so&&console.log("affine._$RT() / rt==0"):(t[0]=o,t[1]=s/o,t[2]=(r*n+e*i)/s,t[3]=Math.atan2(r,e))},R.prototype._$ho=function(t,e,i,r){var n=new Float32Array(6),o=new Float32Array(6);t._$RT(n),e._$RT(o);var s=new Float32Array(6);s[0]=n[0]+(o[0]-n[0])*i,s[1]=n[1]+(o[1]-n[1])*i,s[2]=n[2]+(o[2]-n[2])*i,s[3]=n[3]+(o[3]-n[3])*i,s[4]=n[4]+(o[4]-n[4])*i,s[5]=n[5]+(o[5]-n[5])*i,r._$CT(s)},R.prototype._$CT=function(t){var e=Math.cos(t[3]),i=Math.sin(t[3]);this._$7=t[0]*e,this._$f=t[0]*i,this._$H=t[1]*(t[2]*e-i),this._$g=t[1]*(t[2]*i+e),this._$k=t[4],this._$w=t[5],this.update()},R.prototype._$IT=function(t){t[0]=this._$7,t[1]=this._$f,t[2]=this._$H,t[3]=this._$g,t[4]=this._$k,t[5]=this._$w};function F(){i||(s.prototype.constructor.call(this),this.motions=new Array,this._$7r=null,this._$7r=F._$Co++,this._$D0=30,this._$yT=0,this._$E=!0,this.loopFadeIn=!0,this._$AS=-1,_$a0())}F.prototype=new s,F._$cs="VISIBLE:",F._$ar="LAYOUT:",F._$Co=0,F._$D2=[],F._$1T=1,F.loadMotion=function(t){var e=new F,i=[0],r=t.length;e._$yT=0;for(var n=0;n<r;++n){var o=255&t[n];if("\n"!=o&&"\r"!=o)if("#"!=o)if("$"!=o){if("a"<=o&&o<="z"||"A"<=o&&o<="Z"||"_"==o){for(h=n,l=-1;n<r&&("\r"!=(o=255&t[n])&&"\n"!=o);++n)if("="==o){l=n;break}if(l>=0){var s=new N;A.startsWith(t,h,F._$cs)?(s._$RP=N._$hs,s._$4P=new String(t,h,l-h)):A.startsWith(t,h,F._$ar)?(s._$4P=new String(t,h+7,l-h-7),A.startsWith(t,h+7,"ANCHOR_X")?s._$RP=N._$xs:A.startsWith(t,h+7,"ANCHOR_Y")?s._$RP=N._$us:A.startsWith(t,h+7,"SCALE_X")?s._$RP=N._$qs:A.startsWith(t,h+7,"SCALE_Y")?s._$RP=N._$Ys:A.startsWith(t,h+7,"X")?s._$RP=N._$ws:A.startsWith(t,h+7,"Y")&&(s._$RP=N._$Ns)):(s._$RP=N._$Fr,s._$4P=new String(t,h,l-h)),e.motions.push(s);var a=0;for(F._$D2.clear(),n=l+1;n<r&&("\r"!=(o=255&t[n])&&"\n"!=o);++n)if(","!=o&&" "!=o&&"\t"!=o){c=A._$LS(t,r,n,i);if(i[0]>0){F._$D2.push(c),a++;var _=i[0];if(_<n){console.log("_$n0 _$hi . @Live2DMotion loadMotion()\n");break}n=_}}s._$I0=F._$D2._$BL(),a>e._$yT&&(e._$yT=a)}}}else{for(var h=n,l=-1;n<r&&("\r"!=(o=255&t[n])&&"\n"!=o);++n)if("="==o){l=n;break}var u=!1;if(l>=0)for(l==h+4&&"f"==t[h+1]&&"p"==t[h+2]&&"s"==t[h+3]&&(u=!0),n=l+1;n<r&&("\r"!=(o=255&t[n])&&"\n"!=o);++n)if(","!=o&&" "!=o&&"\t"!=o){var c=A._$LS(t,r,n,i);i[0]>0&&u&&5<c&&c<121&&(e._$D0=c),n=i[0]}for(;n<r&&("\n"!=t[n]&&"\r"!=t[n]);++n);}else for(;n<r&&("\n"!=t[n]&&"\r"!=t[n]);++n);}return e._$AS=1e3*e._$yT/e._$D0|0,e},F.prototype.getDurationMSec=function(){return this._$AS},F.prototype.dump=function(){for(var t=0;t<this.motions.length;t++){var e=this.motions[t];console.log("_$wL[%s] [%d]. ",e._$4P,e._$I0.length);for(var i=0;i<e._$I0.length&&i<10;i++)console.log("%5.2f ,",e._$I0[i]);console.log("\n")}},F.prototype.updateParamExe=function(t,e,i,r){for(var n=(e-r._$z2)*this._$D0/1e3,o=0|n,s=n-o,a=0;a<this.motions.length;a++){var _=this.motions[a],h=_._$I0.length,l=_._$4P;if(_._$RP==N._$hs){var u=_._$I0[o>=h?h-1:o];t.setParamFloat(l,u)}else if(N._$ws<=_._$RP&&_._$RP<=N._$Ys);else{var c=t.getParamFloat(l),$=_._$I0[o>=h?h-1:o],p=c+($+(_._$I0[o+1>=h?h-1:o+1]-$)*s-c)*i;t.setParamFloat(l,p)}}o>=this._$yT&&(this._$E?(r._$z2=e,this.loopFadeIn&&(r._$bs=e)):r._$9L=!0)},F.prototype._$r0=function(){return this._$E},F.prototype._$aL=function(t){this._$E=t},F.prototype.isLoopFadeIn=function(){return this.loopFadeIn},F.prototype.setLoopFadeIn=function(t){this.loopFadeIn=t};function C(){this._$P=new Float32Array(100),this.size=0}C.prototype.clear=function(){this.size=0},C.prototype.add=function(t){if(this._$P.length<=this.size){var e=new Float32Array(2*this.size);M._$jT(this._$P,0,e,0,this.size),this._$P=e}this._$P[this.size++]=t},C.prototype._$BL=function(){var t=new Float32Array(this.size);return M._$jT(this._$P,0,t,0,this.size),t};function N(){this._$4P=null,this._$I0=null,this._$RP=null}N._$Fr=0,N._$hs=1,N._$ws=100,N._$Ns=101,N._$xs=102,N._$us=103,N._$qs=104,N._$Ys=105;function B(){}B._$Ms=1,B._$Qs=2,B._$i2=0,B._$No=2,B._$do=B._$Ms,B._$Ls=!0,B._$1r=5,B._$Qb=65,B._$J=1e-4,B._$FT=.001,B._$Ss=3;function G(){}G._$o7=6,G._$S7=7,G._$s7=8,G._$77=9,G.LIVE2D_FORMAT_VERSION_V2_10_SDK2=10,G.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1=11,G._$T7=G.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1,G._$Is=-2004318072,G._$h0=0,G._$4L=23,G._$7P=33,G._$uT=function(t){console.log("_$bo :: _$6 _$mo _$E0 : %d\n",t)},G._$9o=function(t){if(t<40)return G._$uT(t),null;if(t<50)return G._$uT(t),null;if(t<60)return G._$uT(t),null;if(t<100)switch(t){case 65:return new Z;case 66:return new I;case 67:return new b;case 68:return new X;case 69:return new g;case 70:return new lt;default:return G._$uT(t),null}else if(t<150)switch(t){case 131:return new ot;case 133:return new tt;case 136:return new u;case 137:return new rt;case 142:return new W}return G._$uT(t),null};function U(t){i||(this._$QT=!0,this._$co=-1,this._$qo=0,this._$pb=new Array(U._$is),this._$_2=new Float32Array(U._$is),this._$vr=new Float32Array(U._$is),this._$Rr=new Float32Array(U._$is),this._$Or=new Float32Array(U._$is),this._$fs=new Float32Array(U._$is),this._$Js=new Array(U._$is),this._$3S=new Array,this._$aS=new Array,this._$Bo=null,this._$F2=new Array,this._$db=new Array,this._$8b=new Array,this._$Hr=new Array,this._$Ws=null,this._$Vs=null,this._$Er=null,this._$Es=new Int16Array(B._$Qb),this._$ZP=new Float32Array(2*B._$1r),this._$Ri=t,this._$b0=U._$HP++,this.clipManager=null,this.dp_webgl=null)}U._$HP=0,U._$_0=!0,U._$V2=-1,U._$W0=-1,U._$jr=!1,U._$ZS=!0,U._$tr=-1e6,U._$lr=1e6,U._$is=32,U._$e=!1,U.prototype.getDrawDataIndex=function(t){for(var e=this._$aS.length-1;e>=0;--e)if(null!=this._$aS[e]&&this._$aS[e].getDrawDataID()==t)return e;return-1},U.prototype.getDrawData=function(t){if(t instanceof D){if(null==this._$Bo){this._$Bo=new Object;for(var e=this._$aS.length,i=0;i<e;i++){var r=this._$aS[i],n=r.getDrawDataID();null!=n&&(this._$Bo[n]=r)}}return this._$Bo[id]}return t<this._$aS.length?this._$aS[t]:null},U.prototype.release=function(){this._$3S.clear(),this._$aS.clear(),this._$F2.clear(),null!=this._$Bo&&this._$Bo.clear(),this._$db.clear(),this._$8b.clear(),this._$Hr.clear()},U.prototype.init=function(){this._$co++,this._$F2.length>0&&this.release();for(var t=this._$Ri.getModelImpl(),e=t._$Xr(),i=e.length,r=new Array,o=new Array,s=0;s<i;++s){var a=e[s];this._$F2.push(a),this._$Hr.push(a.init(this));for(var _=a.getBaseData(),h=_.length,l=0;l<h;++l)r.push(_[l]);for(l=0;l<h;++l){var u=_[l].init(this);u._$l2(s),o.push(u)}var c=a.getDrawData(),$=c.length;for(l=0;l<$;++l){var p=c[l],f=p.init(this);f._$IP=s,this._$aS.push(p),this._$8b.push(f)}}for(var d=r.length,y=yt._$2o();;){var g=!1;for(s=0;s<d;++s){var m=r[s];if(null!=m){var v=m.getTargetBaseDataID();(null==v||v==y||this.getBaseDataIndex(v)>=0)&&(this._$3S.push(m),this._$db.push(o[s]),r[s]=null,g=!0)}}if(!g)break}var T=t._$E2();if(null!=T){var P=T._$1s();if(null!=P){var S=P.length;for(s=0;s<S;++s){var L=P[s];null!=L&&this._$02(L.getParamID(),L.getDefaultValue(),L.getMinValue(),L.getMaxValue())}}}this.clipManager=new n(this.dp_webgl),this.clipManager.init(this,this._$aS,this._$8b),this._$QT=!0},U.prototype.update=function(){U._$e&&a.start("_$zL");for(var t=this._$_2.length,e=0;e<t;e++)this._$_2[e]!=this._$vr[e]&&(this._$Js[e]=U._$ZS,this._$vr[e]=this._$_2[e]);var i=this._$3S.length,r=this._$aS.length,n=H._$or(),o=H._$Pr()-n+1;(null==this._$Ws||this._$Ws.length<o)&&(this._$Ws=new Int16Array(o),this._$Vs=new Int16Array(o));for(e=0;e<o;e++)this._$Ws[e]=U._$V2,this._$Vs[e]=U._$V2;(null==this._$Er||this._$Er.length<r)&&(this._$Er=new Int16Array(r));for(e=0;e<r;e++)this._$Er[e]=U._$W0;U._$e&&a.dump("_$zL"),U._$e&&a.start("_$UL");for(var s=null,_=0;_<i;++_){var h=this._$3S[_],l=this._$db[_];try{h._$Nr(this,l),h._$2b(this,l)}catch(t){null==s&&(s=t)}}null!=s&&U._$_0&&a._$Rb(s),U._$e&&a.dump("_$UL"),U._$e&&a.start("_$DL");for(var u=null,c=0;c<r;++c){var $=this._$aS[c],p=this._$8b[c];try{if($._$Nr(this,p),p._$u2())continue;$._$2b(this,p);var f,d=Math.floor($._$zS(this,p)-n);try{f=this._$Vs[d]}catch(t){console.log("_$li :: %s / %s        @@_$fS\n",t.toString(),$.getDrawDataID().toString()),d=Math.floor($._$zS(this,p)-n);continue}f==U._$V2?this._$Ws[d]=c:this._$Er[f]=c,this._$Vs[d]=c}catch(t){null==u&&(u=t,at._$sT(at._$H7))}}null!=u&&U._$_0&&a._$Rb(u),U._$e&&a.dump("_$DL"),U._$e&&a.start("_$eL");for(e=this._$Js.length-1;e>=0;e--)this._$Js[e]=U._$jr;return this._$QT=!1,U._$e&&a.dump("_$eL"),!1},U.prototype.preDraw=function(t){null!=this.clipManager&&(t._$ZT(),this.clipManager.setupClip(this,t))},U.prototype.draw=function(t){if(null!=this._$Ws){var e=this._$Ws.length;t._$ZT();for(var i=0;i<e;++i){var r=this._$Ws[i];if(r!=U._$V2)for(;;){var n=this._$aS[r],o=this._$8b[r];if(o._$yo()){var s=o._$IP,_=this._$Hr[s];o._$VS=_.getPartsOpacity(),n.draw(t,this,o)}var h=this._$Er[r];if(h<=r||h==U._$W0)break;r=h}}}else a._$li("call _$Ri.update() before _$Ri.draw() ")},U.prototype.getParamIndex=function(t){for(var e=this._$pb.length-1;e>=0;--e)if(this._$pb[e]==t)return e;return this._$02(t,0,U._$tr,U._$lr)},U.prototype._$BS=function(t){return this.getBaseDataIndex(t)},U.prototype.getBaseDataIndex=function(t){for(var e=this._$3S.length-1;e>=0;--e)if(null!=this._$3S[e]&&this._$3S[e].getBaseDataID()==t)return e;return-1},U.prototype._$UT=function(t,e){var i=new Float32Array(e);return M._$jT(t,0,i,0,t.length),i},U.prototype._$02=function(t,e,i,r){if(this._$qo>=this._$pb.length){var n=this._$pb.length,o=new Array(2*n);M._$jT(this._$pb,0,o,0,n),this._$pb=o,this._$_2=this._$UT(this._$_2,2*n),this._$vr=this._$UT(this._$vr,2*n),this._$Rr=this._$UT(this._$Rr,2*n),this._$Or=this._$UT(this._$Or,2*n);var s=new Array;M._$jT(this._$Js,0,s,0,n),this._$Js=s}return this._$pb[this._$qo]=t,this._$_2[this._$qo]=e,this._$vr[this._$qo]=e,this._$Rr[this._$qo]=i,this._$Or[this._$qo]=r,this._$Js[this._$qo]=U._$ZS,this._$qo++},U.prototype._$Zo=function(t,e){this._$3S[t]=e},U.prototype.setParamFloat=function(t,e){e<this._$Rr[t]&&(e=this._$Rr[t]),e>this._$Or[t]&&(e=this._$Or[t]),this._$_2[t]=e},U.prototype.loadParam=function(){var t=this._$_2.length;t>this._$fs.length&&(t=this._$fs.length),M._$jT(this._$fs,0,this._$_2,0,t)},U.prototype.saveParam=function(){var t=this._$_2.length;t>this._$fs.length&&(this._$fs=new Float32Array(t)),M._$jT(this._$_2,0,this._$fs,0,t)},U.prototype._$v2=function(){return this._$co},U.prototype._$WS=function(){return this._$QT},U.prototype._$Xb=function(t){return this._$Js[t]==U._$ZS},U.prototype._$vs=function(){return this._$Es},U.prototype._$Tr=function(){return this._$ZP},U.prototype.getBaseData=function(t){return this._$3S[t]},U.prototype.getParamFloat=function(t){return this._$_2[t]},U.prototype.getParamMax=function(t){return this._$Or[t]},U.prototype.getParamMin=function(t){return this._$Rr[t]},U.prototype.setPartsOpacity=function(t,e){this._$Hr[t].setPartsOpacity(e)},U.prototype.getPartsOpacity=function(t){return this._$Hr[t].getPartsOpacity()},U.prototype.getPartsDataIndex=function(t){for(var e=this._$F2.length-1;e>=0;--e)if(null!=this._$F2[e]&&this._$F2[e]._$p2()==t)return e;return-1},U.prototype._$q2=function(t){return this._$db[t]},U.prototype._$C2=function(t){return this._$8b[t]},U.prototype._$Bb=function(t){return this._$Hr[t]},U.prototype._$5s=function(t,e){for(var i=this._$Ws.length,r=t,n=0;n<i;++n){var o=this._$Ws[n];if(o!=U._$V2)for(;;){var s=this._$8b[o];s._$yo()&&(s._$GT()._$B2(this,s,r),r+=e);var a=this._$Er[o];if(a<=o||a==U._$W0)break;o=a}}},U.prototype.setDrawParam=function(t){this.dp_webgl=t},U.prototype.getDrawParam=function(){return this.dp_webgl};function k(){}k._$0T=function(t){return k._$0T(new _$5(t))},k._$0T=function(t){if(!t.exists())throw new _$ls(t._$3b());for(var e,i=t.length(),r=new Int8Array(i),n=new _$Xs(new _$kb(t),8192),o=0;(e=n.read(r,o,i-o))>0;)o+=e;return r},k._$C=function(t){var e=null,i=null;try{e=t instanceof Array?t:new _$Xs(t,8192),i=new _$js;for(var r,n=new Int8Array(1e3);(r=e.read(n))>0;)i.write(n,0,r);return i._$TS()}finally{null!=t&&t.close(),null!=i&&(i.flush(),i.close())}};function Y(){i||(this._$12=null,this._$bb=null,this._$_L=null,this._$jo=null,this._$iL=null,this._$0L=null,this._$Br=null,this._$Dr=null,this._$Cb=null,this._$mr=null,this._$_L=V.STATE_FIRST,this._$Br=4e3,this._$Dr=100,this._$Cb=50,this._$mr=150,this._$jo=!0,this._$iL="PARAM_EYE_L_OPEN",this._$0L="PARAM_EYE_R_OPEN")}Y.prototype._$T2=function(){return M.getUserTimeMSec()+Math._$10()*(2*this._$Br-1)},Y.prototype._$uo=function(t){this._$Br=t},Y.prototype._$QS=function(t,e,i){this._$Dr=t,this._$Cb=e,this._$mr=i},Y.prototype._$7T=function(t){var e,i=M.getUserTimeMSec(),r=0;switch(this._$_L){case STATE_CLOSING:(r=(i-this._$bb)/this._$Dr)>=1&&(r=1,this._$_L=V.STATE_CLOSED,this._$bb=i),e=1-r;break;case STATE_CLOSED:(r=(i-this._$bb)/this._$Cb)>=1&&(this._$_L=V.STATE_OPENING,this._$bb=i),e=0;break;case STATE_OPENING:(r=(i-this._$bb)/this._$mr)>=1&&(r=1,this._$_L=V.STATE_INTERVAL,this._$12=this._$T2()),e=r;break;case STATE_INTERVAL:this._$12<i&&(this._$_L=V.STATE_CLOSING,this._$bb=i),e=1;break;case STATE_FIRST:default:this._$_L=V.STATE_INTERVAL,this._$12=this._$T2(),e=1}this._$jo||(e=-e),t.setParamFloat(this._$iL,e),t.setParamFloat(this._$0L,e)};var V=function(){};V.STATE_FIRST="STATE_FIRST",V.STATE_INTERVAL="STATE_INTERVAL",V.STATE_CLOSING="STATE_CLOSING",V.STATE_CLOSED="STATE_CLOSED",V.STATE_OPENING="STATE_OPENING";function j(){i||(w.prototype.constructor.call(this),this._$sb=new Int32Array(j._$As),this._$U2=new Array,this.transform=null,this.gl=null,null==j._$NT&&(j._$NT=j._$9r(256),j._$vS=j._$9r(256),j._$no=j._$vb(256)))}j.prototype=new w,j._$As=32,j._$Gr=!1,j._$NT=null,j._$vS=null,j._$no=null,j._$9r=function(t){return new Float32Array(t)},j._$vb=function(t){return new Int16Array(t)},j._$cr=function(t,e){return null==t||t._$yL()<e.length?((t=j._$9r(2*e.length)).put(e),t._$oT(0)):(t.clear(),t.put(e),t._$oT(0)),t},j._$mb=function(t,e){return null==t||t._$yL()<e.length?((t=j._$vb(2*e.length)).put(e),t._$oT(0)):(t.clear(),t.put(e),t._$oT(0)),t},j._$Hs=function(){return j._$Gr},j._$as=function(t){j._$Gr=t},j.prototype.setGL=function(t){this.gl=t},j.prototype.setTransform=function(t){this.transform=t},j.prototype._$ZT=function(){},j.prototype._$Uo=function(t,e,i,r,n,o,s,a){if(!(o<.01)){var _=this._$U2[t],h=o>.9?at.EXPAND_W:0;this.gl.drawElements(_,i,r,n,o,h,this.transform,a)}},j.prototype._$Rs=function(){throw new Error("_$Rs")},j.prototype._$Ds=function(t){throw new Error("_$Ds")},j.prototype._$K2=function(){for(var t=0;t<this._$sb.length;t++){0!=this._$sb[t]&&(this.gl._$Sr(1,this._$sb,t),this._$sb[t]=0)}},j.prototype.setTexture=function(t,e){this._$sb.length<t+1&&this._$nS(t),this._$sb[t]=e},j.prototype.setTexture=function(t,e){this._$sb.length<t+1&&this._$nS(t),this._$U2[t]=e},j.prototype._$nS=function(t){var e=Math.max(2*this._$sb.length,t+1+10),i=new Int32Array(e);M._$jT(this._$sb,0,i,0,this._$sb.length),this._$sb=i;var r=new Array;M._$jT(this._$U2,0,r,0,this._$U2.length),this._$U2=r};function X(){i||(E.prototype.constructor.call(this),this._$GS=null,this._$Y0=null)}X.prototype=new E,X._$Xo=new Float32Array(2),X._$io=new Float32Array(2),X._$0o=new Float32Array(2),X._$Lo=new Float32Array(2),X._$To=new Float32Array(2),X._$Po=new Float32Array(2),X._$gT=new Array,X.prototype._$zP=function(){this._$GS=new I,this._$GS._$zP(),this._$Y0=new Array},X.prototype.getType=function(){return E._$c2},X.prototype._$F0=function(t){E.prototype._$F0.call(this,t),this._$GS=t._$nP(),this._$Y0=t._$nP(),E.prototype.readV2_opacity.call(this,t)},X.prototype.init=function(t){var e=new z(this);return e._$Yr=new g,this._$32()&&(e._$Wr=new g),e},X.prototype._$Nr=function(t,e){this!=e._$GT()&&console.log("### assert!! ### ");var i=e;if(this._$GS._$Ur(t)){var r=X._$gT;r[0]=!1;var n=this._$GS._$Q2(t,r);e._$Ib(r[0]),this.interpolateOpacity(t,this._$GS,e,r);var o=t._$vs(),s=t._$Tr();if(this._$GS._$zr(o,s,n),n<=0){var a=this._$Y0[o[0]];i._$Yr.init(a)}else if(1==n){a=this._$Y0[o[0]];var _=this._$Y0[o[1]],h=s[0];i._$Yr._$fL=a._$fL+(_._$fL-a._$fL)*h,i._$Yr._$gL=a._$gL+(_._$gL-a._$gL)*h,i._$Yr._$B0=a._$B0+(_._$B0-a._$B0)*h,i._$Yr._$z0=a._$z0+(_._$z0-a._$z0)*h,i._$Yr._$qT=a._$qT+(_._$qT-a._$qT)*h}else if(2==n){a=this._$Y0[o[0]],_=this._$Y0[o[1]];var l=this._$Y0[o[2]],u=this._$Y0[o[3]],c=(h=s[0],s[1]),$=a._$fL+(_._$fL-a._$fL)*h,p=l._$fL+(u._$fL-l._$fL)*h;i._$Yr._$fL=$+(p-$)*c,$=a._$gL+(_._$gL-a._$gL)*h,p=l._$gL+(u._$gL-l._$gL)*h,i._$Yr._$gL=$+(p-$)*c,$=a._$B0+(_._$B0-a._$B0)*h,p=l._$B0+(u._$B0-l._$B0)*h,i._$Yr._$B0=$+(p-$)*c,$=a._$z0+(_._$z0-a._$z0)*h,p=l._$z0+(u._$z0-l._$z0)*h,i._$Yr._$z0=$+(p-$)*c,$=a._$qT+(_._$qT-a._$qT)*h,p=l._$qT+(u._$qT-l._$qT)*h,i._$Yr._$qT=$+(p-$)*c}else if(3==n){var f=this._$Y0[o[0]],d=this._$Y0[o[1]],y=this._$Y0[o[2]],g=this._$Y0[o[3]],m=this._$Y0[o[4]],v=this._$Y0[o[5]],T=this._$Y0[o[6]],P=this._$Y0[o[7]],S=(h=s[0],c=s[1],s[2]),L=($=f._$fL+(d._$fL-f._$fL)*h,p=y._$fL+(g._$fL-y._$fL)*h,m._$fL+(v._$fL-m._$fL)*h),w=T._$fL+(P._$fL-T._$fL)*h;i._$Yr._$fL=(1-S)*($+(p-$)*c)+S*(L+(w-L)*c),$=f._$gL+(d._$gL-f._$gL)*h,p=y._$gL+(g._$gL-y._$gL)*h,L=m._$gL+(v._$gL-m._$gL)*h,w=T._$gL+(P._$gL-T._$gL)*h,i._$Yr._$gL=(1-S)*($+(p-$)*c)+S*(L+(w-L)*c),$=f._$B0+(d._$B0-f._$B0)*h,p=y._$B0+(g._$B0-y._$B0)*h,L=m._$B0+(v._$B0-m._$B0)*h,w=T._$B0+(P._$B0-T._$B0)*h,i._$Yr._$B0=(1-S)*($+(p-$)*c)+S*(L+(w-L)*c),$=f._$z0+(d._$z0-f._$z0)*h,p=y._$z0+(g._$z0-y._$z0)*h,L=m._$z0+(v._$z0-m._$z0)*h,w=T._$z0+(P._$z0-T._$z0)*h,i._$Yr._$z0=(1-S)*($+(p-$)*c)+S*(L+(w-L)*c),$=f._$qT+(d._$qT-f._$qT)*h,p=y._$qT+(g._$qT-y._$qT)*h,L=m._$qT+(v._$qT-m._$qT)*h,w=T._$qT+(P._$qT-T._$qT)*h,i._$Yr._$qT=(1-S)*($+(p-$)*c)+S*(L+(w-L)*c)}else if(4==n){var x=this._$Y0[o[0]],E=this._$Y0[o[1]],M=this._$Y0[o[2]],b=this._$Y0[o[3]],A=this._$Y0[o[4]],I=this._$Y0[o[5]],O=this._$Y0[o[6]],D=this._$Y0[o[7]],R=this._$Y0[o[8]],F=this._$Y0[o[9]],C=this._$Y0[o[10]],N=this._$Y0[o[11]],B=this._$Y0[o[12]],G=this._$Y0[o[13]],U=this._$Y0[o[14]],k=this._$Y0[o[15]],Y=(h=s[0],c=s[1],S=s[2],s[3]),V=($=x._$fL+(E._$fL-x._$fL)*h,p=M._$fL+(b._$fL-M._$fL)*h,L=A._$fL+(I._$fL-A._$fL)*h,w=O._$fL+(D._$fL-O._$fL)*h,R._$fL+(F._$fL-R._$fL)*h),j=C._$fL+(N._$fL-C._$fL)*h,z=B._$fL+(G._$fL-B._$fL)*h,H=U._$fL+(k._$fL-U._$fL)*h;i._$Yr._$fL=(1-Y)*((1-S)*($+(p-$)*c)+S*(L+(w-L)*c))+Y*((1-S)*(V+(j-V)*c)+S*(z+(H-z)*c)),$=x._$gL+(E._$gL-x._$gL)*h,p=M._$gL+(b._$gL-M._$gL)*h,L=A._$gL+(I._$gL-A._$gL)*h,w=O._$gL+(D._$gL-O._$gL)*h,V=R._$gL+(F._$gL-R._$gL)*h,j=C._$gL+(N._$gL-C._$gL)*h,z=B._$gL+(G._$gL-B._$gL)*h,H=U._$gL+(k._$gL-U._$gL)*h,i._$Yr._$gL=(1-Y)*((1-S)*($+(p-$)*c)+S*(L+(w-L)*c))+Y*((1-S)*(V+(j-V)*c)+S*(z+(H-z)*c)),$=x._$B0+(E._$B0-x._$B0)*h,p=M._$B0+(b._$B0-M._$B0)*h,L=A._$B0+(I._$B0-A._$B0)*h,w=O._$B0+(D._$B0-O._$B0)*h,V=R._$B0+(F._$B0-R._$B0)*h,j=C._$B0+(N._$B0-C._$B0)*h,z=B._$B0+(G._$B0-B._$B0)*h,H=U._$B0+(k._$B0-U._$B0)*h,i._$Yr._$B0=(1-Y)*((1-S)*($+(p-$)*c)+S*(L+(w-L)*c))+Y*((1-S)*(V+(j-V)*c)+S*(z+(H-z)*c)),$=x._$z0+(E._$z0-x._$z0)*h,p=M._$z0+(b._$z0-M._$z0)*h,L=A._$z0+(I._$z0-A._$z0)*h,w=O._$z0+(D._$z0-O._$z0)*h,V=R._$z0+(F._$z0-R._$z0)*h,j=C._$z0+(N._$z0-C._$z0)*h,z=B._$z0+(G._$z0-B._$z0)*h,H=U._$z0+(k._$z0-U._$z0)*h,i._$Yr._$z0=(1-Y)*((1-S)*($+(p-$)*c)+S*(L+(w-L)*c))+Y*((1-S)*(V+(j-V)*c)+S*(z+(H-z)*c)),$=x._$qT+(E._$qT-x._$qT)*h,p=M._$qT+(b._$qT-M._$qT)*h,L=A._$qT+(I._$qT-A._$qT)*h,w=O._$qT+(D._$qT-O._$qT)*h,V=R._$qT+(F._$qT-R._$qT)*h,j=C._$qT+(N._$qT-C._$qT)*h,z=B._$qT+(G._$qT-B._$qT)*h,H=U._$qT+(k._$qT-U._$qT)*h,i._$Yr._$qT=(1-Y)*((1-S)*($+(p-$)*c)+S*(L+(w-L)*c))+Y*((1-S)*(V+(j-V)*c)+S*(z+(H-z)*c))}else{for(var W=0|Math.pow(2,n),q=new Float32Array(W),J=0;J<W;J++){for(var Q=J,Z=1,K=0;K<n;K++)Z*=Q%2==0?1-s[K]:s[K],Q/=2;q[J]=Z}for(var tt=new Array,et=0;et<W;et++)tt[et]=this._$Y0[o[et]];var it=0,rt=0,nt=0,ot=0,st=0;for(et=0;et<W;et++)it+=q[et]*tt[et]._$fL,rt+=q[et]*tt[et]._$gL,nt+=q[et]*tt[et]._$B0,ot+=q[et]*tt[et]._$z0,st+=q[et]*tt[et]._$qT;i._$Yr._$fL=it,i._$Yr._$gL=rt,i._$Yr._$B0=nt,i._$Yr._$z0=ot,i._$Yr._$qT=st}a=this._$Y0[o[0]];i._$Yr.reflectX=a.reflectX,i._$Yr.reflectY=a.reflectY}},X.prototype._$2b=function(t,e){this!=e._$GT()&&console.log("### assert!! ### ");var i=e;if(i._$hS(!0),this._$32()){var r=this.getTargetBaseDataID();if(i._$8r==E._$ur&&(i._$8r=t.getBaseDataIndex(r)),i._$8r<0)at._$so&&a._$li("_$L _$0P _$G :: %s",r),i._$hS(!1);else{var n=t.getBaseData(i._$8r);if(null!=n){var o=t._$q2(i._$8r),s=X._$Xo;s[0]=i._$Yr._$fL,s[1]=i._$Yr._$gL;var _=X._$io;_[0]=0,_[1]=-.1;o._$GT().getType()==E._$c2?_[1]=-10:_[1]=-.1;var h=X._$0o;this._$Jr(t,n,o,s,_,h);var l=St._$92(_,h);n._$nb(t,o,s,s,1,0,2),i._$Wr._$fL=s[0],i._$Wr._$gL=s[1],i._$Wr._$B0=i._$Yr._$B0,i._$Wr._$z0=i._$Yr._$z0,i._$Wr._$qT=i._$Yr._$qT-l*St._$NS;var u=o.getTotalScale();i.setTotalScale_notForClient(u*i._$Wr._$B0);var c=o.getTotalOpacity();i.setTotalOpacity(c*i.getInterpolatedOpacity()),i._$Wr.reflectX=i._$Yr.reflectX,i._$Wr.reflectY=i._$Yr.reflectY,i._$hS(o._$yo())}else i._$hS(!1)}}else i.setTotalScale_notForClient(i._$Yr._$B0),i.setTotalOpacity(i.getInterpolatedOpacity())},X.prototype._$nb=function(t,e,i,r,n,o,s){this!=e._$GT()&&console.log("### assert!! ### ");for(var a,_,h=e,l=null!=h._$Wr?h._$Wr:h._$Yr,u=Math.sin(St._$bS*l._$qT),c=Math.cos(St._$bS*l._$qT),$=h.getTotalScale(),p=l.reflectX?-1:1,f=l.reflectY?-1:1,d=c*$*p,y=-u*$*f,g=u*$*p,m=c*$*f,v=l._$fL,T=l._$gL,P=n*s,S=o;S<P;S+=s)a=i[S],_=i[S+1],r[S]=d*a+y*_+v,r[S+1]=g*a+m*_+T},X.prototype._$Jr=function(t,e,i,r,n,o){e!=i._$GT()&&console.log("### assert!! ### ");var s=X._$Lo;X._$Lo[0]=r[0],X._$Lo[1]=r[1],e._$nb(t,i,s,s,1,0,2);for(var a=X._$To,_=X._$Po,h=1,l=0;l<10;l++){if(_[0]=r[0]+h*n[0],_[1]=r[1]+h*n[1],e._$nb(t,i,_,a,1,0,2),a[0]-=s[0],a[1]-=s[1],0!=a[0]||0!=a[1])return o[0]=a[0],void(o[1]=a[1]);if(_[0]=r[0]-h*n[0],_[1]=r[1]-h*n[1],e._$nb(t,i,_,a,1,0,2),a[0]-=s[0],a[1]-=s[1],0!=a[0]||0!=a[1])return a[0]=-a[0],a[0]=-a[0],o[0]=a[0],void(o[1]=a[1]);h*=.1}at._$so&&console.log("_$L0 to transform _$SP\n")};function z(t){st.prototype.constructor.call(this,t),this._$8r=E._$ur,this._$Yr=null,this._$Wr=null}z.prototype=new st;function H(){i||(L.prototype.constructor.call(this),this._$gP=null,this._$dr=null,this._$GS=null,this._$qb=null,this._$Lb=null,this._$mS=null)}H.prototype=new L,H._$ur=-2,H._$ES=500,H._$wb=2,H._$8S=3,H._$os=4,H._$52=H._$ES,H._$R2=H._$ES,H._$Sb=function(t){for(var e=t.length-1;e>=0;--e){var i=t[e];i<H._$52?H._$52=i:i>H._$R2&&(H._$R2=i)}},H._$or=function(){return H._$52},H._$Pr=function(){return H._$R2},H.prototype._$F0=function(t){this._$gP=t._$nP(),this._$dr=t._$nP(),this._$GS=t._$nP(),this._$qb=t._$6L(),this._$Lb=t._$cS(),this._$mS=t._$Tb(),t.getFormatVersion()>=G._$T7?(this.clipID=t._$nP(),this.clipIDList=this.convertClipIDForV2_11(this.clipID)):this.clipIDList=null,H._$Sb(this._$Lb)},H.prototype.getClipIDList=function(){return this.clipIDList},H.prototype._$Nr=function(t,e){if(e._$IS[0]=!1,e._$Us=P._$Z2(t,this._$GS,e._$IS,this._$Lb),at._$Zs);else if(e._$IS[0])return;e._$7s=P._$br(t,this._$GS,e._$IS,this._$mS)},H.prototype._$2b=function(t){},H.prototype.getDrawDataID=function(){return this._$gP},H.prototype._$j2=function(t){this._$gP=t},H.prototype.getOpacity=function(t,e){return e._$7s},H.prototype._$zS=function(t,e){return e._$Us},H.prototype.getTargetBaseDataID=function(){return this._$dr},H.prototype._$gs=function(t){this._$dr=t},H.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},H.prototype.getType=function(){};function W(){i||(this._$NL=null,this._$3S=null,this._$aS=null,W._$42++)}W._$42=0,W.prototype._$1b=function(){return this._$3S},W.prototype.getDrawDataList=function(){return this._$aS},W.prototype._$F0=function(t){this._$NL=t._$nP(),this._$aS=t._$nP(),this._$3S=t._$nP()},W.prototype._$kr=function(t){t._$Zo(this._$3S),t._$xo(this._$aS),this._$3S=null,this._$aS=null};function q(){i||(r.prototype.constructor.call(this),this._$zo=new j)}q.prototype=new r,q.loadModel=function(t){var e=new q;return r._$62(e,t),e},q.loadModel=function(t){var e=new q;return r._$62(e,t),e},q._$to=function(){return new q},q._$er=function(t){var e=new _$5("../_$_r/_$t0/_$Ri/_$_P._$d");if(0==e.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+e._$PL());for(var i=["../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1"],r=q.loadModel(e._$3b()),n=0;n<i.length;n++){var o=new _$5(i[n]);if(0==o.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+o._$PL());r.setTexture(n,_$nL._$_o(t,o._$3b()))}return r},q.prototype.setGL=function(t){this._$zo.setGL(t)},q.prototype.setTransform=function(t){this._$zo.setTransform(t)},q.prototype.draw=function(){this._$5S.draw(this._$zo)},q.prototype._$K2=function(){this._$zo._$K2()},q.prototype.setTexture=function(t,e){null==this._$zo&&a._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this._$zo.setTexture(t,e)},q.prototype.setTexture=function(t,e){null==this._$zo&&a._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this._$zo.setTexture(t,e)},q.prototype._$Rs=function(){return this._$zo._$Rs()},q.prototype._$Ds=function(t){this._$zo._$Ds(t)},q.prototype.getDrawParam=function(){return this._$zo};function J(){i||(s.prototype.constructor.call(this),this.motions=new Array,this._$o2=null,this._$7r=J._$Co++,this._$D0=30,this._$yT=0,this._$E=!1,this.loopFadeIn=!0,this._$rr=-1,this._$eP=0)}J.prototype=new s,J._$cs="VISIBLE:",J._$ar="LAYOUT:",J.MTN_PREFIX_FADEIN="FADEIN:",J.MTN_PREFIX_FADEOUT="FADEOUT:",J._$Co=0,J._$1T=1,J.loadMotion=function(t){var e=k._$C(t);return J.loadMotion(e)};function Q(t,e){return String.fromCharCode(t.getUint8(e))}J.loadMotion=function(t){t instanceof ArrayBuffer&&(t=new DataView(t));var e=new J,i=[0],r=t.byteLength;e._$yT=0;for(var n=0;n<r;++n){var o=Q(t,n),s=o.charCodeAt(0);if("\n"!=o&&"\r"!=o)if("#"!=o)if("$"!=o){if(97<=s&&s<=122||65<=s&&s<=90||"_"==o){for(u=n,c=-1;n<r&&("\r"!=(o=Q(t,n))&&"\n"!=o);++n)if("="==o){c=n;break}if(c>=0){var a=new N;A.startsWith(t,u,J._$cs)?(a._$RP=N._$hs,a._$4P=A.createString(t,u,c-u)):A.startsWith(t,u,J._$ar)?(a._$4P=A.createString(t,u+7,c-u-7),A.startsWith(t,u+7,"ANCHOR_X")?a._$RP=N._$xs:A.startsWith(t,u+7,"ANCHOR_Y")?a._$RP=N._$us:A.startsWith(t,u+7,"SCALE_X")?a._$RP=N._$qs:A.startsWith(t,u+7,"SCALE_Y")?a._$RP=N._$Ys:A.startsWith(t,u+7,"X")?a._$RP=N._$ws:A.startsWith(t,u+7,"Y")&&(a._$RP=N._$Ns)):(a._$RP=N._$Fr,a._$4P=A.createString(t,u,c-u)),e.motions.push(a);var _=0,h=[];for(n=c+1;n<r&&("\r"!=(o=Q(t,n))&&"\n"!=o);++n)if(","!=o&&" "!=o&&"\t"!=o){p=A._$LS(t,r,n,i);if(i[0]>0){h.push(p),_++;var l=i[0];if(l<n){console.log("_$n0 _$hi . @Live2DMotion loadMotion()\n");break}n=l-1}}a._$I0=new Float32Array(h),_>e._$yT&&(e._$yT=_)}}}else{for(var u=n,c=-1;n<r&&("\r"!=(o=Q(t,n))&&"\n"!=o);++n)if("="==o){c=n;break}var $=!1;if(c>=0)for(c==u+4&&"f"==Q(t,u+1)&&"p"==Q(t,u+2)&&"s"==Q(t,u+3)&&($=!0),n=c+1;n<r&&("\r"!=(o=Q(t,n))&&"\n"!=o);++n)if(","!=o&&" "!=o&&"\t"!=o){var p=A._$LS(t,r,n,i);i[0]>0&&$&&5<p&&p<121&&(e._$D0=p),n=i[0]}for(;n<r&&("\n"!=Q(t,n)&&"\r"!=Q(t,n));++n);}else for(;n<r&&("\n"!=Q(t,n)&&"\r"!=Q(t,n));++n);}return e._$rr=1e3*e._$yT/e._$D0|0,e},J.prototype.getDurationMSec=function(){return this._$E?-1:this._$rr},J.prototype.getLoopDurationMSec=function(){return this._$rr},J.prototype.dump=function(){for(var t=0;t<this.motions.length;t++){var e=this.motions[t];console.log("_$wL[%s] [%d]. ",e._$4P,e._$I0.length);for(var i=0;i<e._$I0.length&&i<10;i++)console.log("%5.2f ,",e._$I0[i]);console.log("\n")}},J.prototype.updateParamExe=function(t,e,i,r){for(var n=(e-r._$z2)*this._$D0/1e3,o=0|n,s=n-o,a=0;a<this.motions.length;a++){var _=this.motions[a],h=_._$I0.length,l=_._$4P;if(_._$RP==N._$hs){var u=_._$I0[o>=h?h-1:o];t.setParamFloat(l,u)}else if(N._$ws<=_._$RP&&_._$RP<=N._$Ys);else{var c=t.getParamIndex(l),$=t.getModelContext(),p=.4*($.getParamMax(c)-$.getParamMin(c)),f=$.getParamFloat(c),d=_._$I0[o>=h?h-1:o],y=_._$I0[o+1>=h?h-1:o+1],g=f+((d<y&&y-d>p||d>y&&d-y>p?d:d+(y-d)*s)-f)*i;t.setParamFloat(l,g)}}o>=this._$yT&&(this._$E?(r._$z2=e,this.loopFadeIn&&(r._$bs=e)):r._$9L=!0),this._$eP=i},J.prototype._$r0=function(){return this._$E},J.prototype._$aL=function(t){this._$E=t},J.prototype._$S0=function(){return this._$D0},J.prototype._$U0=function(t){this._$D0=t},J.prototype.isLoopFadeIn=function(){return this.loopFadeIn},J.prototype.setLoopFadeIn=function(t){this.loopFadeIn=t};function C(){this._$P=new Float32Array(100),this.size=0}C.prototype.clear=function(){this.size=0},C.prototype.add=function(t){if(this._$P.length<=this.size){var e=new Float32Array(2*this.size);M._$jT(this._$P,0,e,0,this.size),this._$P=e}this._$P[this.size++]=t},C.prototype._$BL=function(){var t=new Float32Array(this.size);return M._$jT(this._$P,0,t,0,this.size),t};function N(){this._$4P=null,this._$I0=null,this._$RP=null}N._$Fr=0,N._$hs=1,N._$ws=100,N._$Ns=101,N._$xs=102,N._$us=103,N._$qs=104,N._$Ys=105;function Z(){i||(E.prototype.constructor.call(this),this._$o=0,this._$A=0,this._$GS=null,this._$Eo=null)}Z.prototype=new E,Z._$gT=new Array,Z.prototype._$zP=function(){this._$GS=new I,this._$GS._$zP()},Z.prototype._$F0=function(t){E.prototype._$F0.call(this,t),this._$A=t._$6L(),this._$o=t._$6L(),this._$GS=t._$nP(),this._$Eo=t._$nP(),E.prototype.readV2_opacity.call(this,t)},Z.prototype.init=function(t){var e=new K(this),i=(this._$o+1)*(this._$A+1);return null!=e._$Cr&&(e._$Cr=null),e._$Cr=new Float32Array(2*i),null!=e._$hr&&(e._$hr=null),this._$32()?e._$hr=new Float32Array(2*i):e._$hr=null,e},Z.prototype._$Nr=function(t,e){var i=e;if(this._$GS._$Ur(t)){var r=this._$VT(),n=Z._$gT;n[0]=!1,P._$Vr(t,this._$GS,n,r,this._$Eo,i._$Cr,0,2),e._$Ib(n[0]),this.interpolateOpacity(t,this._$GS,e,n)}},Z.prototype._$2b=function(t,e){var i=e;if(i._$hS(!0),this._$32()){var r=this.getTargetBaseDataID();if(i._$8r==E._$ur&&(i._$8r=t.getBaseDataIndex(r)),i._$8r<0)at._$so&&a._$li("_$L _$0P _$G :: %s",r),i._$hS(!1);else{var n=t.getBaseData(i._$8r),o=t._$q2(i._$8r);if(null!=n&&o._$yo()){var s=o.getTotalScale();i.setTotalScale_notForClient(s);var _=o.getTotalOpacity();i.setTotalOpacity(_*i.getInterpolatedOpacity()),n._$nb(t,o,i._$Cr,i._$hr,this._$VT(),0,2),i._$hS(!0)}else i._$hS(!1)}}else i.setTotalOpacity(i.getInterpolatedOpacity())},Z.prototype._$nb=function(t,e,i,r,n,o,s){var a=e,_=null!=a._$hr?a._$hr:a._$Cr;Z.transformPoints_sdk2(i,r,n,o,s,_,this._$o,this._$A)},Z.transformPoints_sdk2=function(e,i,r,n,o,s,a,_){for(var h,l,u,c=r*o,$=0,p=0,f=0,d=0,y=0,g=0,m=!1,v=n;v<c;v+=o){var T,P,S,L;if(S=e[v],P=(L=e[v+1])*_,(T=S*a)<0||P<0||a<=T||_<=P){var w=a+1;if(!m){m=!0,$=.25*(s[2*(0+0*w)]+s[2*(a+0*w)]+s[2*(0+_*w)]+s[2*(a+_*w)]),p=.25*(s[2*(0+0*w)+1]+s[2*(a+0*w)+1]+s[2*(0+_*w)+1]+s[2*(a+_*w)+1]);var x=s[2*(a+_*w)]-s[2*(0+0*w)],E=s[2*(a+_*w)+1]-s[2*(0+0*w)+1],M=s[2*(a+0*w)]-s[2*(0+_*w)],b=s[2*(a+0*w)+1]-s[2*(0+_*w)+1];$-=.5*((f=.5*(x+M))+(y=.5*(x-M))),p-=.5*((d=.5*(E+b))+(g=.5*(E-b)))}if(-2<S&&S<3&&-2<L&&L<3)if(S<=0)if(L<=0){var A=s[2*(0+0*w)],I=s[2*(0+0*w)+1],O=$-2*f,D=p-2*d,R=$-2*y,F=p-2*g,C=$-2*f-2*y,N=p-2*d-2*g;(B=.5*(S- -2))+(G=.5*(L- -2))<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else if(L>=1){R=s[2*(0+_*w)],F=s[2*(0+_*w)+1],C=$-2*f+1*y,N=p-2*d+1*g,A=$+3*y,I=p+3*g,O=$-2*f+3*y,D=p-2*d+3*g;(B=.5*(S- -2))+(G=.5*(L-1))<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else{(Y=0|P)==_&&(Y=_-1);var B=.5*(S- -2),G=P-Y,U=Y/_,k=(Y+1)/_;R=s[2*(0+Y*w)],F=s[2*(0+Y*w)+1],A=s[2*(0+(Y+1)*w)],I=s[2*(0+(Y+1)*w)+1],C=$-2*f+U*y,N=p-2*d+U*g,O=$-2*f+k*y,D=p-2*d+k*g;B+G<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else if(1<=S)if(L<=0){O=s[2*(a+0*w)],D=s[2*(a+0*w)+1],A=$+3*f,I=p+3*d,C=$+1*f-2*y,N=p+1*d-2*g,R=$+3*f-2*y,F=p+3*d-2*g;(B=.5*(S-1))+(G=.5*(L- -2))<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else if(L>=1){C=s[2*(a+_*w)],N=s[2*(a+_*w)+1],R=$+3*f+1*y,F=p+3*d+1*g,O=$+1*f+3*y,D=p+1*d+3*g,A=$+3*f+3*y,I=p+3*d+3*g;(B=.5*(S-1))+(G=.5*(L-1))<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else{var Y;(Y=0|P)==_&&(Y=_-1);B=.5*(S-1),G=P-Y,U=Y/_,k=(Y+1)/_,C=s[2*(a+Y*w)],N=s[2*(a+Y*w)+1],O=s[2*(a+(Y+1)*w)],D=s[2*(a+(Y+1)*w)+1],R=$+3*f+U*y,F=p+3*d+U*g,A=$+3*f+k*y,I=p+3*d+k*g;B+G<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else if(L<=0){(X=0|T)==a&&(X=a-1);B=T-X,G=.5*(L- -2);var V=X/a,j=(X+1)/a;O=s[2*(X+0*w)],D=s[2*(X+0*w)+1],A=s[2*(X+1+0*w)],I=s[2*(X+1+0*w)+1],C=$+V*f-2*y,N=p+V*d-2*g,R=$+j*f-2*y,F=p+j*d-2*g;B+G<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else if(L>=1){var X;(X=0|T)==a&&(X=a-1);B=T-X,G=.5*(L-1),V=X/a,j=(X+1)/a,C=s[2*(X+_*w)],N=s[2*(X+_*w)+1],R=s[2*(X+1+_*w)],F=s[2*(X+1+_*w)+1],O=$+V*f+3*y,D=p+V*d+3*g,A=$+j*f+3*y,I=p+j*d+3*g;B+G<=1?(i[v]=C+(R-C)*B+(O-C)*G,i[v+1]=N+(F-N)*B+(D-N)*G):(i[v]=A+(O-A)*(1-B)+(R-A)*(1-G),i[v+1]=I+(D-I)*(1-B)+(F-I)*(1-G))}else t.err.printf("_$li calc : %.4f , %.4f          @@BDBoxGrid\n",S,L);else i[v]=$+S*f+L*y,i[v+1]=p+S*d+L*g}else h=2*((0|T)+(0|P)*(a+1)),(l=T-(0|T))+(u=P-(0|P))<1?(i[v]=s[h]*(1-l-u)+s[h+2]*l+s[h+2*(a+1)]*u,i[v+1]=s[h+1]*(1-l-u)+s[h+3]*l+s[h+2*(a+1)+1]*u):(i[v]=s[h+2*(a+1)+2]*(l-1+u)+s[h+2*(a+1)]*(1-l)+s[h+2]*(1-u),i[v+1]=s[h+2*(a+1)+3]*(l-1+u)+s[h+2*(a+1)+1]*(1-l)+s[h+3]*(1-u))}},Z.prototype.transformPoints_sdk1=function(t,e,i,r,n,o,s){for(var a,_,h,l,u,c,$,p=e,f=this._$o,d=this._$A,y=n*s,g=null!=p._$hr?p._$hr:p._$Cr,m=o;m<y;m+=s)at._$ts?(a=i[m],_=i[m+1],a<0?a=0:a>1&&(a=1),_<0?_=0:_>1&&(_=1),l=0|(_*=d),(h=0|(a*=f))>f-1&&(h=f-1),l>d-1&&(l=d-1),c=a-h,$=_-l,u=2*(h+l*(f+1))):(c=(a=i[m]*f)-(0|a),$=(_=i[m+1]*d)-(0|_),u=2*((0|a)+(0|_)*(f+1))),c+$<1?(r[m]=g[u]*(1-c-$)+g[u+2]*c+g[u+2*(f+1)]*$,r[m+1]=g[u+1]*(1-c-$)+g[u+3]*c+g[u+2*(f+1)+1]*$):(r[m]=g[u+2*(f+1)+2]*(c-1+$)+g[u+2*(f+1)]*(1-c)+g[u+2]*(1-$),r[m+1]=g[u+2*(f+1)+3]*(c-1+$)+g[u+2*(f+1)+1]*(1-c)+g[u+3]*(1-$))},Z.prototype._$VT=function(){return(this._$o+1)*(this._$A+1)},Z.prototype.getType=function(){return E._$_b};function K(t){st.prototype.constructor.call(this,t),this._$8r=E._$ur,this._$Cr=null,this._$hr=null}K.prototype=new st;function tt(){i||(this.visible=!0,this._$g0=!1,this._$NL=null,this._$3S=null,this._$aS=null,tt._$42++)}tt._$42=0,tt.prototype._$zP=function(){this._$3S=new Array,this._$aS=new Array},tt.prototype._$F0=function(t){this._$g0=t._$8L(),this.visible=t._$8L(),this._$NL=t._$nP(),this._$3S=t._$nP(),this._$aS=t._$nP()},tt.prototype.init=function(t){var e=new et(this);return e.setPartsOpacity(this.isVisible()?1:0),e},tt.prototype._$6o=function(t){if(null==this._$3S)throw new Error("_$3S _$6 _$Wo@_$6o");this._$3S.push(t)},tt.prototype._$3o=function(t){if(null==this._$aS)throw new Error("_$aS _$6 _$Wo@_$3o");this._$aS.push(t)},tt.prototype._$Zo=function(t){this._$3S=t},tt.prototype._$xo=function(t){this._$aS=t},tt.prototype.isVisible=function(){return this.visible},tt.prototype._$uL=function(){return this._$g0},tt.prototype._$KP=function(t){this.visible=t},tt.prototype._$ET=function(t){this._$g0=t},tt.prototype.getBaseData=function(){return this._$3S},tt.prototype.getDrawData=function(){return this._$aS},tt.prototype._$p2=function(){return this._$NL},tt.prototype._$ob=function(t){this._$NL=t},tt.prototype.getPartsID=function(){return this._$NL},tt.prototype._$MP=function(t){this._$NL=t};function et(t){this._$VS=null,this._$e0=null,this._$e0=t}et.prototype=new function(){},et.prototype.getPartsOpacity=function(){return this._$VS},et.prototype.setPartsOpacity=function(t){this._$VS=t};function it(t){i||(this.id=t)}it._$L7=function(){l._$27(),yt._$27(),D._$27(),h._$27()},it.prototype.toString=function(){return this.id};function rt(){i||(this._$4S=null)}rt.prototype._$1s=function(){return this._$4S},rt.prototype._$zP=function(){this._$4S=new Array},rt.prototype._$F0=function(t){this._$4S=t._$nP()},rt.prototype._$Ks=function(t){this._$4S.push(t)};function nt(t,e){this.canvas=t,this.context=e,this.viewport=new Array(0,0,t.width,t.height),this._$6r=1,this._$xP=0,this._$3r=1,this._$uP=0,this._$Qo=-1,this.cacheImages={}}nt.tr=new dt,nt._$50=new dt,nt._$Ti=new Array(0,0),nt._$Pi=new Array(0,0),nt._$B=new Array(0,0),nt.prototype._$lP=function(t,e,i,r){this.viewport=new Array(t,e,i,r)},nt.prototype._$bL=function(){this.context.save();var t=this.viewport;null!=t&&(this.context.beginPath(),this.context._$Li(t[0],t[1],t[2],t[3]),this.context.clip())},nt.prototype._$ei=function(){this.context.restore()},nt.prototype.drawElements=function(t,e,i,r,n,o,s,_){try{n!=this._$Qo&&(this._$Qo=n,this.context.globalAlpha=n);for(var h=e.length,l=t.width,u=t.height,c=this.context,$=this._$xP,p=this._$uP,f=this._$6r,d=this._$3r,y=nt.tr,g=nt._$Ti,m=nt._$Pi,T=nt._$B,P=0;P<h;P+=3){c.save();var S=e[P],L=e[P+1],w=e[P+2],x=$+f*i[2*S],E=p+d*i[2*S+1],M=$+f*i[2*L],b=p+d*i[2*L+1],A=$+f*i[2*w],I=p+d*i[2*w+1];s&&(s._$PS(x,E,T),x=T[0],E=T[1],s._$PS(M,b,T),M=T[0],b=T[1],s._$PS(A,I,T),A=T[0],I=T[1]);var O=l*r[2*S],D=u-u*r[2*S+1],R=l*r[2*L],F=u-u*r[2*L+1],C=l*r[2*w],N=u-u*r[2*w+1],B=Math.atan2(F-D,R-O),G=Math.atan2(b-E,M-x),U=M-x,k=b-E,Y=Math.sqrt(U*U+k*k),V=R-O,j=F-D,X=Y/Math.sqrt(V*V+j*j);v._$ni(C,N,O,D,R-O,F-D,-(F-D),R-O,g),v._$ni(A,I,x,E,M-x,b-E,-(b-E),M-x,m);var z=(m[0]-g[0])/g[1],H=Math.min(O,R,C),W=Math.max(O,R,C),q=Math.min(D,F,N),J=Math.max(D,F,N),Q=Math.floor(H),Z=Math.floor(q),K=Math.ceil(W),tt=Math.ceil(J);y.identity(),y.translate(x,E),y.rotate(G),y.scale(1,m[1]/g[1]),y.shear(z,0),y.scale(X,X),y.rotate(-B),y.translate(-O,-D),y.setContext(c);if(o||(o=1.2),at.IGNORE_EXPAND&&(o=0),at.USE_CACHED_POLYGON_IMAGE){var et=_._$e0;if(et.gl_cacheImage=et.gl_cacheImage||{},!et.gl_cacheImage[P]){var it=nt.createCanvas(K-Q,tt-Z);at.DEBUG_DATA.LDGL_CANVAS_MB=at.DEBUG_DATA.LDGL_CANVAS_MB||0,at.DEBUG_DATA.LDGL_CANVAS_MB+=(K-Q)*(tt-Z)*4;var rt=it.getContext("2d");rt.translate(-Q,-Z),nt.clip(rt,y,o,Y,O,D,R,F,C,N,x,E,M,b,A,I),rt.drawImage(t,0,0),et.gl_cacheImage[P]={cacheCanvas:it,cacheContext:rt}}c.drawImage(et.gl_cacheImage[P].cacheCanvas,Q,Z)}else at.IGNORE_CLIP||nt.clip(c,y,o,Y,O,D,R,F,C,N,x,E,M,b,A,I),at.USE_ADJUST_TRANSLATION&&(H=0,W=l,q=0,J=u),c.drawImage(t,H,q,W-H,J-q,H,q,W-H,J-q);c.restore()}}catch(t){a._$Rb(t)}},nt.clip=function(t,e,i,r,n,o,s,a,_,h,l,u,c,$,p,f){i>.02?nt.expandClip(t,e,i,r,l,u,c,$,p,f):nt.clipWithTransform(t,null,n,o,s,a,_,h)},nt.expandClip=function(t,e,i,r,n,o,s,a,_,h){var l=s-n,u=a-o,c=_-n,$=h-o,p=l*$-u*c>0?i:-i,f=-u,d=l,y=_-s,g=h-a,m=-g,v=y,T=Math.sqrt(y*y+g*g),P=-$,S=c,L=Math.sqrt(c*c+$*$),w=n-p*f/r,x=o-p*d/r,E=s-p*f/r,M=a-p*d/r,b=s-p*m/T,A=a-p*v/T,I=_-p*m/T,O=h-p*v/T,D=n+p*P/L,R=o+p*S/L,F=_+p*P/L,C=h+p*S/L,N=nt._$50;return null!=e._$P2(N)&&(nt.clipWithTransform(t,N,w,x,E,M,b,A,I,O,F,C,D,R),!0)},nt.clipWithTransform=function(t,e,i,r,n,o,s,_){if(arguments.length<7)a._$li("err : @LDGL.clip()");else if(arguments[1]instanceof dt){var h=nt._$B,l=e,u=arguments;if(t.beginPath(),l){l._$PS(u[2],u[3],h),t.moveTo(h[0],h[1]);for(var c=4;c<u.length;c+=2)l._$PS(u[c],u[c+1],h),t.lineTo(h[0],h[1])}else{t.moveTo(u[2],u[3]);for(c=4;c<u.length;c+=2)t.lineTo(u[c],u[c+1])}t.clip()}else a._$li("err : a[0] is _$6 LDTransform @LDGL.clip()")},nt.createCanvas=function(t,e){var i=document.createElement("canvas");return i.setAttribute("width",t),i.setAttribute("height",e),i||a._$li("err : "+i),i},nt.dumpValues=function(){for(var t="",e=0;e<arguments.length;e++)t+="["+e+"]= "+arguments[e].toFixed(3)+" , ";console.log(t)};function ot(){i||(this._$TT=null,this._$LT=null,this._$FS=null,this._$wL=null)}ot.prototype._$F0=function(t){this._$TT=t._$_T(),this._$LT=t._$_T(),this._$FS=t._$_T(),this._$wL=t._$nP()},ot.prototype.getMinValue=function(){return this._$TT},ot.prototype.getMaxValue=function(){return this._$LT},ot.prototype.getDefaultValue=function(){return this._$FS},ot.prototype.getParamID=function(){return this._$wL};function st(t){i||(this._$e0=null,this._$IP=null,this._$JS=!1,this._$AT=!0,this._$e0=t,this.totalScale=1,this._$7s=1,this.totalOpacity=1)}st.prototype._$yo=function(){return this._$AT&&!this._$JS},st.prototype._$hS=function(t){this._$AT=t},st.prototype._$GT=function(){return this._$e0},st.prototype._$l2=function(t){this._$IP=t},st.prototype.getPartsIndex=function(){return this._$IP},st.prototype._$x2=function(){return this._$JS},st.prototype._$Ib=function(t){this._$JS=t},st.prototype.getTotalScale=function(){return this.totalScale},st.prototype.setTotalScale_notForClient=function(t){this.totalScale=t},st.prototype.getInterpolatedOpacity=function(){return this._$7s},st.prototype.setInterpolatedOpacity=function(t){this._$7s=t},st.prototype.getTotalOpacity=function(t){return this.totalOpacity},st.prototype.setTotalOpacity=function(t){this.totalOpacity=t};function at(){}at._$2s="2.1.00_1",at._$Kr=201001e3,at._$sP=!0,at._$so=!0,at._$cb=!1,at._$3T=!0,at._$Ts=!0,at._$fb=!0,at._$ts=!0,at.L2D_DEFORMER_EXTEND=!0,at._$Wb=!1,at._$yr=!1,at._$Zs=!1,at.L2D_NO_ERROR=0,at._$i7=1e3,at._$9s=1001,at._$es=1100,at._$r7=2e3,at._$07=2001,at._$b7=2002,at._$H7=4e3,at.L2D_COLOR_BLEND_MODE_MULT=0,at.L2D_COLOR_BLEND_MODE_ADD=1,at.L2D_COLOR_BLEND_MODE_INTERPOLATE=2,at._$6b=!0,at._$cT=0,at.clippingMaskBufferSize=256,at.glContext=new Array,at.frameBuffers=new Array,at.fTexture=new Array,at.IGNORE_CLIP=!1,at.IGNORE_EXPAND=!1,at.EXPAND_W=2,at.USE_ADJUST_TRANSLATION=!0,at.USE_CANVAS_TRANSFORM=!0,at.USE_CACHED_POLYGON_IMAGE=!1,at.DEBUG_DATA={},at.PROFILE_IOS_SPEED={PROFILE_NAME:"iOS Speed",USE_ADJUST_TRANSLATION:!0,USE_CACHED_POLYGON_IMAGE:!0,EXPAND_W:4},at.PROFILE_IOS_QUALITY={PROFILE_NAME:"iOS HiQ",USE_ADJUST_TRANSLATION:!0,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.PROFILE_IOS_DEFAULT=at.PROFILE_IOS_QUALITY,at.PROFILE_ANDROID={PROFILE_NAME:"Android",USE_ADJUST_TRANSLATION:!1,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.PROFILE_DESKTOP={PROFILE_NAME:"Desktop",USE_ADJUST_TRANSLATION:!1,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.initProfile=function(){wt.isIOS()?at.setupProfile(at.PROFILE_IOS_DEFAULT):wt.isAndroid()?at.setupProfile(at.PROFILE_ANDROID):at.setupProfile(at.PROFILE_DESKTOP)},at.setupProfile=function(t,e){if("number"==typeof t)switch(t){case 9901:t=at.PROFILE_IOS_SPEED;break;case 9902:t=at.PROFILE_IOS_QUALITY;break;case 9903:t=at.PROFILE_IOS_DEFAULT;break;case 9904:t=at.PROFILE_ANDROID;break;case 9905:t=at.PROFILE_DESKTOP;break;default:alert("profile _$6 _$Ui : "+t)}arguments.length<2&&(e=!0),e&&console.log("profile : "+t.PROFILE_NAME);for(var i in t)at[i]=t[i],e&&console.log("  ["+i+"] = "+t[i])},at.init=function(){if(at._$6b){console.log("Live2D %s",at._$2s),at._$6b=!1;!0,at.initProfile()}},at.getVersionStr=function(){return at._$2s},at.getVersionNo=function(){return at._$Kr},at._$sT=function(t){at._$cT=t},at.getError=function(){var t=at._$cT;return at._$cT=0,t},at.dispose=function(){at.glContext=[],at.frameBuffers=[],at.fTexture=[]},at.setGL=function(t,e){var i=e||0;at.glContext[i]=t},at.getGL=function(t){return at.glContext[t]},at.setClippingMaskBufferSize=function(t){at.clippingMaskBufferSize=t},at.getClippingMaskBufferSize=function(){return at.clippingMaskBufferSize},at.deleteBuffer=function(t){at.getGL(t).deleteFramebuffer(at.frameBuffers[t].framebuffer),delete at.frameBuffers[t],delete at.glContext[t]};function _t(){}_t._$r2=function(t){return t<0?0:t>1?1:.5-.5*Math.cos(t*St.PI_F)};function ht(t){i||(this._$ib=t)}ht._$fr=-1,ht.prototype.toString=function(){return this._$ib};function lt(){i||(H.prototype.constructor.call(this),this._$LP=-1,this._$d0=0,this._$Yo=0,this._$JP=null,this._$5P=null,this._$BP=null,this._$Eo=null,this._$Qi=null,this._$6s=lt._$ms,this.culling=!0,this.gl_cacheImage=null,this.instanceNo=lt._$42++)}lt.prototype=new H,lt._$42=0,lt._$Os=30,lt._$ms=0,lt._$ns=1,lt._$_s=2,lt._$gT=new Array,lt.prototype._$_S=function(t){this._$LP=t},lt.prototype.getTextureNo=function(){return this._$LP},lt.prototype._$ZL=function(){return this._$Qi},lt.prototype._$H2=function(){return this._$JP},lt.prototype.getNumPoints=function(){return this._$d0},lt.prototype.getType=function(){return H._$wb},lt.prototype._$B2=function(t,e,i){var r=e,n=null!=r._$hr?r._$hr:r._$Cr;switch(B._$do){default:case B._$Ms:throw new Error("_$L _$ro ");case B._$Qs:for(var o=this._$d0-1;o>=0;--o){n[o*B._$No+4]=i}}},lt.prototype._$zP=function(){this._$GS=new I,this._$GS._$zP()},lt.prototype._$F0=function(t){H.prototype._$F0.call(this,t),this._$LP=t._$6L(),this._$d0=t._$6L(),this._$Yo=t._$6L();var e=t._$nP();this._$BP=new Int16Array(3*this._$Yo);for(var i=3*this._$Yo-1;i>=0;--i)this._$BP[i]=e[i];if(this._$Eo=t._$nP(),this._$Qi=t._$nP(),t.getFormatVersion()>=G._$s7){if(this._$JP=t._$6L(),0!=this._$JP){if(0!=(1&this._$JP)){var r=t._$6L();null==this._$5P&&(this._$5P=new Object),this._$5P._$Hb=parseInt(r)}0!=(this._$JP&lt._$Os)?this._$6s=(this._$JP&lt._$Os)>>1:this._$6s=lt._$ms,0!=(32&this._$JP)&&(this.culling=!1)}}else this._$JP=0},lt.prototype.init=function(t){var e=new ut(this),i=this._$d0*B._$No,r=this._$32();null!=e._$Cr&&(e._$Cr=null),e._$Cr=new Float32Array(i),null!=e._$hr&&(e._$hr=null),e._$hr=r?new Float32Array(i):null;switch(B._$do){default:case B._$Ms:if(B._$Ls)for(var n=this._$d0-1;n>=0;--n){var o=n<<1;this._$Qi[o+1]=1-this._$Qi[o+1]}break;case B._$Qs:for(n=this._$d0-1;n>=0;--n){o=n<<1;var s=n*B._$No,a=this._$Qi[o],_=this._$Qi[o+1];e._$Cr[s]=a,e._$Cr[s+1]=_,e._$Cr[s+4]=0,r&&(e._$hr[s]=a,e._$hr[s+1]=_,e._$hr[s+4]=0)}}return e},lt.prototype._$Nr=function(t,e){var i=e;if(this!=i._$GT()&&console.log("### assert!! ### "),this._$GS._$Ur(t)&&(H.prototype._$Nr.call(this,t,i),!i._$IS[0])){var r=lt._$gT;r[0]=!1,P._$Vr(t,this._$GS,r,this._$d0,this._$Eo,i._$Cr,B._$i2,B._$No)}},lt.prototype._$2b=function(t,e){try{this!=e._$GT()&&console.log("### assert!! ### ");var i=!1;e._$IS[0]&&(i=!0);var r=e;if(!i&&(H.prototype._$2b.call(this,t),this._$32())){var n=this.getTargetBaseDataID();if(r._$8r==H._$ur&&(r._$8r=t.getBaseDataIndex(n)),r._$8r<0)at._$so&&a._$li("_$L _$0P _$G :: %s",n);else{var o=t.getBaseData(r._$8r),s=t._$q2(r._$8r);null==o||s._$x2()?r._$AT=!1:(o._$nb(t,s,r._$Cr,r._$hr,this._$d0,B._$i2,B._$No),r._$AT=!0),r.baseOpacity=s.getTotalOpacity()}}}catch(t){throw t}},lt.prototype.draw=function(t,e,i){if(this!=i._$GT()&&console.log("### assert!! ### "),!i._$IS[0]){var r=i,n=this._$LP;n<0&&(n=1);var o=this.getOpacity(e,r)*i._$VS*i.baseOpacity,s=null!=r._$hr?r._$hr:r._$Cr;t.setClipBufPre_clipContextForDraw(i.clipBufPre_clipContext),t._$WP(this.culling),t._$Uo(n,3*this._$Yo,this._$BP,s,this._$Qi,o,this._$6s,r)}},lt.prototype.dump=function(){console.log("  _$yi( %d ) , _$d0( %d ) , _$Yo( %d ) \n",this._$LP,this._$d0,this._$Yo),console.log("  _$Oi _$di = { ");for(var t=0;t<this._$BP.length;t++)console.log("%5d ,",this._$BP[t]);console.log("\n  _$5i _$30");for(t=0;t<this._$Eo.length;t++){console.log("\n    _$30[%d] = ",t);for(var e=this._$Eo[t],i=0;i<e.length;i++)console.log("%6.2f, ",e[i])}console.log("\n")},lt.prototype._$72=function(t){return null==this._$5P?null:this._$5P[t]},lt.prototype.getIndexArray=function(){return this._$BP};function ut(t){Lt.prototype.constructor.call(this,t),this._$8r=H._$ur,this._$Cr=null,this._$hr=null}ut.prototype=new Lt,ut.prototype.getTransformedPoints=function(){return null!=this._$hr?this._$hr:this._$Cr};function ct(){i||(this.x=null,this.y=null)}ct.prototype._$HT=function(t){this.x=t.x,this.y=t.y},ct.prototype._$HT=function(t,e){this.x=t,this.y=e};function $t(t){i||(r.prototype.constructor.call(this),this.drawParamWebGL=new gt(t),this.drawParamWebGL.setGL(at.getGL(t)))}$t.prototype=new r,$t.loadModel=function(t){var e=new $t;return r._$62(e,t),e},$t.loadModel=function(t,e){var i=new $t(e||0);return r._$62(i,t),i},$t._$to=function(){return new $t},$t._$er=function(t){var e=new _$5("../_$_r/_$t0/_$Ri/_$_P._$d");if(0==e.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+e._$PL());for(var i=["../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1"],r=$t.loadModel(e._$3b()),n=0;n<i.length;n++){var o=new _$5(i[n]);if(0==o.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+o._$PL());r.setTexture(n,_$nL._$_o(t,o._$3b()))}return r},$t.prototype.setGL=function(t){at.setGL(t)},$t.prototype.setTransform=function(t){this.drawParamWebGL.setTransform(t)},$t.prototype.update=function(){this._$5S.update(),this._$5S.preDraw(this.drawParamWebGL)},$t.prototype.draw=function(){this._$5S.draw(this.drawParamWebGL)},$t.prototype._$K2=function(){this.drawParamWebGL._$K2()},$t.prototype.setTexture=function(t,e){null==this.drawParamWebGL&&a._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this.drawParamWebGL.setTexture(t,e)},$t.prototype.setTexture=function(t,e){null==this.drawParamWebGL&&a._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this.drawParamWebGL.setTexture(t,e)},$t.prototype._$Rs=function(){return this.drawParamWebGL._$Rs()},$t.prototype._$Ds=function(t){this.drawParamWebGL._$Ds(t)},$t.prototype.getDrawParam=function(){return this.drawParamWebGL},$t.prototype.setMatrix=function(t){this.drawParamWebGL.setMatrix(t)},$t.prototype.setPremultipliedAlpha=function(t){this.drawParamWebGL.setPremultipliedAlpha(t)},$t.prototype.isPremultipliedAlpha=function(){return this.drawParamWebGL.isPremultipliedAlpha()},$t.prototype.setAnisotropy=function(t){this.drawParamWebGL.setAnisotropy(t)},$t.prototype.getAnisotropy=function(){return this.drawParamWebGL.getAnisotropy()};function pt(){i||(this.motions=null,this._$eb=!1,this.motions=new Array)}pt.prototype._$tb=function(){return this.motions},pt.prototype.startMotion=function(t,e){for(var i=null,r=this.motions.length,n=0;n<r;++n)null!=(i=this.motions[n])&&(i._$qS(i._$w0.getFadeOut()),this._$eb&&a._$Ji("MotionQueueManager[size:%2d]->startMotion() / start _$K _$3 (m%d)\n",r,i._$sr));if(null==t)return-1;(i=new ft)._$w0=t,this.motions.push(i);var o=i._$sr;return this._$eb&&a._$Ji("MotionQueueManager[size:%2d]->startMotion() / new _$w0 (m%d)\n",r,o),o},pt.prototype.updateParam=function(t){try{for(var e=!1,i=0;i<this.motions.length;i++){var r=this.motions[i];if(null!=r){var n=r._$w0;null!=n?(n.updateParam(t,r),e=!0,r.isFinished()&&(this._$eb&&a._$Ji("MotionQueueManager[size:%2d]->updateParam() / _$T0 _$w0 (m%d)\n",this.motions.length-1,r._$sr),this.motions.splice(i,1),i--)):(this.motions=this.motions.splice(i,1),i--)}else this.motions.splice(i,1),i--}return e}catch(t){return a._$li(t),!0}},pt.prototype.isFinished=function(t){if(arguments.length>=1){for(var e=0;e<this.motions.length;e++){if(null!=(i=this.motions[e])&&(i._$sr==t&&!i.isFinished()))return!1}return!0}for(e=0;e<this.motions.length;e++){var i;if(null!=(i=this.motions[e])){if(null!=i._$w0){if(!i.isFinished())return!1}else this.motions.splice(e,1),e--}else this.motions.splice(e,1),e--}return!0},pt.prototype.stopAllMotions=function(){for(var t=0;t<this.motions.length;t++){var e=this.motions[t];if(null!=e){e._$w0;this.motions.splice(t,1),t--}else this.motions.splice(t,1),t--}},pt.prototype._$Zr=function(t){this._$eb=t},pt.prototype._$e=function(){console.log("-- _$R --\n");for(var t=0;t<this.motions.length;t++){var e=this.motions[t]._$w0;console.log("MotionQueueEnt[%d] :: %s\n",this.motions.length,e.toString())}};function ft(){this._$w0=null,this._$AT=!0,this._$9L=!1,this._$z2=-1,this._$bs=-1,this._$Do=-1,this._$sr=null,this._$sr=ft._$Gs++}ft._$Gs=0,ft.prototype.isFinished=function(){return this._$9L},ft.prototype._$qS=function(t){var e=M.getUserTimeMSec()+t;(this._$Do<0||e<this._$Do)&&(this._$Do=e)},ft.prototype._$Bs=function(){return this._$sr};function dt(){this.m=new Array(1,0,0,0,1,0,0,0,1)}dt.prototype.setContext=function(t){var e=this.m;t.transform(e[0],e[1],e[3],e[4],e[6],e[7])},dt.prototype.toString=function(){for(var t="LDTransform { ",e=0;e<9;e++)t+=this.m[e].toFixed(2)+" ,";return t+=" }"},dt.prototype.identity=function(){var t=this.m;t[0]=t[4]=t[8]=1,t[1]=t[2]=t[3]=t[5]=t[6]=t[7]=0},dt.prototype._$PS=function(t,e,i){null==i&&(i=new Array(0,0));var r=this.m;return i[0]=r[0]*t+r[3]*e+r[6],i[1]=r[1]*t+r[4]*e+r[7],i},dt.prototype._$P2=function(t){t||(t=new dt);var e=this.m,i=e[0],r=e[1],n=e[2],o=e[3],s=e[4],a=e[5],_=e[6],h=e[7],l=e[8],u=i*s*l+r*a*_+n*o*h-i*a*h-n*s*_-r*o*l;if(0==u)return null;var c=1/u;return t.m[0]=c*(s*l-h*a),t.m[1]=c*(h*n-r*l),t.m[2]=c*(r*a-s*n),t.m[3]=c*(_*a-o*l),t.m[4]=c*(i*l-_*n),t.m[5]=c*(o*n-i*a),t.m[6]=c*(o*h-_*s),t.m[7]=c*(_*r-i*h),t.m[8]=c*(i*s-o*r),t},dt.prototype.transform=function(t,e,i){null==i&&(i=new Array(0,0));var r=this.m;return i[0]=r[0]*t+r[3]*e+r[6],i[1]=r[1]*t+r[4]*e+r[7],i},dt.prototype.translate=function(t,e){var i=this.m;i[6]=i[0]*t+i[3]*e+i[6],i[7]=i[1]*t+i[4]*e+i[7],i[8]=i[2]*t+i[5]*e+i[8]},dt.prototype.scale=function(t,e){var i=this.m;i[0]*=t,i[1]*=t,i[2]*=t,i[3]*=e,i[4]*=e,i[5]*=e},dt.prototype.shear=function(t,e){var i=this.m,r=i[0]+i[3]*e,n=i[1]+i[4]*e,o=i[2]+i[5]*e;i[3]=i[0]*t+i[3],i[4]=i[1]*t+i[4],i[5]=i[2]*t+i[5],i[0]=r,i[1]=n,i[2]=o},dt.prototype.rotate=function(t){var e=this.m,i=Math.cos(t),r=Math.sin(t),n=e[0]*i+e[3]*r,o=e[1]*i+e[4]*r,s=e[2]*i+e[5]*r;e[3]=-e[0]*r+e[3]*i,e[4]=-e[1]*r+e[4]*i,e[5]=-e[2]*r+e[5]*i,e[0]=n,e[1]=o,e[2]=s},dt.prototype.concatenate=function(t){var e=this.m,i=t.m,r=e[0]*i[0]+e[3]*i[1]+e[6]*i[2],n=e[1]*i[0]+e[4]*i[1]+e[7]*i[2],o=e[2]*i[0]+e[5]*i[1]+e[8]*i[2],s=e[0]*i[3]+e[3]*i[4]+e[6]*i[5],a=e[1]*i[3]+e[4]*i[4]+e[7]*i[5],_=e[2]*i[3]+e[5]*i[4]+e[8]*i[5],h=e[0]*i[6]+e[3]*i[7]+e[6]*i[8],l=e[1]*i[6]+e[4]*i[7]+e[7]*i[8],u=e[2]*i[6]+e[5]*i[7]+e[8]*i[8];m[0]=r,m[1]=n,m[2]=o,m[3]=s,m[4]=a,m[5]=_,m[6]=h,m[7]=l,m[8]=u};function yt(t){i||it.prototype.constructor.call(this,t)}yt.prototype=new it,yt._$eT=null,yt._$tP=new Object,yt._$2o=function(){return null==yt._$eT&&(yt._$eT=yt.getID("DST_BASE")),yt._$eT},yt._$27=function(){yt._$tP.clear(),yt._$eT=null},yt.getID=function(t){var e=yt._$tP[t];return null==e&&(e=new yt(t),yt._$tP[t]=e),e},yt.prototype._$3s=function(){return new yt};function gt(t){i||(w.prototype.constructor.call(this),this.textures=new Array,this.transform=null,this.gl=null,this.glno=t,this.firstDraw=!0,this.anisotropyExt=null,this.maxAnisotropy=0,this._$As=32,this._$Gr=!1,this._$NT=null,this._$vS=null,this._$no=null,this.vertShader=null,this.fragShader=null,this.vertShaderOff=null,this.fragShaderOff=null)}gt.prototype=new w,gt._$9r=function(t){return new Float32Array(t)},gt._$vb=function(t){return new Int16Array(t)},gt._$cr=function(t,e){return null==t||t._$yL()<e.length?((t=gt._$9r(2*e.length)).put(e),t._$oT(0)):(t.clear(),t.put(e),t._$oT(0)),t},gt._$mb=function(t,e){return null==t||t._$yL()<e.length?((t=gt._$vb(2*e.length)).put(e),t._$oT(0)):(t.clear(),t.put(e),t._$oT(0)),t},gt._$Hs=function(){return this._$Gr},gt._$as=function(t){this._$Gr=t},gt.prototype.getGL=function(){return this.gl},gt.prototype.setGL=function(t){this.gl=t},gt.prototype.setTransform=function(t){this.transform=t},gt.prototype._$ZT=function(){var t=this.gl;this.firstDraw&&(this.initShader(),this.firstDraw=!1,this.anisotropyExt=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic"),this.anisotropyExt&&(this.maxAnisotropy=t.getParameter(this.anisotropyExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT))),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.DEPTH_TEST),t.frontFace(t.CW),t.enable(t.BLEND),t.colorMask(1,1,1,1),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},gt.prototype._$Uo=function(t,e,i,r,n,o,s,a){if(!(o<.01&&null==this.clipBufPre_clipContextMask)){o>.9&&at.EXPAND_W;var _=this.gl;if(null==this.gl)throw new Error("gl is null");var h=1*this._$C0*o,l=1*this._$tT*o,u=1*this._$WL*o,c=this._$lT*o;if(null!=this.clipBufPre_clipContextMask){_.frontFace(_.CCW),_.useProgram(this.shaderProgram),this._$vS=mt(_,this._$vS,r),this._$no=vt(_,this._$no,i),_.enableVertexAttribArray(this.a_position_Loc),_.vertexAttribPointer(this.a_position_Loc,2,_.FLOAT,!1,0,0),this._$NT=mt(_,this._$NT,n),_.activeTexture(_.TEXTURE1),_.bindTexture(_.TEXTURE_2D,this.textures[t]),_.uniform1i(this.s_texture0_Loc,1),_.enableVertexAttribArray(this.a_texCoord_Loc),_.vertexAttribPointer(this.a_texCoord_Loc,2,_.FLOAT,!1,0,0),_.uniformMatrix4fv(this.u_matrix_Loc,!1,this.getClipBufPre_clipContextMask().matrixForMask);var $=this.getClipBufPre_clipContextMask().layoutChannelNo,p=this.getChannelFlagAsColor($);_.uniform4f(this.u_channelFlag,p.r,p.g,p.b,p.a);var f=this.getClipBufPre_clipContextMask().layoutBounds;_.uniform4f(this.u_baseColor_Loc,2*f.x-1,2*f.y-1,2*f._$EL()-1,2*f._$5T()-1),_.uniform1i(this.u_maskFlag_Loc,!0)}else if(null!=this.getClipBufPre_clipContextDraw()){_.useProgram(this.shaderProgramOff),this._$vS=mt(_,this._$vS,r),this._$no=vt(_,this._$no,i),_.enableVertexAttribArray(this.a_position_Loc_Off),_.vertexAttribPointer(this.a_position_Loc_Off,2,_.FLOAT,!1,0,0),this._$NT=mt(_,this._$NT,n),_.activeTexture(_.TEXTURE1),_.bindTexture(_.TEXTURE_2D,this.textures[t]),_.uniform1i(this.s_texture0_Loc_Off,1),_.enableVertexAttribArray(this.a_texCoord_Loc_Off),_.vertexAttribPointer(this.a_texCoord_Loc_Off,2,_.FLOAT,!1,0,0),_.uniformMatrix4fv(this.u_clipMatrix_Loc_Off,!1,this.getClipBufPre_clipContextDraw().matrixForDraw),_.uniformMatrix4fv(this.u_matrix_Loc_Off,!1,this.matrix4x4),_.activeTexture(_.TEXTURE2),_.bindTexture(_.TEXTURE_2D,at.fTexture[this.glno]),_.uniform1i(this.s_texture1_Loc_Off,2);$=this.getClipBufPre_clipContextDraw().layoutChannelNo,p=this.getChannelFlagAsColor($);_.uniform4f(this.u_channelFlag_Loc_Off,p.r,p.g,p.b,p.a),_.uniform4f(this.u_baseColor_Loc_Off,h,l,u,c)}else _.useProgram(this.shaderProgram),this._$vS=mt(_,this._$vS,r),this._$no=vt(_,this._$no,i),_.enableVertexAttribArray(this.a_position_Loc),_.vertexAttribPointer(this.a_position_Loc,2,_.FLOAT,!1,0,0),this._$NT=mt(_,this._$NT,n),_.activeTexture(_.TEXTURE1),_.bindTexture(_.TEXTURE_2D,this.textures[t]),_.uniform1i(this.s_texture0_Loc,1),_.enableVertexAttribArray(this.a_texCoord_Loc),_.vertexAttribPointer(this.a_texCoord_Loc,2,_.FLOAT,!1,0,0),_.uniformMatrix4fv(this.u_matrix_Loc,!1,this.matrix4x4),_.uniform4f(this.u_baseColor_Loc,h,l,u,c),_.uniform1i(this.u_maskFlag_Loc,!1);this.culling?this.gl.enable(_.CULL_FACE):this.gl.disable(_.CULL_FACE),this.gl.enable(_.BLEND);var d,y,g,m;if(null!=this.clipBufPre_clipContextMask)d=_.ONE,y=_.ONE_MINUS_SRC_ALPHA,g=_.ONE,m=_.ONE_MINUS_SRC_ALPHA;else switch(s){case lt._$ms:d=_.ONE,y=_.ONE_MINUS_SRC_ALPHA,g=_.ONE,m=_.ONE_MINUS_SRC_ALPHA;break;case lt._$ns:d=_.ONE,y=_.ONE,g=_.ZERO,m=_.ONE;break;case lt._$_s:d=_.DST_COLOR,y=_.ONE_MINUS_SRC_ALPHA,g=_.ZERO,m=_.ONE}_.blendEquationSeparate(_.FUNC_ADD,_.FUNC_ADD),_.blendFuncSeparate(d,y,g,m),this.anisotropyExt&&_.texParameteri(_.TEXTURE_2D,this.anisotropyExt.TEXTURE_MAX_ANISOTROPY_EXT,this.maxAnisotropy);var v=i.length;_.drawElements(_.TRIANGLES,v,_.UNSIGNED_SHORT,0),_.bindTexture(_.TEXTURE_2D,null)}};function mt(t,e,i){return null==e&&(e=t.createBuffer()),t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,i,t.DYNAMIC_DRAW),e}function vt(t,e,i){return null==e&&(e=t.createBuffer()),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e),t.bufferData(t.ELEMENT_ARRAY_BUFFER,i,t.DYNAMIC_DRAW),e}gt.prototype._$Rs=function(){throw new Error("_$Rs")},gt.prototype._$Ds=function(t){throw new Error("_$Ds")},gt.prototype._$K2=function(){for(var t=0;t<this.textures.length;t++){0!=this.textures[t]&&(this.gl._$K2(1,this.textures,t),this.textures[t]=null)}},gt.prototype.setTexture=function(t,e){this.textures[t]=e},gt.prototype.initShader=function(){var t=this.gl;this.loadShaders2(),this.a_position_Loc=t.getAttribLocation(this.shaderProgram,"a_position"),this.a_texCoord_Loc=t.getAttribLocation(this.shaderProgram,"a_texCoord"),this.u_matrix_Loc=t.getUniformLocation(this.shaderProgram,"u_mvpMatrix"),this.s_texture0_Loc=t.getUniformLocation(this.shaderProgram,"s_texture0"),this.u_channelFlag=t.getUniformLocation(this.shaderProgram,"u_channelFlag"),this.u_baseColor_Loc=t.getUniformLocation(this.shaderProgram,"u_baseColor"),this.u_maskFlag_Loc=t.getUniformLocation(this.shaderProgram,"u_maskFlag"),this.a_position_Loc_Off=t.getAttribLocation(this.shaderProgramOff,"a_position"),this.a_texCoord_Loc_Off=t.getAttribLocation(this.shaderProgramOff,"a_texCoord"),this.u_matrix_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_mvpMatrix"),this.u_clipMatrix_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_ClipMatrix"),this.s_texture0_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"s_texture0"),this.s_texture1_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"s_texture1"),this.u_channelFlag_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_channelFlag"),this.u_baseColor_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_baseColor")},gt.prototype.disposeShader=function(){var t=this.gl;this.shaderProgram&&(t.deleteProgram(this.shaderProgram),this.shaderProgram=null),this.shaderProgramOff&&(t.deleteProgram(this.shaderProgramOff),this.shaderProgramOff=null)},gt.prototype.compileShader=function(t,e){var i=this.gl,r=e,n=i.createShader(t);if(null==n)return a._$Ji("_$L0 to create shader"),null;i.shaderSource(n,r),i.compileShader(n);if(!i.getShaderParameter(n,i.COMPILE_STATUS)){var o=i.getShaderInfoLog(n);return a._$Ji("_$L0 to compile shader : "+o),i.deleteShader(n),null}return n},gt.prototype.loadShaders2=function(){var t=this.gl;if(this.shaderProgram=t.createProgram(),!this.shaderProgram)return!1;if(this.shaderProgramOff=t.createProgram(),!this.shaderProgramOff)return!1;if(this.vertShader=this.compileShader(t.VERTEX_SHADER,"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_mvpMatrix * a_position;    v_texCoord = a_texCoord;}"),!this.vertShader)return a._$Ji("Vertex shader compile _$li!"),!1;if(this.vertShaderOff=this.compileShader(t.VERTEX_SHADER,"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;uniform mat4       u_ClipMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_ClipMatrix * a_position;    v_texCoord = a_texCoord ;}"),!this.vertShaderOff)return a._$Ji("OffVertex shader compile _$li!"),!1;if(this.fragShader=this.compileShader(t.FRAGMENT_SHADER,"precision mediump float;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform vec4       u_channelFlag;uniform vec4       u_baseColor;uniform bool       u_maskFlag;void main(){    vec4 smpColor;     if(u_maskFlag){        float isInside =             step(u_baseColor.x, v_ClipPos.x/v_ClipPos.w)          * step(u_baseColor.y, v_ClipPos.y/v_ClipPos.w)          * step(v_ClipPos.x/v_ClipPos.w, u_baseColor.z)          * step(v_ClipPos.y/v_ClipPos.w, u_baseColor.w);        smpColor = u_channelFlag * texture2D(s_texture0 , v_texCoord).a * isInside;    }else{        smpColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;    }    gl_FragColor = smpColor;}"),!this.fragShader)return a._$Ji("Fragment shader compile _$li!"),!1;if(this.fragShaderOff=this.compileShader(t.FRAGMENT_SHADER,"precision mediump float ;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_channelFlag;uniform vec4       u_baseColor ;void main(){    vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;    vec4 clipMask = texture2D(s_texture1, v_ClipPos.xy / v_ClipPos.w) * u_channelFlag;    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;    col_formask = col_formask * maskVal;    gl_FragColor = col_formask;}"),!this.fragShaderOff)return a._$Ji("OffFragment shader compile _$li!"),!1;t.attachShader(this.shaderProgram,this.vertShader),t.attachShader(this.shaderProgram,this.fragShader),t.attachShader(this.shaderProgramOff,this.vertShaderOff),t.attachShader(this.shaderProgramOff,this.fragShaderOff),t.linkProgram(this.shaderProgram),t.linkProgram(this.shaderProgramOff);if(!t.getProgramParameter(this.shaderProgram,t.LINK_STATUS)){var e=t.getProgramInfoLog(this.shaderProgram);return a._$Ji("_$L0 to link program: "+e),this.vertShader&&(t.deleteShader(this.vertShader),this.vertShader=0),this.fragShader&&(t.deleteShader(this.fragShader),this.fragShader=0),this.shaderProgram&&(t.deleteProgram(this.shaderProgram),this.shaderProgram=0),this.vertShaderOff&&(t.deleteShader(this.vertShaderOff),this.vertShaderOff=0),this.fragShaderOff&&(t.deleteShader(this.fragShaderOff),this.fragShaderOff=0),this.shaderProgramOff&&(t.deleteProgram(this.shaderProgramOff),this.shaderProgramOff=0),!1}return!0},gt.prototype.createFramebuffer=function(){var t=this.gl,e=at.clippingMaskBufferSize,i=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,i);var r=t.createRenderbuffer();t.bindRenderbuffer(t.RENDERBUFFER,r),t.renderbufferStorage(t.RENDERBUFFER,t.RGBA4,e,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,r);var n=t.createTexture();return t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e,e,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0),t.bindTexture(t.TEXTURE_2D,null),t.bindRenderbuffer(t.RENDERBUFFER,null),t.bindFramebuffer(t.FRAMEBUFFER,null),at.fTexture[this.glno]=n,{framebuffer:i,renderbuffer:r,texture:at.fTexture[this.glno]}};function Tt(t){i||(this._$P=new Int8Array(8),this._$R0=new DataView(this._$P.buffer),this._$3i=new Int8Array(1e3),this._$hL=0,this._$v0=0,this._$S2=0,this._$Ko=new Array,this._$T=t,this._$F=0)}Tt.prototype._$fP=function(){var t,e,i,r=this._$ST();if(0==(128&r))return 255&r;if(0==(128&(t=this._$ST())))return(127&r)<<7|127&t;if(0==(128&(e=this._$ST())))return(127&r)<<14|(127&t)<<7|255&e;if(0==(128&(i=this._$ST())))return(127&r)<<21|(127&t)<<14|(127&e)<<7|255&i;throw new ht("_$L _$0P  _")},Tt.prototype.getFormatVersion=function(){return this._$S2},Tt.prototype._$gr=function(t){this._$S2=t},Tt.prototype._$3L=function(){return this._$fP()},Tt.prototype._$mP=function(){return this._$zT(),this._$F+=8,this._$T.getFloat64(this._$F-8)},Tt.prototype._$_T=function(){return this._$zT(),this._$F+=4,this._$T.getFloat32(this._$F-4)},Tt.prototype._$6L=function(){return this._$zT(),this._$F+=4,this._$T.getInt32(this._$F-4)},Tt.prototype._$ST=function(){return this._$zT(),this._$T.getInt8(this._$F++)},Tt.prototype._$9T=function(){return this._$zT(),this._$F+=2,this._$T.getInt16(this._$F-2)},Tt.prototype._$2T=function(){throw this._$zT(),this._$F+=8,new ht("_$L _$q read long")},Tt.prototype._$po=function(){return this._$zT(),0!=this._$T.getInt8(this._$F++)};var Pt=!0;Tt.prototype._$bT=function(){this._$zT();var t=this._$3L(),e=null;if(Pt)try{var i=new ArrayBuffer(2*t);e=new Uint16Array(i);for(var r=0;r<t;++r)e[r]=this._$T.getUint8(this._$F++);return String.fromCharCode.apply(null,e)}catch(t){Pt=!1}try{var n=new Array;if(null==e)for(r=0;r<t;++r)n[r]=this._$T.getUint8(this._$F++);else for(r=0;r<t;++r)n[r]=e[r];return String.fromCharCode.apply(null,n)}catch(t){console.log("read utf8 / _$rT _$L0 !! : "+t)}},Tt.prototype._$cS=function(){this._$zT();for(var t=this._$3L(),e=new Int32Array(t),i=0;i<t;i++)e[i]=this._$T.getInt32(this._$F),this._$F+=4;return e},Tt.prototype._$Tb=function(){this._$zT();for(var t=this._$3L(),e=new Float32Array(t),i=0;i<t;i++)e[i]=this._$T.getFloat32(this._$F),this._$F+=4;return e},Tt.prototype._$5b=function(){this._$zT();for(var t=this._$3L(),e=new Float64Array(t),i=0;i<t;i++)e[i]=this._$T.getFloat64(this._$F),this._$F+=8;return e},Tt.prototype._$nP=function(){return this._$Jb(-1)},Tt.prototype._$Jb=function(t){if(this._$zT(),t<0&&(t=this._$3L()),t==G._$7P){var e=this._$6L();if(0<=e&&e<this._$Ko.length)return this._$Ko[e];throw new ht("_$sL _$4i @_$m0")}var i=this._$4b(t);return this._$Ko.push(i),i},Tt.prototype._$4b=function(t){if(0==t)return null;if(50==t){var e=this._$bT();return o=D.getID(e)}if(51==t){e=this._$bT();return o=yt.getID(e)}if(134==t){e=this._$bT();return o=h.getID(e)}if(60==t){e=this._$bT();return o=l.getID(e)}if(t>=48){var r=G._$9o(t);return null!=r?(r._$F0(this),r):null}switch(t){case 1:return this._$bT();case 10:return new function(){i||(this.color=null)}(this._$6L(),!0);case 11:return new T(this._$mP(),this._$mP(),this._$mP(),this._$mP());case 12:return new T(this._$_T(),this._$_T(),this._$_T(),this._$_T());case 13:return new S(this._$mP(),this._$mP());case 14:return new S(this._$_T(),this._$_T());case 15:for(var n=this._$3L(),o=new Array(n),s=0;s<n;s++)o[s]=this._$nP();return o;case 17:return o=new R(this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP());case 21:return new _(this._$6L(),this._$6L(),this._$6L(),this._$6L());case 22:return new ct(this._$6L(),this._$6L());case 23:throw new Error("_$L _$ro ");case 16:case 25:return this._$cS();case 26:return this._$5b();case 27:return this._$Tb();case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 18:case 19:case 20:case 24:case 28:throw new ht("_$6 _$q : _$nP() of 2-9 ,18,19,20,24,28 : "+t);default:throw new ht("_$6 _$q : _$nP() NO _$i : "+t)}},Tt.prototype._$8L=function(){return 0==this._$hL?this._$v0=this._$ST():8==this._$hL&&(this._$v0=this._$ST(),this._$hL=0),1==(this._$v0>>7-this._$hL++&1)},Tt.prototype._$zT=function(){0!=this._$hL&&(this._$hL=0)};function St(){}St._$2S=Math.PI/180,St._$bS=Math.PI/180,St._$wS=180/Math.PI,St._$NS=180/Math.PI,St.PI_F=Math.PI,St._$kT=[0,.012368,.024734,.037097,.049454,.061803,.074143,.086471,.098786,.111087,.12337,.135634,.147877,.160098,.172295,.184465,.196606,.208718,.220798,.232844,.244854,.256827,.268761,.280654,.292503,.304308,.316066,.327776,.339436,.351044,.362598,.374097,.385538,.396921,.408243,.419502,.430697,.441826,.452888,.463881,.474802,.485651,.496425,.507124,.517745,.528287,.538748,.549126,.559421,.56963,.579752,.589785,.599728,.609579,.619337,.629,.638567,.648036,.657406,.666676,.675843,.684908,.693867,.70272,.711466,.720103,.72863,.737045,.745348,.753536,.76161,.769566,.777405,.785125,.792725,.800204,.807561,.814793,.821901,.828884,.835739,.842467,.849066,.855535,.861873,.868079,.874153,.880093,.885898,.891567,.897101,.902497,.907754,.912873,.917853,.922692,.92739,.931946,.936359,.940629,.944755,.948737,.952574,.956265,.959809,.963207,.966457,.96956,.972514,.97532,.977976,.980482,.982839,.985045,.987101,.989006,.990759,.992361,.993811,.995109,.996254,.997248,.998088,.998776,.999312,.999694,.999924,1],St._$92=function(t,e){var i=Math.atan2(t[1],t[0]),r=Math.atan2(e[1],e[0]);return St._$tS(i,r)},St._$tS=function(t,e){for(var i=t-e;i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i},St._$9=function(t){return Math.sin(t)},St.fcos=function(t){return Math.cos(t)};function Lt(t){i||(this._$e0=null,this._$IP=null,this._$Us=null,this._$7s=null,this._$IS=[!1],this._$VS=null,this._$AT=!0,this.baseOpacity=1,this.clipBufPre_clipContext=null,this._$e0=t)}Lt.prototype._$u2=function(){return this._$IS[0]},Lt.prototype._$yo=function(){return this._$AT&&!this._$IS[0]},Lt.prototype._$GT=function(){return this._$e0};function wt(){}wt._$W2=0,wt.SYSTEM_INFO=null,wt.USER_AGENT=navigator.userAgent,wt.isIPhone=function(){return wt.SYSTEM_INFO||wt.setup(),wt.SYSTEM_INFO._isIPhone},wt.isIOS=function(){return wt.SYSTEM_INFO||wt.setup(),wt.SYSTEM_INFO._isIPhone||wt.SYSTEM_INFO._isIPad},wt.isAndroid=function(){return wt.SYSTEM_INFO||wt.setup(),wt.SYSTEM_INFO._isAndroid},wt.getOSVersion=function(){return wt.SYSTEM_INFO||wt.setup(),wt.SYSTEM_INFO.version},wt.getOS=function(){return wt.SYSTEM_INFO||wt.setup(),wt.SYSTEM_INFO._isIPhone||wt.SYSTEM_INFO._isIPad?"iOS":wt.SYSTEM_INFO._isAndroid?"Android":"_$Q0 OS"},wt.setup=function(){var t=wt.USER_AGENT;function e(t,e){for(var i=t.substring(e).split(/[ _,;\.]/),r=0,n=0;n<=2&&!isNaN(i[n]);n++){var o=parseInt(i[n]);if(o<0||o>999){a._$li("err : "+o+" @UtHtml5.setup()"),r=0;break}r+=o*Math.pow(1e3,2-n)}return r}var i,r=wt.SYSTEM_INFO={userAgent:t};if((i=t.indexOf("iPhone OS "))>=0)r.os="iPhone",r._isIPhone=!0,r.version=e(t,i+"iPhone OS ".length);else if((i=t.indexOf("iPad"))>=0){if((i=t.indexOf("CPU OS"))<0)return void a._$li(" err : "+t+" @UtHtml5.setup()");r.os="iPad",r._isIPad=!0,r.version=e(t,i+"CPU OS ".length)}else(i=t.indexOf("Android"))>=0?(r.os="Android",r._isAndroid=!0,r.version=e(t,i+"Android ".length)):(r.os="-",r.version=-1)},at.init();i=!1;e.UtSystem=M,e.UtDebug=a,e.LDTransform=dt,e.LDGL=nt,e.Live2D=at,e.Live2DModelWebGL=$t,e.Live2DModelJS=q,e.Live2DMotion=J,e.MotionQueueManager=pt,e.PhysicsHair=c,e.AMotion=s,e.PartsDataID=h,e.DrawDataID=D,e.BaseDataID=yt,e.ParamID=l}).call(e,i(90))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.L2DBaseModel=e.L2DExpressionMotion=e.L2DExpressionParam=e.L2DEyeBlink=e.EYE_STATE=e.L2DMatrix44=e.L2DModelMatrix=e.L2DMotionManager=e.L2DPhysics=e.L2DPartsParam=e.L2DPose=e.L2DViewMatrix=e.Live2DFramework=e.L2DTargetPoint=void 0;var r=i(17);function n(){this.live2DModel=null,this.modelMatrix=null,this.eyeBlink=null,this.physics=null,this.pose=null,this.debugMode=!1,this.initialized=!1,this.updating=!1,this.alpha=1,this.accAlpha=0,this.lipSync=!1,this.lipSyncValue=0,this.accelX=0,this.accelY=0,this.accelZ=0,this.dragX=0,this.dragY=0,this.startTimeMSec=null,this.mainMotionManager=new c,this.expressionManager=new c,this.motions={},this.expressions={},this.isTexLoaded=!1}var o=0;n.prototype.getModelMatrix=function(){return this.modelMatrix},n.prototype.setAlpha=function(t){t>.999&&(t=1),t<.001&&(t=0),this.alpha=t},n.prototype.getAlpha=function(){return this.alpha},n.prototype.isInitialized=function(){return this.initialized},n.prototype.setInitialized=function(t){this.initialized=t},n.prototype.isUpdating=function(){return this.updating},n.prototype.setUpdating=function(t){this.updating=t},n.prototype.getLive2DModel=function(){return this.live2DModel},n.prototype.setLipSync=function(t){this.lipSync=t},n.prototype.setLipSyncValue=function(t){this.lipSyncValue=t},n.prototype.setAccel=function(t,e,i){this.accelX=t,this.accelY=e,this.accelZ=i},n.prototype.setDrag=function(t,e){this.dragX=t,this.dragY=e},n.prototype.getMainMotionManager=function(){return this.mainMotionManager},n.prototype.getExpressionManager=function(){return this.expressionManager},n.prototype.loadModelData=function(t,e){var i=g.getPlatformManager();this.debugMode&&i.log("Load model : "+t);var n=this;i.loadLive2DModel(t,function(t){n.live2DModel=t,n.live2DModel.saveParam();0==r.Live2D.getError()?(n.modelMatrix=new u(n.live2DModel.getCanvasWidth(),n.live2DModel.getCanvasHeight()),n.modelMatrix.setWidth(2),n.modelMatrix.setCenterPosition(0,0),e(n.live2DModel)):console.error("Error : Failed to loadModelData().")})},n.prototype.loadTexture=function(t,e,i){o++;var r=g.getPlatformManager();this.debugMode&&r.log("Load Texture : "+e);var n=this;r.loadTexture(this.live2DModel,t,e,function(){0==--o&&(n.isTexLoaded=!0),"function"==typeof i&&i()})},n.prototype.loadMotion=function(t,e,i){var n=g.getPlatformManager();this.debugMode&&n.log("Load Motion : "+e);var o=null,s=this;n.loadBytes(e,function(e){o=r.Live2DMotion.loadMotion(e),null!=t&&(s.motions[t]=o),i(o)})},n.prototype.loadExpression=function(t,e,i){var r=g.getPlatformManager();this.debugMode&&r.log("Load Expression : "+e);var n=this;r.loadBytes(e,function(e){null!=t&&(n.expressions[t]=s.loadJson(e)),"function"==typeof i&&i()})},n.prototype.loadPose=function(t,e){var i=g.getPlatformManager();this.debugMode&&i.log("Load Pose : "+t);var r=this;try{i.loadBytes(t,function(t){r.pose=p.load(t),"function"==typeof e&&e()})}catch(t){console.warn(t)}},n.prototype.loadPhysics=function(t){var e=g.getPlatformManager();this.debugMode&&e.log("Load Physics : "+t);var i=this;try{e.loadBytes(t,function(t){i.physics=$.load(t)})}catch(t){console.warn(t)}},n.prototype.hitTestSimple=function(t,e,i){if(null===this.live2DModel)return!1;var r=this.live2DModel.getDrawDataIndex(t);if(r<0)return!1;for(var n=this.live2DModel.getTransformedPoints(r),o=this.live2DModel.getCanvasWidth(),s=0,a=this.live2DModel.getCanvasHeight(),_=0,h=0;h<n.length;h+=2){var l=n[h],u=n[h+1];l<o&&(o=l),l>s&&(s=l),u<a&&(a=u),u>_&&(_=u)}var c=this.modelMatrix.invertTransformX(e),$=this.modelMatrix.invertTransformY(i);return o<=c&&c<=s&&a<=$&&$<=_};function s(){r.AMotion.prototype.constructor.call(this),this.paramList=new Array}s.prototype=new r.AMotion,s.EXPRESSION_DEFAULT="DEFAULT",s.TYPE_SET=0,s.TYPE_ADD=1,s.TYPE_MULT=2,s.loadJson=function(t){var e=new s,i=g.getPlatformManager().jsonParseFromBytes(t);if(e.setFadeIn(parseInt(i.fade_in)>0?parseInt(i.fade_in):1e3),e.setFadeOut(parseInt(i.fade_out)>0?parseInt(i.fade_out):1e3),null==i.params)return e;var r=i.params,n=r.length;e.paramList=[];for(var o=0;o<n;o++){var _=r[o],h=_.id.toString(),l=parseFloat(_.val),u=s.TYPE_ADD,c=null!=_.calc?_.calc.toString():"add";if((u="add"===c?s.TYPE_ADD:"mult"===c?s.TYPE_MULT:"set"===c?s.TYPE_SET:s.TYPE_ADD)==s.TYPE_ADD){l-=$=null==_.def?0:parseFloat(_.def)}else if(u==s.TYPE_MULT){var $;0==($=null==_.def?1:parseFloat(_.def))&&($=1),l/=$}var p=new a;p.id=h,p.type=u,p.value=l,e.paramList.push(p)}return e},s.prototype.updateParamExe=function(t,e,i,r){for(var n=this.paramList.length-1;n>=0;--n){var o=this.paramList[n];o.type==s.TYPE_ADD?t.addToParamFloat(o.id,o.value,i):o.type==s.TYPE_MULT?t.multParamFloat(o.id,o.value,i):o.type==s.TYPE_SET&&t.setParamFloat(o.id,o.value,i)}};function a(){this.id="",this.type=-1,this.value=null}function _(){this.nextBlinkTime=null,this.stateStartTime=null,this.blinkIntervalMsec=null,this.eyeState=h.STATE_FIRST,this.blinkIntervalMsec=4e3,this.closingMotionMsec=100,this.closedMotionMsec=50,this.openingMotionMsec=150,this.closeIfZero=!0,this.eyeID_L="PARAM_EYE_L_OPEN",this.eyeID_R="PARAM_EYE_R_OPEN"}_.prototype.calcNextBlink=function(){return r.UtSystem.getUserTimeMSec()+Math.random()*(2*this.blinkIntervalMsec-1)},_.prototype.setInterval=function(t){this.blinkIntervalMsec=t},_.prototype.setEyeMotion=function(t,e,i){this.closingMotionMsec=t,this.closedMotionMsec=e,this.openingMotionMsec=i},_.prototype.updateParam=function(t){var e,i=r.UtSystem.getUserTimeMSec(),n=0;switch(this.eyeState){case h.STATE_CLOSING:(n=(i-this.stateStartTime)/this.closingMotionMsec)>=1&&(n=1,this.eyeState=h.STATE_CLOSED,this.stateStartTime=i),e=1-n;break;case h.STATE_CLOSED:(n=(i-this.stateStartTime)/this.closedMotionMsec)>=1&&(this.eyeState=h.STATE_OPENING,this.stateStartTime=i),e=0;break;case h.STATE_OPENING:(n=(i-this.stateStartTime)/this.openingMotionMsec)>=1&&(n=1,this.eyeState=h.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink()),e=n;break;case h.STATE_INTERVAL:this.nextBlinkTime<i&&(this.eyeState=h.STATE_CLOSING,this.stateStartTime=i),e=1;break;case h.STATE_FIRST:default:this.eyeState=h.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink(),e=1}this.closeIfZero||(e=-e),t.setParamFloat(this.eyeID_L,e),t.setParamFloat(this.eyeID_R,e)};var h=function(){};h.STATE_FIRST="STATE_FIRST",h.STATE_INTERVAL="STATE_INTERVAL",h.STATE_CLOSING="STATE_CLOSING",h.STATE_CLOSED="STATE_CLOSED",h.STATE_OPENING="STATE_OPENING";function l(){this.tr=new Float32Array(16),this.identity()}l.mul=function(t,e,i){var r,n,o,s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(r=0;r<4;r++)for(n=0;n<4;n++)for(o=0;o<4;o++)s[r+4*n]+=t[r+4*o]*e[o+4*n];for(r=0;r<16;r++)i[r]=s[r]},l.prototype.identity=function(){for(var t=0;t<16;t++)this.tr[t]=t%5==0?1:0},l.prototype.getArray=function(){return this.tr},l.prototype.getCopyMatrix=function(){return new Float32Array(this.tr)},l.prototype.setMatrix=function(t){if(null!=this.tr&&this.tr.length==this.tr.length)for(var e=0;e<16;e++)this.tr[e]=t[e]},l.prototype.getScaleX=function(){return this.tr[0]},l.prototype.getScaleY=function(){return this.tr[5]},l.prototype.transformX=function(t){return this.tr[0]*t+this.tr[12]},l.prototype.transformY=function(t){return this.tr[5]*t+this.tr[13]},l.prototype.invertTransformX=function(t){return(t-this.tr[12])/this.tr[0]},l.prototype.invertTransformY=function(t){return(t-this.tr[13])/this.tr[5]},l.prototype.multTranslate=function(t,e){var i=[1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1];l.mul(i,this.tr,this.tr)},l.prototype.translate=function(t,e){this.tr[12]=t,this.tr[13]=e},l.prototype.translateX=function(t){this.tr[12]=t},l.prototype.translateY=function(t){this.tr[13]=t},l.prototype.multScale=function(t,e){var i=[t,0,0,0,0,e,0,0,0,0,1,0,0,0,0,1];l.mul(i,this.tr,this.tr)},l.prototype.scale=function(t,e){this.tr[0]=t,this.tr[5]=e};function u(t,e){l.prototype.constructor.call(this),this.width=t,this.height=e}u.prototype=new l,u.prototype.setPosition=function(t,e){this.translate(t,e)},u.prototype.setCenterPosition=function(t,e){var i=this.width*this.getScaleX(),r=this.height*this.getScaleY();this.translate(t-i/2,e-r/2)},u.prototype.top=function(t){this.setY(t)},u.prototype.bottom=function(t){var e=this.height*this.getScaleY();this.translateY(t-e)},u.prototype.left=function(t){this.setX(t)},u.prototype.right=function(t){var e=this.width*this.getScaleX();this.translateX(t-e)},u.prototype.centerX=function(t){var e=this.width*this.getScaleX();this.translateX(t-e/2)},u.prototype.centerY=function(t){var e=this.height*this.getScaleY();this.translateY(t-e/2)},u.prototype.setX=function(t){this.translateX(t)},u.prototype.setY=function(t){this.translateY(t)},u.prototype.setHeight=function(t){var e=t/this.height,i=-e;this.scale(e,i)},u.prototype.setWidth=function(t){var e=t/this.width,i=-e;this.scale(e,i)};function c(){r.MotionQueueManager.prototype.constructor.call(this),this.currentPriority=null,this.reservePriority=null,this.super=r.MotionQueueManager.prototype}c.prototype=new r.MotionQueueManager,c.prototype.getCurrentPriority=function(){return this.currentPriority},c.prototype.getReservePriority=function(){return this.reservePriority},c.prototype.reserveMotion=function(t){return!(this.reservePriority>=t)&&(!(this.currentPriority>=t)&&(this.reservePriority=t,!0))},c.prototype.setReservePriority=function(t){this.reservePriority=t},c.prototype.updateParam=function(t){var e=r.MotionQueueManager.prototype.updateParam.call(this,t);return this.isFinished()&&(this.currentPriority=0),e},c.prototype.startMotionPrio=function(t,e){return e==this.reservePriority&&(this.reservePriority=0),this.currentPriority=e,this.startMotion(t,!1)};function $(){this.physicsList=new Array,this.startTimeMSec=r.UtSystem.getUserTimeMSec()}$.load=function(t){for(var e=new $,i=g.getPlatformManager().jsonParseFromBytes(t).physics_hair,n=i.length,o=0;o<n;o++){var s=i[o],a=new r.PhysicsHair,_=s.setup,h=parseFloat(_.length),l=parseFloat(_.regist),u=parseFloat(_.mass);a.setup(h,l,u);for(var c=s.src,p=c.length,f=0;f<p;f++){var d=c[f],y=d.id,m=r.PhysicsHair.Src.SRC_TO_X;"x"===(L=d.ptype)?m=r.PhysicsHair.Src.SRC_TO_X:"y"===L?m=r.PhysicsHair.Src.SRC_TO_Y:"angle"===L?m=r.PhysicsHair.Src.SRC_TO_G_ANGLE:r.UtDebug.error("live2d","Invalid parameter:PhysicsHair.Src");var v=parseFloat(d.scale),T=parseFloat(d.weight);a.addSrcParam(m,y,v,T)}var P=s.targets,S=P.length;for(f=0;f<S;f++){var L,w=P[f];y=w.id,m=r.PhysicsHair.Target.TARGET_FROM_ANGLE;"angle"===(L=w.ptype)?m=r.PhysicsHair.Target.TARGET_FROM_ANGLE:"angle_v"===L?m=r.PhysicsHair.Target.TARGET_FROM_ANGLE_V:r.UtDebug.error("live2d","Invalid parameter:PhysicsHair.Target");v=parseFloat(w.scale),T=parseFloat(w.weight);a.addTargetParam(m,y,v,T)}e.physicsList.push(a)}return e},$.prototype.updateParam=function(t){for(var e=r.UtSystem.getUserTimeMSec()-this.startTimeMSec,i=0;i<this.physicsList.length;i++)this.physicsList[i].update(t,e)};function p(){this.lastTime=0,this.lastModel=null,this.partsGroups=new Array}p.load=function(t){for(var e=new p,i=g.getPlatformManager().jsonParseFromBytes(t).parts_visible,r=i.length,n=0;n<r;n++){for(var o=i[n].group,s=o.length,a=new Array,_=0;_<s;_++){var h=o[_],l=new f(h.id);if(a[_]=l,null!=h.link){var u=h.link,c=u.length;l.link=new Array;for(var $=0;$<c;$++){var d=new f(u[$]);l.link.push(d)}}}e.partsGroups.push(a)}return e},p.prototype.updateParam=function(t){if(null!=t){t!=this.lastModel&&this.initParam(t),this.lastModel=t;var e=r.UtSystem.getUserTimeMSec(),i=0==this.lastTime?0:(e-this.lastTime)/1e3;this.lastTime=e,i<0&&(i=0);for(var n=0;n<this.partsGroups.length;n++)this.normalizePartsOpacityGroup(t,this.partsGroups[n],i),this.copyOpacityOtherParts(t,this.partsGroups[n])}},p.prototype.initParam=function(t){if(null!=t)for(var e=0;e<this.partsGroups.length;e++)for(var i=this.partsGroups[e],r=0;r<i.length;r++){i[r].initIndex(t);var n=i[r].partsIndex,o=i[r].paramIndex;if(!(n<0)){var s=0!=t.getParamFloat(o);if(t.setPartsOpacity(n,s?1:0),t.setParamFloat(o,s?1:0),null!=i[r].link)for(var a=0;a<i[r].link.length;a++)i[r].link[a].initIndex(t)}}},p.prototype.normalizePartsOpacityGroup=function(t,e,i){for(var r=-1,n=1,o=0;o<e.length;o++){var s=e[o].partsIndex,a=e[o].paramIndex;if(!(s<0)&&0!=t.getParamFloat(a)){if(r>=0)break;r=o,n=t.getPartsOpacity(s),(n+=i/.5)>1&&(n=1)}}r<0&&(r=0,n=1);for(o=0;o<e.length;o++){if(!((s=e[o].partsIndex)<0))if(r==o)t.setPartsOpacity(s,n);else{var _,h=t.getPartsOpacity(s);(1-(_=n<.5?-.5*n/.5+1:.5*(1-n)/.5))*(1-n)>.15&&(_=1-.15/(1-n)),h>_&&(h=_),t.setPartsOpacity(s,h)}}},p.prototype.copyOpacityOtherParts=function(t,e){for(var i=0;i<e.length;i++){var r=e[i];if(null!=r.link&&!(r.partsIndex<0))for(var n=t.getPartsOpacity(r.partsIndex),o=0;o<r.link.length;o++){var s=r.link[o];s.partsIndex<0||t.setPartsOpacity(s.partsIndex,n)}}};function f(t){this.paramIndex=-1,this.partsIndex=-1,this.link=null,this.id=t}f.prototype.initIndex=function(t){this.paramIndex=t.getParamIndex("VISIBLE:"+this.id),this.partsIndex=t.getPartsDataIndex(r.PartsDataID.getID(this.id)),t.setParamFloat(this.paramIndex,1)};function d(){this.EPSILON=.01,this.faceTargetX=0,this.faceTargetY=0,this.faceX=0,this.faceY=0,this.faceVX=0,this.faceVY=0,this.lastTimeSec=0}d.FRAME_RATE=60,d.prototype.setPoint=function(t,e){this.faceTargetX=t,this.faceTargetY=e},d.prototype.getX=function(){return this.faceX},d.prototype.getY=function(){return this.faceY},d.prototype.update=function(){var t=40/7.5/d.FRAME_RATE;if(0!=this.lastTimeSec){var e=r.UtSystem.getUserTimeMSec(),i=(e-this.lastTimeSec)*d.FRAME_RATE/1e3;this.lastTimeSec=e;var n=i*t/(.15*d.FRAME_RATE),o=this.faceTargetX-this.faceX,s=this.faceTargetY-this.faceY;if(!(Math.abs(o)<=this.EPSILON&&Math.abs(s)<=this.EPSILON)){var a=Math.sqrt(o*o+s*s),_=t*s/a,h=t*o/a-this.faceVX,l=_-this.faceVY,u=Math.sqrt(h*h+l*l);(u<-n||u>n)&&(h*=n/u,l*=n/u,u=n),this.faceVX+=h,this.faceVY+=l;var c=.5*(Math.sqrt(n*n+16*n*a-8*n*a)-n),$=Math.sqrt(this.faceVX*this.faceVX+this.faceVY*this.faceVY);$>c&&(this.faceVX*=c/$,this.faceVY*=c/$),this.faceX+=this.faceVX,this.faceY+=this.faceVY}}else this.lastTimeSec=r.UtSystem.getUserTimeMSec()};function y(){l.prototype.constructor.call(this),this.screenLeft=null,this.screenRight=null,this.screenTop=null,this.screenBottom=null,this.maxLeft=null,this.maxRight=null,this.maxTop=null,this.maxBottom=null}y.prototype=new l,y.prototype.adjustTranslate=function(t,e){this.tr[0]*this.maxLeft+(this.tr[12]+t)>this.screenLeft&&(t=this.screenLeft-this.tr[0]*this.maxLeft-this.tr[12]),this.tr[0]*this.maxRight+(this.tr[12]+t)<this.screenRight&&(t=this.screenRight-this.tr[0]*this.maxRight-this.tr[12]),this.tr[5]*this.maxTop+(this.tr[13]+e)<this.screenTop&&(e=this.screenTop-this.tr[5]*this.maxTop-this.tr[13]),this.tr[5]*this.maxBottom+(this.tr[13]+e)>this.screenBottom&&(e=this.screenBottom-this.tr[5]*this.maxBottom-this.tr[13]);var i=[1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1];l.mul(i,this.tr,this.tr)},y.prototype.adjustScale=function(t,e,i){this.tr[0];var r=[1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1],n=[i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1],o=[1,0,0,0,0,1,0,0,0,0,1,0,-t,-e,0,1];l.mul(o,this.tr,this.tr),l.mul(n,this.tr,this.tr),l.mul(r,this.tr,this.tr)},y.prototype.setScreenRect=function(t,e,i,r){this.screenLeft=t,this.screenRight=e,this.screenTop=r,this.screenBottom=i},y.prototype.setMaxScreenRect=function(t,e,i,r){this.maxLeft=t,this.maxRight=e,this.maxTop=r,this.maxBottom=i},y.prototype.getScreenLeft=function(){return this.screenLeft},y.prototype.getScreenRight=function(){return this.screenRight},y.prototype.getScreenBottom=function(){return this.screenBottom},y.prototype.getScreenTop=function(){return this.screenTop},y.prototype.getMaxLeft=function(){return this.maxLeft},y.prototype.getMaxRight=function(){return this.maxRight},y.prototype.getMaxBottom=function(){return this.maxBottom},y.prototype.getMaxTop=function(){return this.maxTop};function g(){}g.platformManager=null,g.getPlatformManager=function(){return g.platformManager},g.setPlatformManager=function(t){g.platformManager=t},e.L2DTargetPoint=d,e.Live2DFramework=g,e.L2DViewMatrix=y,e.L2DPose=p,e.L2DPartsParam=f,e.L2DPhysics=$,e.L2DMotionManager=c,e.L2DModelMatrix=u,e.L2DMatrix44=l,e.EYE_STATE=h,e.L2DEyeBlink=_,e.L2DExpressionParam=a,e.L2DExpressionMotion=s,e.L2DBaseModel=n},function(t,e,i){var r=i(10),n=i(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,i,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(i=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),n))?i:o?r(e):"Object"==(s=r(e))&&"function"==typeof e.callee?"Arguments":s}},function(t,e){var i=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++i+r).toString(36))}},function(t,e,i){var r=i(6),n=i(1).document,o=r(n)&&r(n.createElement);t.exports=function(t){return o?n.createElement(t):{}}},function(t,e){var i=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:i)(t)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,i){var r=i(57),n=i(23);t.exports=function(t){return r(n(t))}},function(t,e,i){var r=i(29)("keys"),n=i(20);t.exports=function(t){return r[t]||(r[t]=n(t))}},function(t,e,i){var r=i(11).f,n=i(8),o=i(0)("toStringTag");t.exports=function(t,e,i){t&&!n(t=i?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,i){"use strict";var r=i(14);t.exports.f=function(t){return new function(t){var e,i;this.promise=new t(function(t,r){if(void 0!==e||void 0!==i)throw TypeError("Bad Promise constructor");e=t,i=r}),this.resolve=r(e),this.reject=r(i)}(t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.cDefine={VIEW_LOGICAL_LEFT:-1,VIEW_LOGICAL_RIGHT:1,VIEW_LOGICAL_MAX_LEFT:-2,VIEW_LOGICAL_MAX_RIGHT:2,VIEW_LOGICAL_MAX_BOTTOM:-2,VIEW_LOGICAL_MAX_TOP:2,PRIORITY_NONE:0,PRIORITY_IDLE:1,PRIORITY_NORMAL:2,PRIORITY_FORCE:3,MOTION_GROUP_IDLE:"idle",MOTION_GROUP_TAP_BODY:"tap_body",MOTION_GROUP_FLICK_HEAD:"flick_head",MOTION_GROUP_PINCH_IN:"pinch_in",MOTION_GROUP_PINCH_OUT:"pinch_out",MOTION_GROUP_SHAKE:"shake",HIT_AREA_HEAD:"head",HIT_AREA_BODY:"body"}},function(t,e,i){var r=i(1),n="__core-js_shared__",o=r[n]||(r[n]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,i){"use strict";var r=i(33),n=i(12),o=i(5),s=i(3),a=i(8),_=i(9),h=i(53),l=i(26),u=i(60),c=i(0)("iterator"),$=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,i,f,d,y,g){h(i,e,f);var m,v,T,P=function(t){if(!$&&t in x)return x[t];switch(t){case"keys":case"values":return function(){return new i(this,t)}}return function(){return new i(this,t)}},S=e+" Iterator",L="values"==d,w=!1,x=t.prototype,E=x[c]||x["@@iterator"]||d&&x[d],M=!$&&E||P(d),b=d?L?P("entries"):M:void 0,A="Array"==e?x.entries||E:E;if(A&&(T=u(A.call(new t)))!==Object.prototype&&T.next&&(l(T,S,!0),r||a(T,c)||s(T,c,p)),L&&E&&"values"!==E.name&&(w=!0,M=function(){return E.call(this)}),r&&!g||!$&&!w&&x[c]||s(x,c,M),_[e]=M,_[S]=p,d)if(m={values:L?M:P("values"),keys:y?M:P("keys"),entries:b},g)for(v in m)v in x||o(x,v,m[v]);else n(n.P+n.F*($||w),e,m);return m}},function(t,e){t.exports=!1},function(t,e,i){var r=i(56),n=i(36);t.exports=Object.keys||function(t){return r(t,n)}},function(t,e,i){var r=i(22),n=Math.min;t.exports=function(t){return t>0?n(r(t),9007199254740991):0}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,i){var r=i(1).document;t.exports=r&&r.documentElement},function(t,e,i){var r=i(2),n=i(14),o=i(0)("species");t.exports=function(t,e){var i,s=r(t).constructor;return void 0===s||void 0==(i=r(s)[o])?e:n(i)}},function(t,e,i){var r,n,o,s=i(13),a=i(72),_=i(37),h=i(21),l=i(1),u=l.process,c=l.setImmediate,$=l.clearImmediate,p=l.MessageChannel,f=l.Dispatch,d=0,y={},g="onreadystatechange",m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},v=function(t){m.call(t.data)};c&&$||(c=function(t){for(var e=[],i=1;arguments.length>i;)e.push(arguments[i++]);return y[++d]=function(){a("function"==typeof t?t:Function(t),e)},r(d),d},$=function(t){delete y[t]},"process"==i(10)(u)?r=function(t){u.nextTick(s(m,t,1))}:f&&f.now?r=function(t){f.now(s(m,t,1))}:p?(o=(n=new p).port2,n.port1.onmessage=v,r=s(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",v,!1)):r=g in h("script")?function(t){_.appendChild(h("script"))[g]=function(){_.removeChild(this),m.call(t)}}:function(t){setTimeout(s(m,t,1),0)}),t.exports={set:c,clear:$}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,i){var r=i(2),n=i(6),o=i(27);t.exports=function(t,e){if(r(t),n(e)&&e.constructor===t)return e;var i=o.f(t);return(0,i.resolve)(e),i.promise}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n=window.device,o={},s=[];window.device=o;var a=window.document.documentElement,_=window.navigator.userAgent.toLowerCase(),h=["googletv","viera","smarttv","internet.tv","netcast","nettv","appletv","boxee","kylo","roku","dlnadoc","roku","pov_tv","hbbtv","ce-html"];o.macos=function(){return l("mac")},o.ios=function(){return o.iphone()||o.ipod()||o.ipad()},o.iphone=function(){return!o.windows()&&l("iphone")},o.ipod=function(){return l("ipod")},o.ipad=function(){return l("ipad")},o.android=function(){return!o.windows()&&l("android")},o.androidPhone=function(){return o.android()&&l("mobile")},o.androidTablet=function(){return o.android()&&!l("mobile")},o.blackberry=function(){return l("blackberry")||l("bb10")||l("rim")},o.blackberryPhone=function(){return o.blackberry()&&!l("tablet")},o.blackberryTablet=function(){return o.blackberry()&&l("tablet")},o.windows=function(){return l("windows")},o.windowsPhone=function(){return o.windows()&&l("phone")},o.windowsTablet=function(){return o.windows()&&l("touch")&&!o.windowsPhone()},o.fxos=function(){return(l("(mobile")||l("(tablet"))&&l(" rv:")},o.fxosPhone=function(){return o.fxos()&&l("mobile")},o.fxosTablet=function(){return o.fxos()&&l("tablet")},o.meego=function(){return l("meego")},o.cordova=function(){return window.cordova&&"file:"===location.protocol},o.nodeWebkit=function(){return"object"===r(window.process)},o.mobile=function(){return o.androidPhone()||o.iphone()||o.ipod()||o.windowsPhone()||o.blackberryPhone()||o.fxosPhone()||o.meego()},o.tablet=function(){return o.ipad()||o.androidTablet()||o.blackberryTablet()||o.windowsTablet()||o.fxosTablet()},o.desktop=function(){return!o.tablet()&&!o.mobile()},o.television=function(){for(var t=0;t<h.length;){if(l(h[t]))return!0;t++}return!1},o.portrait=function(){return window.innerHeight/window.innerWidth>1},o.landscape=function(){return window.innerHeight/window.innerWidth<1},o.noConflict=function(){return window.device=n,this};function l(t){return-1!==_.indexOf(t)}function u(t){return a.className.match(new RegExp(t,"i"))}function c(t){var e=null;u(t)||(e=a.className.replace(/^\s+|\s+$/g,""),a.className=e+" "+t)}function $(t){u(t)&&(a.className=a.className.replace(" "+t,""))}o.ios()?o.ipad()?c("ios ipad tablet"):o.iphone()?c("ios iphone mobile"):o.ipod()&&c("ios ipod mobile"):o.macos()?c("macos desktop"):o.android()?o.androidTablet()?c("android tablet"):c("android mobile"):o.blackberry()?o.blackberryTablet()?c("blackberry tablet"):c("blackberry mobile"):o.windows()?o.windowsTablet()?c("windows tablet"):o.windowsPhone()?c("windows mobile"):c("windows desktop"):o.fxos()?o.fxosTablet()?c("fxos tablet"):c("fxos mobile"):o.meego()?c("meego mobile"):o.nodeWebkit()?c("node-webkit"):o.television()?c("television"):o.desktop()&&c("desktop"),o.cordova()&&c("cordova");function p(){o.landscape()?($("portrait"),c("landscape"),f("landscape")):($("landscape"),c("portrait"),f("portrait")),g()}function f(t){for(var e in s)s[e](t)}o.onChangeOrientation=function(t){"function"==typeof t&&s.push(t)};var d="resize";Object.prototype.hasOwnProperty.call(window,"onorientationchange")&&(d="onorientationchange"),window.addEventListener?window.addEventListener(d,p,!1):window.attachEvent?window.attachEvent(d,p):window[d]=p,p();function y(t){for(var e=0;e<t.length;e++)if(o[t[e]]())return t[e];return"unknown"}o.type=y(["mobile","tablet","desktop"]),o.os=y(["ios","iphone","ipad","ipod","android","blackberry","windows","fxos","meego","television"]);function g(){o.orientation=y(["portrait","landscape"])}g(),e.default=o},function(t,e,i){"use strict";var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}();var n=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.eventHandlers={}}return r(t,[{key:"on",value:function(t,e){if("function"!=typeof e)throw new TypeError("Event handler is not a function.");return this.eventHandlers[t]||(this.eventHandlers[t]=[]),this.eventHandlers[t].push(e),this}},{key:"emit",value:function(t){for(var e=arguments.length,i=Array(e>1?e-1:0),r=1;r<e;r++)i[r-1]=arguments[r];return this.eventHandlers[t]&&this.eventHandlers[t].forEach(function(t){"function"==typeof t&&t.apply(void 0,i)}),this.eventHandlers["*"]&&this.eventHandlers["*"].forEach(function(e){"function"==typeof e&&e.apply(void 0,[t].concat(i))}),this}}]),t}();t.exports={EventEmitter:n}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.currCanvas=e.currWebGL=e.createElement=void 0;var r=i(16),n=i(15),o=i(83),s=void 0,a=void 0;e.createElement=function(){var t=document.getElementById(r.config.name.div);null!==t&&document.body.removeChild(t);var i=document.createElement("div");i.id=r.config.name.div,i.className="live2d-widget-container",i.style.setProperty("position","fixed"),i.style.setProperty(r.config.display.position,r.config.display.hOffset+"px"),i.style.setProperty("bottom",r.config.display.vOffset+"px"),i.style.setProperty("width",r.config.display.width+"px"),i.style.setProperty("height",r.config.display.height+"px"),i.style.setProperty("z-index",99999),i.style.setProperty("opacity",r.config.react.opacity),i.style.setProperty("pointer-events","none"),document.body.appendChild(i),n.L2Dwidget.emit("create-container",i),r.config.dialog.enable&&(0,o.createDialogElement)(i);var _=document.createElement("canvas");_.setAttribute("id",r.config.name.canvas),_.setAttribute("width",r.config.display.width*r.config.display.superSample),_.setAttribute("height",r.config.display.height*r.config.display.superSample),_.style.setProperty("position","absolute"),_.style.setProperty("left","0px"),_.style.setProperty("top","0px"),_.style.setProperty("width",r.config.display.width+"px"),_.style.setProperty("height",r.config.display.height+"px"),r.config.dev.border&&_.style.setProperty("border","dashed 1px #CCC"),i.appendChild(_),e.currCanvas=a=document.getElementById(r.config.name.canvas),n.L2Dwidget.emit("create-canvas",_),function(){for(var t=["webgl2","webgl","experimental-webgl2","experimental-webgl","webkit-3d","moz-webgl"],i=0;i<t.length;i++)try{var r=a.getContext(t[i],{alpha:!0,antialias:!0,premultipliedAlpha:!0,failIfMajorPerformanceCaveat:!1});r&&(e.currWebGL=s=r)}catch(t){}s||(console.error("Live2D widgets: Failed to create WebGL context."),window.WebGLRenderingContext||console.error("Your browser may not support WebGL, check https://get.webgl.org/ for futher information."))}()},e.currWebGL=s,e.currCanvas=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MatrixStack=r;function r(){}r.matrixStack=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.depth=0,r.currentMatrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.tmp=new Array(16),r.reset=function(){this.depth=0},r.loadIdentity=function(){for(var t=0;t<16;t++)this.currentMatrix[t]=t%5==0?1:0},r.push=function(){var t=16*(this.depth+1);this.matrixStack.length<t+16&&(this.matrixStack.length=t+16);for(var e=0;e<16;e++)this.matrixStack[t+e]=this.currentMatrix[e];this.depth++},r.pop=function(){this.depth--,this.depth<0&&(myError("Invalid matrix stack."),this.depth=0);for(var t=16*this.depth,e=0;e<16;e++)this.currentMatrix[e]=this.matrixStack[t+e]},r.getMatrix=function(){return this.currentMatrix},r.multMatrix=function(t){var e,i,r;for(e=0;e<16;e++)this.tmp[e]=0;for(e=0;e<4;e++)for(i=0;i<4;i++)for(r=0;r<4;r++)this.tmp[e+4*i]+=this.currentMatrix[e+4*r]*t[r+4*i];for(e=0;e<16;e++)this.currentMatrix[e]=this.tmp[e]}},function(t,e,i){i(47),i(79),t.exports=i(15)},function(t,e,i){i(48),i(51),i(62),i(66),i(77),i(78),t.exports=i(4).Promise},function(t,e,i){"use strict";var r=i(19),n={};n[i(0)("toStringTag")]="z",n+""!="[object z]"&&i(5)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,i){t.exports=!i(7)&&!i(30)(function(){return 7!=Object.defineProperty(i(21)("div"),"a",{get:function(){return 7}}).a})},function(t,e,i){var r=i(6);t.exports=function(t,e){if(!r(t))return t;var i,n;if(e&&"function"==typeof(i=t.toString)&&!r(n=i.call(t)))return n;if("function"==typeof(i=t.valueOf)&&!r(n=i.call(t)))return n;if(!e&&"function"==typeof(i=t.toString)&&!r(n=i.call(t)))return n;throw TypeError("Can't convert object to primitive value")}},function(t,e,i){"use strict";var r=i(52)(!0);i(32)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,i=this._i;return i>=e.length?{value:void 0,done:!0}:(t=r(e,i),this._i+=t.length,{value:t,done:!1})})},function(t,e,i){var r=i(22),n=i(23);t.exports=function(t){return function(e,i){var o,s,a=String(n(e)),_=r(i),h=a.length;return _<0||_>=h?t?"":void 0:(o=a.charCodeAt(_))<55296||o>56319||_+1===h||(s=a.charCodeAt(_+1))<56320||s>57343?t?a.charAt(_):o:t?a.slice(_,_+2):s-56320+(o-55296<<10)+65536}}},function(t,e,i){"use strict";var r=i(54),n=i(31),o=i(26),s={};i(3)(s,i(0)("iterator"),function(){return this}),t.exports=function(t,e,i){t.prototype=r(s,{next:n(1,i)}),o(t,e+" Iterator")}},function(t,e,i){var r=i(2),n=i(55),o=i(36),s=i(25)("IE_PROTO"),a=function(){},_=function(){var t,e=i(21)("iframe"),r=o.length;for(e.style.display="none",i(37).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),_=t.F;r--;)delete _.prototype[o[r]];return _()};t.exports=Object.create||function(t,e){var i;return null!==t?(a.prototype=r(t),i=new a,a.prototype=null,i[s]=t):i=_(),void 0===e?i:n(i,e)}},function(t,e,i){var r=i(11),n=i(2),o=i(34);t.exports=i(7)?Object.defineProperties:function(t,e){n(t);for(var i,s=o(e),a=s.length,_=0;a>_;)r.f(t,i=s[_++],e[i]);return t}},function(t,e,i){var r=i(8),n=i(24),o=i(58)(!1),s=i(25)("IE_PROTO");t.exports=function(t,e){var i,a=n(t),_=0,h=[];for(i in a)i!=s&&r(a,i)&&h.push(i);for(;e.length>_;)r(a,i=e[_++])&&(~o(h,i)||h.push(i));return h}},function(t,e,i){var r=i(10);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,i){var r=i(24),n=i(35),o=i(59);t.exports=function(t){return function(e,i,s){var a,_=r(e),h=n(_.length),l=o(s,h);if(t&&i!=i){for(;h>l;)if((a=_[l++])!=a)return!0}else for(;h>l;l++)if((t||l in _)&&_[l]===i)return t||l||0;return!t&&-1}}},function(t,e,i){var r=i(22),n=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?n(t+e,0):o(t,e)}},function(t,e,i){var r=i(8),n=i(61),o=i(25)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=n(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,i){var r=i(23);t.exports=function(t){return Object(r(t))}},function(t,e,i){for(var r=i(63),n=i(34),o=i(5),s=i(1),a=i(3),_=i(9),h=i(0),l=h("iterator"),u=h("toStringTag"),c=_.Array,$={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=n($),f=0;f<p.length;f++){var d,y=p[f],g=$[y],m=s[y],v=m&&m.prototype;if(v&&(v[l]||a(v,l,c),v[u]||a(v,u,y),_[y]=c,g))for(d in r)v[d]||o(v,d,r[d],!0)}},function(t,e,i){"use strict";var r=i(64),n=i(65),o=i(9),s=i(24);t.exports=i(32)(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,i=this._i++;return!t||i>=t.length?(this._t=void 0,n(1)):n(0,"keys"==e?i:"values"==e?t[i]:[i,t[i]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e,i){var r=i(0)("unscopables"),n=Array.prototype;void 0==n[r]&&i(3)(n,r,{}),t.exports=function(t){n[r][t]=!0}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,i){"use strict";var r,n,o,s,a=i(33),_=i(1),h=i(13),l=i(19),u=i(12),c=i(6),$=i(14),p=i(67),f=i(68),d=i(38),y=i(39).set,g=i(73)(),m=i(27),v=i(40),T=i(41),P="Promise",S=_.TypeError,L=_.process,w=_[P],x="process"==l(L),E=function(){},M=n=m.f,b=!!function(){try{var t=w.resolve(1),e=(t.constructor={})[i(0)("species")]=function(t){t(E,E)};return(x||"function"==typeof PromiseRejectionEvent)&&t.then(E)instanceof e}catch(t){}}(),A=function(t){var e;return!(!c(t)||"function"!=typeof(e=t.then))&&e},I=function(t,e){if(!t._n){t._n=!0;var i=t._c;g(function(){for(var r=t._v,n=1==t._s,o=0,s=function(e){var i,o,s=n?e.ok:e.fail,a=e.resolve,_=e.reject,h=e.domain;try{s?(n||(2==t._h&&R(t),t._h=1),!0===s?i=r:(h&&h.enter(),i=s(r),h&&h.exit()),i===e.promise?_(S("Promise-chain cycle")):(o=A(i))?o.call(i,a,_):a(i)):_(r)}catch(t){_(t)}};i.length>o;)s(i[o++]);t._c=[],t._n=!1,e&&!t._h&&O(t)})}},O=function(t){y.call(_,function(){var e,i,r,n=t._v,o=D(t);if(o&&(e=v(function(){x?L.emit("unhandledRejection",n,t):(i=_.onunhandledrejection)?i({promise:t,reason:n}):(r=_.console)&&r.error&&r.error("Unhandled promise rejection",n)}),t._h=x||D(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},D=function(t){return 1!==t._h&&0===(t._a||t._c).length},R=function(t){y.call(_,function(){var e;x?L.emit("rejectionHandled",t):(e=_.onrejectionhandled)&&e({promise:t,reason:t._v})})},F=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),I(e,!0))},C=function(t){var e,i=this;if(!i._d){i._d=!0,i=i._w||i;try{if(i===t)throw S("Promise can't be resolved itself");(e=A(t))?g(function(){var r={_w:i,_d:!1};try{e.call(t,h(C,r,1),h(F,r,1))}catch(t){F.call(r,t)}}):(i._v=t,i._s=1,I(i,!1))}catch(t){F.call({_w:i,_d:!1},t)}}};b||(w=function(t){p(this,w,P,"_h"),$(t),r.call(this);try{t(h(C,this,1),h(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=i(74)(w.prototype,{then:function(t,e){var i=M(d(this,w));return i.ok="function"!=typeof t||t,i.fail="function"==typeof e&&e,i.domain=x?L.domain:void 0,this._c.push(i),this._a&&this._a.push(i),this._s&&I(this,!1),i.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=h(C,t,1),this.reject=h(F,t,1)},m.f=M=function(t){return t===w||t===s?new o(t):n(t)}),u(u.G+u.W+u.F*!b,{Promise:w}),i(26)(w,P),i(75)(P),s=i(4)[P],u(u.S+u.F*!b,P,{reject:function(t){var e=M(this);return(0,e.reject)(t),e.promise}}),u(u.S+u.F*(a||!b),P,{resolve:function(t){return T(a&&this===s?w:this,t)}}),u(u.S+u.F*!(b&&i(76)(function(t){w.all(t).catch(E)})),P,{all:function(t){var e=this,i=M(e),r=i.resolve,n=i.reject,o=v(function(){var i=[],o=0,s=1;f(t,!1,function(t){var a=o++,_=!1;i.push(void 0),s++,e.resolve(t).then(function(t){_||(_=!0,i[a]=t,--s||r(i))},n)}),--s||r(i)});return o.e&&n(o.v),i.promise},race:function(t){var e=this,i=M(e),r=i.reject,n=v(function(){f(t,!1,function(t){e.resolve(t).then(i.resolve,r)})});return n.e&&r(n.v),i.promise}})},function(t,e){t.exports=function(t,e,i,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(i+": incorrect invocation!");return t}},function(t,e,i){var r=i(13),n=i(69),o=i(70),s=i(2),a=i(35),_=i(71),h={},l={};(e=t.exports=function(t,e,i,u,c){var $,p,f,d,y=c?function(){return t}:_(t),g=r(i,u,e?2:1),m=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for($=a(t.length);$>m;m++)if((d=e?g(s(p=t[m])[0],p[1]):g(t[m]))===h||d===l)return d}else for(f=y.call(t);!(p=f.next()).done;)if((d=n(f,g,p.value,e))===h||d===l)return d}).BREAK=h,e.RETURN=l},function(t,e,i){var r=i(2);t.exports=function(t,e,i,n){try{return n?e(r(i)[0],i[1]):e(i)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,i){var r=i(9),n=i(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[n]===t)}},function(t,e,i){var r=i(19),n=i(0)("iterator"),o=i(9);t.exports=i(4).getIteratorMethod=function(t){if(void 0!=t)return t[n]||t["@@iterator"]||o[r(t)]}},function(t,e){t.exports=function(t,e,i){var r=void 0===i;switch(e.length){case 0:return r?t():t.call(i);case 1:return r?t(e[0]):t.call(i,e[0]);case 2:return r?t(e[0],e[1]):t.call(i,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(i,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(i,e[0],e[1],e[2],e[3])}return t.apply(i,e)}},function(t,e,i){var r=i(1),n=i(39).set,o=r.MutationObserver||r.WebKitMutationObserver,s=r.process,a=r.Promise,_="process"==i(10)(s);t.exports=function(){var t,e,i,h=function(){var r,n;for(_&&(r=s.domain)&&r.exit();t;){n=t.fn,t=t.next;try{n()}catch(r){throw t?i():e=void 0,r}}e=void 0,r&&r.enter()};if(_)i=function(){s.nextTick(h)};else if(!o||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var l=a.resolve();i=function(){l.then(h)}}else i=function(){n.call(r,h)};else{var u=!0,c=document.createTextNode("");new o(h).observe(c,{characterData:!0}),i=function(){c.data=u=!u}}return function(r){var n={fn:r,next:void 0};e&&(e.next=n),t||(t=n,i()),e=n}}},function(t,e,i){var r=i(5);t.exports=function(t,e,i){for(var n in e)r(t,n,e[n],i);return t}},function(t,e,i){"use strict";var r=i(1),n=i(11),o=i(7),s=i(0)("species");t.exports=function(t){var e=r[t];o&&e&&!e[s]&&n.f(e,s,{configurable:!0,get:function(){return this}})}},function(t,e,i){var r=i(0)("iterator"),n=!1;try{var o=[7][r]();o.return=function(){n=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!n)return!1;var i=!1;try{var o=[7],s=o[r]();s.next=function(){return{done:i=!0}},o[r]=function(){return s},t(o)}catch(t){}return i}},function(t,e,i){"use strict";var r=i(12),n=i(4),o=i(1),s=i(38),a=i(41);r(r.P+r.R,"Promise",{finally:function(t){var e=s(this,n.Promise||o.Promise),i="function"==typeof t;return this.then(i?function(i){return a(e,t()).then(function(){return i})}:t,i?function(i){return a(e,t()).then(function(){throw i})}:t)}})},function(t,e,i){"use strict";var r=i(12),n=i(27),o=i(40);r(r.S,"Promise",{try:function(t){var e=n.f(this),i=o(t);return(i.e?e.reject:e.resolve)(i.v),e.promise}})},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});function r(){try{return document.currentScript.src}catch(e){var t=document.getElementsByTagName("script");return t[t.length-1].src}}i.p=r().replace(/[^/\\\\]+$/,""),e.getCurrentPath=r},function(t,e,i){"use strict";t.exports=function(){return{model:{jsonPath:window&&window.__live2d_model_path__,scale:1},display:{superSample:2,width:200,height:400,position:"right",hOffset:0,vOffset:-20},mobile:{show:!0,scale:.8,motion:!0},name:{canvas:"live2dcanvas",div:"live2d-widget"},react:{opacity:1},dev:{border:!1},dialog:{enable:!1,script:null}}}},function(t,e,i){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};t.exports=function t(e,i){e=e||{};function n(e,i){for(var n in i)if(i.hasOwnProperty(n)){var o=i[n];if("__proto__"===n)continue;var s=e[n];null==s?e[n]=o:"object"===(void 0===s?"undefined":r(s))&&null!==s&&"object"===(void 0===o?"undefined":r(o))&&null!==o&&t(s,o)}}for(var o=arguments.length,s=0;s<o;){var a=arguments[s++];a&&n(e,a)}return e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.captureFrame=e.theRealInit=void 0;var r,n=i(16),o=i(44),s=i(17),a=i(18),_=i(91),h=i(45),l=i(28),u=i(42),c=(r=u,r&&r.__esModule?r:{default:r}),$=i(15);var p=null,f=void 0,d=!1,y=null,g=null,m=null,v=null,T=!1,P=.5;function S(t,e,i){if(e.x<i.left+i.width&&e.y<i.top+i.height&&e.x>i.left&&e.y>i.top)return e;var r=t.x-e.x,n=t.y-e.y;function o(t,e){return 180*Math.acos((i={x:0,y:1},r=function(t,e){var i=Math.sqrt(t*t+e*e);return{x:t/i,y:e/i}}(t,e),i.x*r.x+i.y*r.y))/Math.PI;var i,r}var s=o(r,n);e.x<t.x&&(s=360-s);var a=360-o(i.left-t.x,-1*(i.top-t.y)),_=360-o(i.left-t.x,-1*(i.top+i.height-t.y)),h=o(i.left+i.width-t.x,-1*(i.top-t.y)),l=o(i.left+i.width-t.x,-1*(i.top+i.height-t.y)),u=n/r,c={};if(s<h){var $=i.top-t.y,p=$/u;c={y:t.y+$,x:t.x+p}}else if(s<l){var f=i.left+i.width-t.x,d=f*u;c={y:t.y+d,x:t.x+f}}else if(s<_){var y=i.top+i.height-t.y,g=y/u;c={y:t.y+y,x:t.x+g}}else if(s<a){var m=t.x-i.left,v=m*u;c={y:t.y-v,x:t.x-m}}else{var T=i.top-t.y,P=T/u;c={y:t.y+T,x:t.x+P}}return c}function L(t){T=!0;var e=o.currCanvas.getBoundingClientRect(),i=A(t.clientX-e.left),r=I(t.clientY-e.top),n=S({x:e.left+e.width/2,y:e.top+e.height*P},{x:t.clientX,y:t.clientY},e),s=M(n.x-e.left),a=b(n.y-e.top);l.cDefine.DEBUG_MOUSE_LOG&&console.log("modelTapEvent onMouseDown device( x:"+t.clientX+" y:"+t.clientY+" ) view( x:"+s+" y:"+a+")"),i,r,$.L2Dwidget.emit("tap",t),p.tapEvent(s,a)}function w(){T&&(T=!1),y.setPoint(0,0)}function x(t){if("mousedown"==t.type)L(t);else if("mousemove"==t.type)!function(t){T=!0;var e=o.currCanvas.getBoundingClientRect(),i=A(t.clientX-e.left),r=I(t.clientY-e.top),n=S({x:e.left+e.width/2,y:e.top+e.height*P},{x:t.clientX,y:t.clientY},e),s=M(n.x-e.left),a=b(n.y-e.top);l.cDefine.DEBUG_MOUSE_LOG&&console.log("modelTurnHead onMouseMove device( x:"+t.clientX+" y:"+t.clientY+" ) view( x:"+s+" y:"+a+")"),i,r,y.setPoint(s,a)}(t);else if("mouseup"==t.type){if("button"in t&&0!=t.button)return}else"mouseleave"==t.type&&w()}function E(t){var e=t.touches[0];"touchstart"==t.type?1==t.touches.length&&L(e):"touchmove"==t.type?function(t){var e=o.currCanvas.getBoundingClientRect(),i=A(t.clientX-e.left),r=I(t.clientY-e.top),n=S({x:e.left+e.width/2,y:e.top+e.height*P},{x:t.clientX,y:t.clientY},e),s=M(n.x-e.left),a=b(n.y-e.top);l.cDefine.DEBUG_MOUSE_LOG&&console.log("followPointer onMouseMove device( x:"+t.clientX+" y:"+t.clientY+" ) view( x:"+s+" y:"+a+")"),T&&(i,r,y.setPoint(s,a))}(e):"touchend"==t.type&&w()}function M(t){var e=v.transformX(t);return g.invertTransformX(e)}function b(t){var e=v.transformY(t);return g.invertTransformY(e)}function A(t){return v.transformX(t)}function I(t){return v.transformY(t)}e.theRealInit=function(){(0,o.createElement)(),o.currCanvas.addEventListener&&(window.addEventListener("click",x),window.addEventListener("mousedown",x),window.addEventListener("mousemove",x),window.addEventListener("mouseup",x),document.addEventListener("mouseleave",x),window.addEventListener("touchstart",E),window.addEventListener("touchend",E),window.addEventListener("touchmove",E)),p=new _.cManager($.L2Dwidget),y=new a.L2DTargetPoint;var t=o.currCanvas.getBoundingClientRect(),e=t.height/t.width,i=l.cDefine.VIEW_LOGICAL_LEFT,r=l.cDefine.VIEW_LOGICAL_RIGHT,u=-e,T=e;(g=new a.L2DViewMatrix).setScreenRect(i,r,u,T),g.setMaxScreenRect(l.cDefine.VIEW_LOGICAL_MAX_LEFT,l.cDefine.VIEW_LOGICAL_MAX_RIGHT,l.cDefine.VIEW_LOGICAL_MAX_BOTTOM,l.cDefine.VIEW_LOGICAL_MAX_TOP),P=c.default.mobile()&&n.config.mobile.scale||n.config.model.scale,g.adjustScale(0,0,P);var P;(m=new a.L2DMatrix44).multScale(1,t.width/t.height),(v=new a.L2DMatrix44).multTranslate(-t.width/2,-t.height/2),v.multScale(2/t.width,-2/t.height),s.Live2D.setGL(o.currWebGL),o.currWebGL.clearColor(0,0,0,0),S=n.config.model.jsonPath,p.reloadFlg=!0,p.count++,p.changeModel(o.currWebGL,S);var S;return d||(d=!0,function t(){!function(){h.MatrixStack.reset(),h.MatrixStack.loadIdentity(),y.update(),p.setDrag(y.getX(),y.getY()),o.currWebGL.clear(o.currWebGL.COLOR_BUFFER_BIT),h.MatrixStack.multMatrix(m.getArray()),h.MatrixStack.multMatrix(g.getArray()),h.MatrixStack.push();for(var t=0;t<p.numModels();t++){var e=p.getModel(t);if(null==e)return;e.initialized&&!e.updating&&(e.update(),e.draw(o.currWebGL))}h.MatrixStack.pop()}();var e=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;e(t,o.currCanvas),void 0!==f&&(f(o.currCanvas.toDataURL()),f=void 0)}()),p},e.captureFrame=function(t){f=t}},function(t,e,i){"use strict";var r=i(16),n=i(84),o=i(15),s=i(85),a=i(86),_=i(87),h=i(88),l=i(89),u=document.createElement("style");u.innerHTML="\n  .live2d-widget-dialog-container {\n    width: 300px;\n    height: 120px;\n    position: absolute;\n    bottom: 65%;\n    right: 0px;\n    transform-origin: right;\n    padding: 12px;\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n  }\n  .live2d-widget-dialog {\n    width: 100%;\n    height: 100%;\n    color: #917159;\n    font-size: 16px;\n    padding: 12px;\n    border: 2px solid rgb(236, 203, 180);\n    background: rgb(252, 248, 244);\n    box-sizing: border-box;\n    border-radius: 10px;\n    transform: rotate(-2deg);\n    opacity: 0;\n    transition: 200ms opacity;\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 6px, rgba(0, 0, 0, 0.12) 0px 1px 4px;\n    animation: live2d-widget-dialog-tingle 4s ease-in-out 0s infinite alternate;\n  }\n  @keyframes live2d-widget-dialog-tingle {\n    0% { transform: translate(-1px, 1.5px) rotate(-2deg); }\n    100% { transform: translate(1px, -1.5px) rotate(2deg); }\n  }",document.head.appendChild(u);var c=void 0,$=void 0,p=void 0;function f(){$.style.opacity=1}function d(){$.style.opacity=0}function y(t){f(),$.innerText=t,clearTimeout(p),p=setTimeout(function(){d()},5e3)}t.exports={createDialogElement:function(t){if((c=document.createElement("div")).className="live2d-widget-dialog-container",c.style.transform="scale("+r.config.display.width/250+")",($=document.createElement("div")).className="live2d-widget-dialog",c.appendChild($),t.appendChild(c),o.L2Dwidget.emit("create-dialog",c),r.config.dialog.script){var e=new n.ScriptEngine(y);e.registerEmitter("every",(0,s.everyEmitter)(e)),e.registerEmitter("hover",(0,a.hoverEmitter)()),e.registerEmitter("tap body",(0,_.tapbodyEmitter)(o.L2Dwidget)),e.registerEmitter("tap face",(0,h.tapfaceEmitter)(o.L2Dwidget)),e.registerVariable("hitokoto",l.hitokotoVariable),Object.keys(r.config.dialog.script).forEach(function(t){e.run(t,r.config.dialog.script[t])})}},displayDialog:f,hiddenDialog:d,alertText:y}},function(t,e,i){"use strict";var r=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),n=i(43);var o=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,n.EventEmitter);function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return i.output=t,i.emitters=[],i.variables=[],i}return r(e,[{key:"registerEmitter",value:function(t,e){this.emitters.push({name:t.toLowerCase(),func:e})}},{key:"registerVariable",value:function(t,e){this.variables.push({name:t.toLowerCase(),func:e})}},{key:"matchEmitter",value:function(t){return this.emitters.find(function(e){return t.toLowerCase().startsWith(e.name)})}},{key:"matchVariable",value:function(t){return this.variables.find(function(e){return t.toLowerCase()===e.name})}},{key:"injectVariable",value:function(t){var e=this;Array.isArray(t)&&(t=t[Math.floor(Math.random()*t.length)]);for(var i=/\$(\w+)\$/g,r=t,n=null,o=[];n=i.exec(t),null!==n;)o.push(n);var s=o.map(function(t){var i=e.matchVariable(t[1]);if(!i)throw new Error("Unknown variable: "+t[1]);var n=i.func();return Promise.resolve(n).then(function(e){return r=r.replace(t[0],e),e})});return Promise.all(s).then(function(){return r})}},{key:"run",value:function(t,e){var i=this,r=t.trim().toLowerCase(),n=this.matchEmitter(r);if(!n)throw new Error("Unknown emitter: "+r);var o=r.slice(n.name.length).trim().split(/\s+/g);n.func(o,function(){i.emit("emit"),i.injectVariable(e).then(function(t){return i.output(t)})})}}]),e}();t.exports={ScriptEngine:o}},function(t,e,i){"use strict";t.exports={everyEmitter:function(t){return function(e,i){var r=void 0,n=void 0;if(1===e.length)r=e[0],n=!1;else{if(2!==e.length)return;r=e[1],n="idle"===e[0]}var o=function(t){var e=/^(\d+)(s|seconds?)$/g,i=/^(\d+)(ms|milliseconds?)$/g,r=/^(\d+)(m|minutes?)$/g,n=t.toLowerCase(),o=0;return e.test(n)?(e.lastIndex=0,o=1e3*parseInt(e.exec(n)[1])):i.test(n)?(i.lastIndex=0,o=parseInt(i.exec(n)[1])):r.test(n)&&(r.lastIndex=0,o=60*parseInt(r.exec(n)[1])*1e3),o}(r);if(o){var s=null,a=function t(){s=null,i(),n||(s&&clearTimeout(s),s=setTimeout(t,o))};t.on("emit",function(){n&&(s&&clearTimeout(s),s=setTimeout(a,o))}),a()}}}}},function(t,e,i){"use strict";t.exports={hoverEmitter:function(){return function(t,e){document.querySelectorAll(t[0]).forEach(function(t){t.addEventListener("mouseenter",function(){e()})})}}}},function(t,e,i){"use strict";t.exports={tapbodyEmitter:function(t){return function(e,i){t.on("tapbody",i)}}}},function(t,e,i){"use strict";t.exports={tapfaceEmitter:function(t){return function(e,i){t.on("tapface",i)}}}},function(t,e,i){"use strict";t.exports={hitokotoVariable:function(){return new Promise(function(t){var e=new XMLHttpRequest;e.open("get","https://v1.hitokoto.cn"),e.setRequestHeader("Cache-Control","no-cache"),e.onreadystatechange=function(){if(4===e.readyState){var i=JSON.parse(e.responseText);t(i.hitokoto)}},e.send()})}}},function(t,e){t.exports={import:function(){throw new Error("System.import cannot be used indirectly")}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cManager=void 0;var r=i(18),n=i(92),o=i(93),s=i(28);function a(t){this.eventemitter=t,this.models=[],this.count=-1,this.reloadFlg=!1,r.Live2DFramework.setPlatformManager(new n.PlatformManager)}a.prototype.createModel=function(){var t=new o.cModel;return this.models.push(t),t},a.prototype.changeModel=function(t,e){this.reloadFlg&&(this.reloadFlg=!1,this.releaseModel(0,t),this.createModel(),this.models[0].load(t,e))},a.prototype.getModel=function(t){return t>=this.models.length?null:this.models[t]},a.prototype.releaseModel=function(t,e){this.models.length<=t||(this.models[t].release(e),delete this.models[t],this.models.splice(t,1))},a.prototype.numModels=function(){return this.models.length},a.prototype.setDrag=function(t,e){for(var i=0;i<this.models.length;i++)this.models[i].setDrag(t,e)},a.prototype.tapEvent=function(t,e){s.cDefine.DEBUG_LOG&&console.log("tapEvent view x:"+t+" y:"+e);for(var i=0;i<this.models.length;i++)this.models[i].hitTest(s.cDefine.HIT_AREA_HEAD,t,e)?(this.eventemitter.emit("tapface"),s.cDefine.DEBUG_LOG&&console.log("Tap face."),this.models[i].setRandomExpression()):this.models[i].hitTest(s.cDefine.HIT_AREA_BODY,t,e)&&(this.eventemitter.emit("tapbody"),s.cDefine.DEBUG_LOG&&console.log("Tap body. models["+i+"]"),this.models[i].startRandomMotion(s.cDefine.MOTION_GROUP_TAP_BODY,s.cDefine.PRIORITY_NORMAL));return!0},e.cManager=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PlatformManager=o;var r=i(44),n=i(17);function o(){}o.prototype.loadBytes=function(t,e){var i=chrome.runtime.getURL(t),r=new XMLHttpRequest;r.open("GET",i,!0),r.responseType="arraybuffer",r.onload=function(){switch(r.status){case 200:e(r.response);break;default:console.error("Failed to load ("+r.status+") : "+t)}},r.send(null)},o.prototype.loadString=function(t){this.loadBytes(t,function(t){return t})},o.prototype.loadLive2DModel=function(t,e){var i=null;this.loadBytes(t,function(t){i=n.Live2DModelWebGL.loadModel(t),e(i)})},o.prototype.loadTexture=function(t,e,i,n){var o=new Image;o.crossOrigin="Anonymous",o.src=chrome.runtime.getURL(i),o.onload=onload,o.onerror=onerror,o.onload=function(){var i=r.currWebGL,s=i.createTexture();if(!s)return console.error("Failed to generate gl texture name."),-1;t.isPremultipliedAlpha()||i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,1),i.activeTexture(i.TEXTURE0),i.bindTexture(i.TEXTURE_2D,s),i.texImage2D(i.TEXTURE_2D,0,i.RGBA,i.RGBA,i.UNSIGNED_BYTE,o),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.LINEAR_MIPMAP_NEAREST),i.generateMipmap(i.TEXTURE_2D),t.setTexture(e,s),s=null,"function"==typeof n&&n()},o.onerror=function(){console.error("Failed to load image : "+i)}},o.prototype.jsonParseFromBytes=function(t){var e,i=new Uint8Array(t,0,3);e=239==i[0]&&187==i[1]&&191==i[2]?String.fromCharCode.apply(null,new Uint8Array(t,3)):String.fromCharCode.apply(null,new Uint8Array(t));return JSON.parse(e)},o.prototype.log=function(t){console.log(t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cModel=_;var r=i(18),n=i(94),o=i(45),s=i(28),a=i(17);function _(){r.L2DBaseModel.prototype.constructor.call(this),this.modelHomeDir="",this.modelSetting=null,this.tmpMatrix=[]}_.prototype=new r.L2DBaseModel,_.prototype.load=function(t,e,i){this.setUpdating(!0),this.setInitialized(!1),this.modelHomeDir=e.substring(0,e.lastIndexOf("/")+1),this.modelSetting=new n.ModelSettingJson;var o=this;this.modelSetting.loadModelSetting(e,function(){var t=o.modelHomeDir+o.modelSetting.getModelFile();o.loadModelData(t,function(t){for(var e=0;e<o.modelSetting.getTextureNum();e++){if(/^https?:\/\/|^\/\//i.test(o.modelSetting.getTextureFile(e)))var n=o.modelSetting.getTextureFile(e);else n=o.modelHomeDir+o.modelSetting.getTextureFile(e);o.loadTexture(e,n,function(){if(o.isTexLoaded){if(o.modelSetting.getExpressionNum()>0){o.expressions={};for(var t=0;t<o.modelSetting.getExpressionNum();t++){var e=o.modelSetting.getExpressionName(t),n=o.modelHomeDir+o.modelSetting.getExpressionFile(t);o.loadExpression(e,n)}}else o.expressionManager=null,o.expressions={};if(null==o.eyeBlink&&(o.eyeBlink=new r.L2DEyeBlink),null!=o.modelSetting.getPhysicsFile()?o.loadPhysics(o.modelHomeDir+o.modelSetting.getPhysicsFile()):o.physics=null,null!=o.modelSetting.getPoseFile()?o.loadPose(o.modelHomeDir+o.modelSetting.getPoseFile(),function(){o.pose.updateParam(o.live2DModel)}):o.pose=null,null!=o.modelSetting.getLayout()){var a=o.modelSetting.getLayout();null!=a.width&&o.modelMatrix.setWidth(a.width),null!=a.height&&o.modelMatrix.setHeight(a.height),null!=a.x&&o.modelMatrix.setX(a.x),null!=a.y&&o.modelMatrix.setY(a.y),null!=a.center_x&&o.modelMatrix.centerX(a.center_x),null!=a.center_y&&o.modelMatrix.centerY(a.center_y),null!=a.top&&o.modelMatrix.top(a.top),null!=a.bottom&&o.modelMatrix.bottom(a.bottom),null!=a.left&&o.modelMatrix.left(a.left),null!=a.right&&o.modelMatrix.right(a.right)}for(t=0;t<o.modelSetting.getInitParamNum();t++)o.live2DModel.setParamFloat(o.modelSetting.getInitParamID(t),o.modelSetting.getInitParamValue(t));for(t=0;t<o.modelSetting.getInitPartsVisibleNum();t++)o.live2DModel.setPartsOpacity(o.modelSetting.getInitPartsVisibleID(t),o.modelSetting.getInitPartsVisibleValue(t));o.live2DModel.saveParam(),o.preloadMotionGroup(s.cDefine.MOTION_GROUP_IDLE),o.mainMotionManager.stopAllMotions(),o.setUpdating(!1),o.setInitialized(!0),"function"==typeof i&&i()}})}})})},_.prototype.release=function(t){var e=r.Live2DFramework.getPlatformManager();t.deleteTexture(e.texture)},_.prototype.preloadMotionGroup=function(t){for(var e=this,i=0;i<this.modelSetting.getMotionNum(t);i++){var r=this.modelSetting.getMotionFile(t,i);this.loadMotion(r,this.modelHomeDir+r,function(r){r.setFadeIn(e.modelSetting.getMotionFadeIn(t,i)),r.setFadeOut(e.modelSetting.getMotionFadeOut(t,i))})}},_.prototype.update=function(){if(null!=this.live2DModel){var t=2*((a.UtSystem.getUserTimeMSec()-this.startTimeMSec)/1e3)*Math.PI;this.mainMotionManager.isFinished()&&this.startRandomMotion(s.cDefine.MOTION_GROUP_IDLE,s.cDefine.PRIORITY_IDLE),this.live2DModel.loadParam();this.mainMotionManager.updateParam(this.live2DModel)||null!=this.eyeBlink&&this.eyeBlink.updateParam(this.live2DModel),this.live2DModel.saveParam(),null==this.expressionManager||null==this.expressions||this.expressionManager.isFinished()||this.expressionManager.updateParam(this.live2DModel),this.live2DModel.addToParamFloat("PARAM_ANGLE_X",30*this.dragX,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_Y",30*this.dragY,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_Z",this.dragX*this.dragY*-30,1),this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X",10*this.dragX,1),this.live2DModel.addToParamFloat("PARAM_EYE_BALL_X",this.dragX,1),this.live2DModel.addToParamFloat("PARAM_EYE_BALL_Y",this.dragY,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_X",Number(15*Math.sin(t/6.5345)),.5),this.live2DModel.addToParamFloat("PARAM_ANGLE_Y",Number(8*Math.sin(t/3.5345)),.5),this.live2DModel.addToParamFloat("PARAM_ANGLE_Z",Number(10*Math.sin(t/5.5345)),.5),this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X",Number(4*Math.sin(t/15.5345)),.5),this.live2DModel.setParamFloat("PARAM_BREATH",Number(.5+.5*Math.sin(t/3.2345)),1),null!=this.physics&&this.physics.updateParam(this.live2DModel),null==this.lipSync&&this.live2DModel.setParamFloat("PARAM_MOUTH_OPEN_Y",this.lipSyncValue),null!=this.pose&&this.pose.updateParam(this.live2DModel),this.live2DModel.update()}else s.cDefine.DEBUG_LOG&&console.error("Failed to update.")},_.prototype.setRandomExpression=function(){var t=[];for(var e in this.expressions)t.push(e);var i=parseInt(Math.random()*t.length);this.setExpression(t[i])},_.prototype.startRandomMotion=function(t,e){var i=this.modelSetting.getMotionNum(t),r=parseInt(Math.random()*i);this.startMotion(t,r,e)},_.prototype.startMotion=function(t,e,i){var r=this.modelSetting.getMotionFile(t,e);if(null!=r&&""!=r){if(i==s.cDefine.PRIORITY_FORCE)this.mainMotionManager.setReservePriority(i);else if(!this.mainMotionManager.reserveMotion(i))return void(s.cDefine.DEBUG_LOG&&console.log("Motion is running."));var n,o=this;null==this.motions[t]?this.loadMotion(t,this.modelHomeDir+r,function(r){n=r,o.setFadeInFadeOut(t,e,i,n)}):(n=this.motions[t],o.setFadeInFadeOut(t,e,i,n))}else s.cDefine.DEBUG_LOG&&console.error("Failed to motion.")},_.prototype.setFadeInFadeOut=function(t,e,i,r){var n=this.modelSetting.getMotionFile(t,e);if(r.setFadeIn(this.modelSetting.getMotionFadeIn(t,e)),r.setFadeOut(this.modelSetting.getMotionFadeOut(t,e)),s.cDefine.DEBUG_LOG&&console.log("Start motion : "+n),null==this.modelSetting.getMotionSound(t,e))this.mainMotionManager.startMotionPrio(r,i);else{var o=this.modelSetting.getMotionSound(t,e),a=document.createElement("audio");a.src=this.modelHomeDir+o,s.cDefine.DEBUG_LOG&&console.log("Start sound : "+o),a.play(),this.mainMotionManager.startMotionPrio(r,i)}},_.prototype.setExpression=function(t){var e=this.expressions[t];s.cDefine.DEBUG_LOG&&console.log("Expression : "+t),this.expressionManager.startMotion(e,!1)},_.prototype.draw=function(t){o.MatrixStack.push(),o.MatrixStack.multMatrix(this.modelMatrix.getArray()),this.tmpMatrix=o.MatrixStack.getMatrix(),this.live2DModel.setMatrix(this.tmpMatrix),this.live2DModel.draw(),o.MatrixStack.pop()},_.prototype.hitTest=function(t,e,i){for(var r=this.modelSetting.getHitAreaNum(),n=0;n<r;n++)if(t==this.modelSetting.getHitAreaName(n)){var o=this.modelSetting.getHitAreaID(n);return this.hitTestSimple(o,e,i)}return!1}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});"function"==typeof Symbol&&Symbol.iterator;e.ModelSettingJson=n;var r=i(18);function n(){this.NAME="name",this.ID="id",this.MODEL="model",this.TEXTURES="textures",this.HIT_AREAS="hit_areas",this.PHYSICS="physics",this.POSE="pose",this.EXPRESSIONS="expressions",this.MOTION_GROUPS="motions",this.SOUND="sound",this.FADE_IN="fade_in",this.FADE_OUT="fade_out",this.LAYOUT="layout",this.INIT_PARAM="init_param",this.INIT_PARTS_VISIBLE="init_parts_visible",this.VALUE="val",this.FILE="file",this.json={}}n.prototype.loadModelSetting=function(t,e){var i=this;r.Live2DFramework.getPlatformManager().loadBytes(t,function(t){var r=String.fromCharCode.apply(null,new Uint8Array(t));i.json=JSON.parse(r),e()})},n.prototype.getTextureFile=function(t){return null==this.json[this.TEXTURES]||null==this.json[this.TEXTURES][t]?null:this.json[this.TEXTURES][t]},n.prototype.getModelFile=function(){return this.json[this.MODEL]},n.prototype.getTextureNum=function(){return null==this.json[this.TEXTURES]?0:this.json[this.TEXTURES].length},n.prototype.getHitAreaNum=function(){return null==this.json[this.HIT_AREAS]?0:this.json[this.HIT_AREAS].length},n.prototype.getHitAreaID=function(t){return null==this.json[this.HIT_AREAS]||null==this.json[this.HIT_AREAS][t]?null:this.json[this.HIT_AREAS][t][this.ID]},n.prototype.getHitAreaName=function(t){return null==this.json[this.HIT_AREAS]||null==this.json[this.HIT_AREAS][t]?null:this.json[this.HIT_AREAS][t][this.NAME]},n.prototype.getPhysicsFile=function(){return this.json[this.PHYSICS]},n.prototype.getPoseFile=function(){return this.json[this.POSE]},n.prototype.getExpressionNum=function(){return null==this.json[this.EXPRESSIONS]?0:this.json[this.EXPRESSIONS].length},n.prototype.getExpressionFile=function(t){return null==this.json[this.EXPRESSIONS]?null:this.json[this.EXPRESSIONS][t][this.FILE]},n.prototype.getExpressionName=function(t){return null==this.json[this.EXPRESSIONS]?null:this.json[this.EXPRESSIONS][t][this.NAME]},n.prototype.getLayout=function(){return this.json[this.LAYOUT]},n.prototype.getInitParamNum=function(){return null==this.json[this.INIT_PARAM]?0:this.json[this.INIT_PARAM].length},n.prototype.getMotionNum=function(t){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]?0:this.json[this.MOTION_GROUPS][t].length},n.prototype.getMotionFile=function(t,e){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][e]?null:this.json[this.MOTION_GROUPS][t][e][this.FILE]},n.prototype.getMotionSound=function(t,e){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][e]||null==this.json[this.MOTION_GROUPS][t][e][this.SOUND]?null:this.json[this.MOTION_GROUPS][t][e][this.SOUND]},n.prototype.getMotionFadeIn=function(t,e){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][e]||null==this.json[this.MOTION_GROUPS][t][e][this.FADE_IN]?1e3:this.json[this.MOTION_GROUPS][t][e][this.FADE_IN]},n.prototype.getMotionFadeOut=function(t,e){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][e]||null==this.json[this.MOTION_GROUPS][t][e][this.FADE_OUT]?1e3:this.json[this.MOTION_GROUPS][t][e][this.FADE_OUT]},n.prototype.getInitParamID=function(t){return null==this.json[this.INIT_PARAM]||null==this.json[this.INIT_PARAM][t]?null:this.json[this.INIT_PARAM][t][this.ID]},n.prototype.getInitParamValue=function(t){return null==this.json[this.INIT_PARAM]||null==this.json[this.INIT_PARAM][t]?NaN:this.json[this.INIT_PARAM][t][this.VALUE]},n.prototype.getInitPartsVisibleNum=function(){return null==this.json[this.INIT_PARTS_VISIBLE]?0:this.json[this.INIT_PARTS_VISIBLE].length},n.prototype.getInitPartsVisibleID=function(t){return null==this.json[this.INIT_PARTS_VISIBLE]||null==this.json[this.INIT_PARTS_VISIBLE][t]?null:this.json[this.INIT_PARTS_VISIBLE][t][this.ID]},n.prototype.getInitPartsVisibleValue=function(t){return null==this.json[this.INIT_PARTS_VISIBLE]||null==this.json[this.INIT_PARTS_VISIBLE][t]?NaN:this.json[this.INIT_PARTS_VISIBLE][t][this.VALUE]}}]).L2Dwidget;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,